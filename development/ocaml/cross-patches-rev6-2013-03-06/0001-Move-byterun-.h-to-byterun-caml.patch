From 93eab3dcce8cde9b955ffb9b3828fb74e1ab778a Mon Sep 17 00:00:00 2001
From: Adrien Nader <adrien@notk.org>
Date: Sat, 23 Feb 2013 15:49:54 +0100
Subject: [PATCH 01/34] Move byterun/*.h to byterun/caml/.

There are name clashes between ocaml headers and system headers (android
and mingw at least). Names such as "io.h" or "memory.h" are too common.

Moving these files means that they won't be refered to as "io.h" but
rather "caml/io.h", therefore avoiding clashes.

An alternative solution would be to name them "caml_io.h" but
"caml/io.h" looks much nicer.

As far as I can tell, this doesn't change installed files so it's fairly
safe and packagers won't hate me.
---
 .depend                                       |   14 +-
 Makefile                                      |   10 +-
 Makefile.nt                                   |    8 +-
 asmrun/.depend                                | 1743 ++++++++++++++-----------
 asmrun/backtrace.c                            |   10 +-
 asmrun/fail.c                                 |   18 +-
 asmrun/natdynlink.c                           |   16 +-
 asmrun/roots.c                                |   16 +-
 asmrun/signals_asm.c                          |   10 +-
 asmrun/startup.c                              |   32 +-
 byterun/.depend                               | 1070 +++++++++------
 byterun/.ignore                               |    6 +-
 byterun/Makefile                              |    2 +-
 byterun/Makefile.common                       |   24 +-
 byterun/alloc.c                               |   12 +-
 byterun/alloc.h                               |   53 -
 byterun/array.c                               |   10 +-
 byterun/backtrace.c                           |   26 +-
 byterun/backtrace.h                           |   31 -
 byterun/callback.c                            |   16 +-
 byterun/callback.h                            |   55 -
 byterun/caml/alloc.h                          |   53 +
 byterun/caml/backtrace.h                      |   31 +
 byterun/caml/callback.h                       |   55 +
 byterun/caml/compact.h                        |   25 +
 byterun/caml/compare.h                        |   19 +
 byterun/caml/compatibility.h                  |  370 ++++++
 byterun/caml/config.h                         |  166 +++
 byterun/caml/custom.h                         |   71 +
 byterun/caml/debugger.h                       |  111 ++
 byterun/caml/dynlink.h                        |   36 +
 byterun/caml/exec.h                           |   60 +
 byterun/caml/fail.h                           |   84 ++
 byterun/caml/finalise.h                       |   27 +
 byterun/caml/fix_code.h                       |   40 +
 byterun/caml/freelist.h                       |   34 +
 byterun/caml/gc.h                             |   56 +
 byterun/caml/gc_ctrl.h                        |   40 +
 byterun/caml/globroots.h                      |   25 +
 byterun/caml/hash.h                           |   29 +
 byterun/caml/instrtrace.h                     |   29 +
 byterun/caml/instruct.h                       |   59 +
 byterun/caml/int64_emul.h                     |  287 ++++
 byterun/caml/int64_format.h                   |  105 ++
 byterun/caml/int64_native.h                   |   61 +
 byterun/caml/interp.h                         |   31 +
 byterun/caml/intext.h                         |  168 +++
 byterun/caml/io.h                             |  124 ++
 byterun/caml/major_gc.h                       |   60 +
 byterun/caml/md5.h                            |   41 +
 byterun/caml/memory.h                         |  466 +++++++
 byterun/caml/minor_gc.h                       |   56 +
 byterun/caml/misc.h                           |  135 ++
 byterun/caml/mlvalues.h                       |  304 +++++
 byterun/caml/osdeps.h                         |   69 +
 byterun/caml/prims.h                          |   34 +
 byterun/caml/printexc.h                       |   33 +
 byterun/caml/reverse.h                        |   86 ++
 byterun/caml/roots.h                          |   36 +
 byterun/caml/signals.h                        |   57 +
 byterun/caml/signals_machdep.h                |   60 +
 byterun/caml/stacks.h                         |   41 +
 byterun/caml/startup.h                        |   38 +
 byterun/caml/sys.h                            |   28 +
 byterun/caml/ui.h                             |   26 +
 byterun/caml/weak.h                           |   24 +
 byterun/compact.c                             |   20 +-
 byterun/compact.h                             |   25 -
 byterun/compare.c                             |   10 +-
 byterun/compare.h                             |   19 -
 byterun/compatibility.h                       |  370 ------
 byterun/config.h                              |  166 ---
 byterun/custom.c                              |   10 +-
 byterun/custom.h                              |   71 -
 byterun/debugger.c                            |   24 +-
 byterun/debugger.h                            |  111 --
 byterun/dynlink.c                             |   18 +-
 byterun/dynlink.h                             |   36 -
 byterun/exec.h                                |   60 -
 byterun/extern.c                              |   24 +-
 byterun/fail.c                                |   20 +-
 byterun/fail.h                                |   84 --
 byterun/finalise.c                            |   10 +-
 byterun/finalise.h                            |   27 -
 byterun/fix_code.c                            |   20 +-
 byterun/fix_code.h                            |   40 -
 byterun/floats.c                              |   16 +-
 byterun/freelist.c                            |   16 +-
 byterun/freelist.h                            |   34 -
 byterun/gc.h                                  |   56 -
 byterun/gc_ctrl.c                             |   24 +-
 byterun/gc_ctrl.h                             |   40 -
 byterun/globroots.c                           |   10 +-
 byterun/globroots.h                           |   25 -
 byterun/hash.c                                |   16 +-
 byterun/hash.h                                |   29 -
 byterun/instrtrace.c                          |   12 +-
 byterun/instrtrace.h                          |   29 -
 byterun/instruct.h                            |   59 -
 byterun/int64_emul.h                          |  287 ----
 byterun/int64_format.h                        |  105 --
 byterun/int64_native.h                        |   61 -
 byterun/intern.c                              |   26 +-
 byterun/interp.c                              |   34 +-
 byterun/interp.h                              |   31 -
 byterun/intext.h                              |  168 ---
 byterun/ints.c                                |   20 +-
 byterun/io.c                                  |   20 +-
 byterun/io.h                                  |  124 --
 byterun/lexing.c                              |    6 +-
 byterun/main.c                                |    6 +-
 byterun/major_gc.c                            |   26 +-
 byterun/major_gc.h                            |   60 -
 byterun/md5.c                                 |   14 +-
 byterun/md5.h                                 |   41 -
 byterun/memory.c                              |   22 +-
 byterun/memory.h                              |  466 -------
 byterun/meta.c                                |   26 +-
 byterun/minor_gc.c                            |   26 +-
 byterun/minor_gc.h                            |   56 -
 byterun/misc.c                                |    6 +-
 byterun/misc.h                                |  135 --
 byterun/mlvalues.h                            |  304 -----
 byterun/obj.c                                 |   20 +-
 byterun/osdeps.h                              |   69 -
 byterun/parsing.c                             |    8 +-
 byterun/prims.h                               |   34 -
 byterun/printexc.c                            |   14 +-
 byterun/printexc.h                            |   33 -
 byterun/reverse.h                             |   86 --
 byterun/roots.c                               |   18 +-
 byterun/roots.h                               |   36 -
 byterun/signals.c                             |   22 +-
 byterun/signals.h                             |   57 -
 byterun/signals_byt.c                         |   10 +-
 byterun/signals_machdep.h                     |   60 -
 byterun/stacks.c                              |   10 +-
 byterun/stacks.h                              |   41 -
 byterun/startup.c                             |   58 +-
 byterun/startup.h                             |   38 -
 byterun/str.c                                 |   12 +-
 byterun/sys.c                                 |   20 +-
 byterun/sys.h                                 |   28 -
 byterun/terminfo.c                            |   10 +-
 byterun/ui.h                                  |   26 -
 byterun/unix.c                                |    8 +-
 byterun/weak.c                                |   10 +-
 byterun/weak.h                                |   24 -
 byterun/win32.c                               |   12 +-
 debugger/.depend                              |   12 +-
 lex/.depend                                   |    8 +-
 myocamlbuild.ml                               |    8 +-
 ocamldoc/.depend                              |   12 +-
 otherlibs/bigarray/.depend                    |   41 +-
 otherlibs/bigarray/bigarray.h                 |    6 +-
 otherlibs/bigarray/bigarray_stubs.c           |   18 +-
 otherlibs/bigarray/mmap_unix.c                |   12 +-
 otherlibs/bigarray/mmap_win32.c               |   10 +-
 otherlibs/graph/.depend                       |  125 +-
 otherlibs/graph/draw.c                        |    2 +-
 otherlibs/graph/dump_img.c                    |    4 +-
 otherlibs/graph/events.c                      |    4 +-
 otherlibs/graph/fill.c                        |    2 +-
 otherlibs/graph/image.c                       |    4 +-
 otherlibs/graph/libgraph.h                    |    2 +-
 otherlibs/graph/make_img.c                    |    2 +-
 otherlibs/graph/open.c                        |    8 +-
 otherlibs/graph/text.c                        |    2 +-
 otherlibs/labltk/browser/winmain.c            |    6 +-
 otherlibs/labltk/support/cltkCaml.c           |    8 +-
 otherlibs/labltk/support/cltkDMain.c          |   14 +-
 otherlibs/labltk/support/cltkEval.c           |    6 +-
 otherlibs/labltk/support/cltkEvent.c          |    4 +-
 otherlibs/labltk/support/cltkFile.c           |    4 +-
 otherlibs/labltk/support/cltkImg.c            |    6 +-
 otherlibs/labltk/support/cltkMain.c           |   12 +-
 otherlibs/labltk/support/cltkMisc.c           |    4 +-
 otherlibs/labltk/support/cltkTimer.c          |    4 +-
 otherlibs/labltk/support/cltkUtf.c            |    6 +-
 otherlibs/labltk/support/cltkVar.c            |    8 +-
 otherlibs/labltk/support/cltkWait.c           |    6 +-
 otherlibs/num/.depend                         |   25 +-
 otherlibs/num/bng.c                           |    2 +-
 otherlibs/num/bng.h                           |    2 +-
 otherlibs/num/nat_stubs.c                     |   16 +-
 otherlibs/str/.depend                         |   14 +-
 otherlibs/str/strstubs.c                      |    8 +-
 otherlibs/systhreads/.depend                  |   25 +-
 otherlibs/systhreads/st_stubs.c               |   28 +-
 otherlibs/threads/.depend                     |   47 +-
 otherlibs/threads/scheduler.c                 |   28 +-
 otherlibs/unix/.depend                        |  994 +++++++-------
 otherlibs/unix/accept.c                       |   10 +-
 otherlibs/unix/access.c                       |    4 +-
 otherlibs/unix/addrofstr.c                    |    6 +-
 otherlibs/unix/alarm.c                        |    2 +-
 otherlibs/unix/bind.c                         |    4 +-
 otherlibs/unix/chdir.c                        |    2 +-
 otherlibs/unix/chmod.c                        |    2 +-
 otherlibs/unix/chown.c                        |    2 +-
 otherlibs/unix/chroot.c                       |    2 +-
 otherlibs/unix/close.c                        |    2 +-
 otherlibs/unix/closedir.c                     |    2 +-
 otherlibs/unix/connect.c                      |    6 +-
 otherlibs/unix/cst2constr.c                   |    4 +-
 otherlibs/unix/cstringv.c                     |    4 +-
 otherlibs/unix/dup.c                          |    2 +-
 otherlibs/unix/dup2.c                         |    2 +-
 otherlibs/unix/envir.c                        |    4 +-
 otherlibs/unix/errmsg.c                       |    4 +-
 otherlibs/unix/execv.c                        |    4 +-
 otherlibs/unix/execve.c                       |    4 +-
 otherlibs/unix/execvp.c                       |    4 +-
 otherlibs/unix/exit.c                         |    2 +-
 otherlibs/unix/fchmod.c                       |    4 +-
 otherlibs/unix/fchown.c                       |    4 +-
 otherlibs/unix/fcntl.c                        |    4 +-
 otherlibs/unix/fork.c                         |    4 +-
 otherlibs/unix/ftruncate.c                    |    6 +-
 otherlibs/unix/getaddrinfo.c                  |   10 +-
 otherlibs/unix/getcwd.c                       |    6 +-
 otherlibs/unix/getegid.c                      |    2 +-
 otherlibs/unix/geteuid.c                      |    2 +-
 otherlibs/unix/getgid.c                       |    2 +-
 otherlibs/unix/getgr.c                        |    8 +-
 otherlibs/unix/getgroups.c                    |    6 +-
 otherlibs/unix/gethost.c                      |   10 +-
 otherlibs/unix/gethostname.c                  |    6 +-
 otherlibs/unix/getlogin.c                     |    4 +-
 otherlibs/unix/getnameinfo.c                  |   10 +-
 otherlibs/unix/getpeername.c                  |    4 +-
 otherlibs/unix/getpid.c                       |    2 +-
 otherlibs/unix/getppid.c                      |    2 +-
 otherlibs/unix/getproto.c                     |    8 +-
 otherlibs/unix/getpw.c                        |    8 +-
 otherlibs/unix/getserv.c                      |    8 +-
 otherlibs/unix/getsockname.c                  |    4 +-
 otherlibs/unix/gettimeofday.c                 |    6 +-
 otherlibs/unix/getuid.c                       |    2 +-
 otherlibs/unix/gmtime.c                       |    8 +-
 otherlibs/unix/initgroups.c                   |    6 +-
 otherlibs/unix/isatty.c                       |    2 +-
 otherlibs/unix/itimer.c                       |    8 +-
 otherlibs/unix/kill.c                         |    6 +-
 otherlibs/unix/link.c                         |    2 +-
 otherlibs/unix/listen.c                       |    4 +-
 otherlibs/unix/lockf.c                        |    6 +-
 otherlibs/unix/lseek.c                        |    8 +-
 otherlibs/unix/mkdir.c                        |    2 +-
 otherlibs/unix/mkfifo.c                       |    4 +-
 otherlibs/unix/nice.c                         |    2 +-
 otherlibs/unix/open.c                         |    8 +-
 otherlibs/unix/opendir.c                      |    4 +-
 otherlibs/unix/pipe.c                         |    4 +-
 otherlibs/unix/putenv.c                       |    6 +-
 otherlibs/unix/read.c                         |    6 +-
 otherlibs/unix/readdir.c                      |    6 +-
 otherlibs/unix/readlink.c                     |    6 +-
 otherlibs/unix/rename.c                       |    2 +-
 otherlibs/unix/rewinddir.c                    |    4 +-
 otherlibs/unix/rmdir.c                        |    2 +-
 otherlibs/unix/select.c                       |   10 +-
 otherlibs/unix/sendrecv.c                     |   10 +-
 otherlibs/unix/setgid.c                       |    2 +-
 otherlibs/unix/setgroups.c                    |    8 +-
 otherlibs/unix/setsid.c                       |    4 +-
 otherlibs/unix/setuid.c                       |    2 +-
 otherlibs/unix/shutdown.c                     |    4 +-
 otherlibs/unix/signals.c                      |   10 +-
 otherlibs/unix/sleep.c                        |    4 +-
 otherlibs/unix/socket.c                       |    4 +-
 otherlibs/unix/socketaddr.c                   |    6 +-
 otherlibs/unix/socketaddr.h                   |    2 +-
 otherlibs/unix/socketpair.c                   |    6 +-
 otherlibs/unix/sockopt.c                      |    8 +-
 otherlibs/unix/stat.c                         |    8 +-
 otherlibs/unix/strofaddr.c                    |    6 +-
 otherlibs/unix/symlink.c                      |    4 +-
 otherlibs/unix/termios.c                      |    6 +-
 otherlibs/unix/time.c                         |    4 +-
 otherlibs/unix/times.c                        |    6 +-
 otherlibs/unix/truncate.c                     |    6 +-
 otherlibs/unix/umask.c                        |    2 +-
 otherlibs/unix/unixsupport.c                  |   10 +-
 otherlibs/unix/unlink.c                       |    2 +-
 otherlibs/unix/utimes.c                       |    4 +-
 otherlibs/unix/wait.c                         |   10 +-
 otherlibs/unix/write.c                        |    6 +-
 otherlibs/win32graph/dib.c                    |    4 +-
 otherlibs/win32graph/draw.c                   |   10 +-
 otherlibs/win32graph/events.c                 |    4 +-
 otherlibs/win32graph/open.c                   |    6 +-
 otherlibs/win32unix/accept.c                  |    8 +-
 otherlibs/win32unix/bind.c                    |    2 +-
 otherlibs/win32unix/channels.c                |    8 +-
 otherlibs/win32unix/close.c                   |    4 +-
 otherlibs/win32unix/close_on.c                |    2 +-
 otherlibs/win32unix/connect.c                 |    4 +-
 otherlibs/win32unix/createprocess.c           |    4 +-
 otherlibs/win32unix/dup.c                     |    2 +-
 otherlibs/win32unix/dup2.c                    |    2 +-
 otherlibs/win32unix/errmsg.c                  |    4 +-
 otherlibs/win32unix/getpeername.c             |    2 +-
 otherlibs/win32unix/getpid.c                  |    2 +-
 otherlibs/win32unix/getsockname.c             |    2 +-
 otherlibs/win32unix/gettimeofday.c            |    4 +-
 otherlibs/win32unix/link.c                    |    4 +-
 otherlibs/win32unix/listen.c                  |    2 +-
 otherlibs/win32unix/lockf.c                   |    8 +-
 otherlibs/win32unix/lseek.c                   |    4 +-
 otherlibs/win32unix/mkdir.c                   |    2 +-
 otherlibs/win32unix/nonblock.c                |    4 +-
 otherlibs/win32unix/open.c                    |    4 +-
 otherlibs/win32unix/pipe.c                    |    6 +-
 otherlibs/win32unix/read.c                    |    6 +-
 otherlibs/win32unix/rename.c                  |    2 +-
 otherlibs/win32unix/select.c                  |   10 +-
 otherlibs/win32unix/sendrecv.c                |    8 +-
 otherlibs/win32unix/shutdown.c                |    2 +-
 otherlibs/win32unix/sleep.c                   |    4 +-
 otherlibs/win32unix/socket.c                  |    2 +-
 otherlibs/win32unix/socketaddr.h              |    2 +-
 otherlibs/win32unix/sockopt.c                 |    8 +-
 otherlibs/win32unix/startup.c                 |    2 +-
 otherlibs/win32unix/stat.c                    |    6 +-
 otherlibs/win32unix/system.c                  |    8 +-
 otherlibs/win32unix/times.c                   |    4 +-
 otherlibs/win32unix/unixsupport.c             |   12 +-
 otherlibs/win32unix/windir.c                  |    8 +-
 otherlibs/win32unix/winwait.c                 |    8 +-
 otherlibs/win32unix/winworker.c               |    8 +-
 otherlibs/win32unix/write.c                   |    6 +-
 stdlib/.depend                                |  392 ++++--
 stdlib/header.c                               |    4 +-
 stdlib/headernt.c                             |    4 +-
 testsuite/tests/basic-manyargs/manyargsprim.c |    2 +-
 testsuite/tests/callback/callbackprim.c       |    6 +-
 testsuite/tests/gc-roots/globrootsprim.c      |    6 +-
 testsuite/tests/lib-bigarray-2/bigarrfstub.c  |    2 +-
 testsuite/tests/lib-marshal/intextaux.c       |    4 +-
 tools/.depend                                 |   66 +-
 tools/Makefile.shared                         |    4 +-
 tools/objinfo_helper.c                        |    4 +-
 343 files changed, 7390 insertions(+), 6684 deletions(-)
 delete mode 100644 byterun/alloc.h
 delete mode 100644 byterun/backtrace.h
 delete mode 100644 byterun/callback.h
 create mode 100644 byterun/caml/alloc.h
 create mode 100644 byterun/caml/backtrace.h
 create mode 100644 byterun/caml/callback.h
 create mode 100644 byterun/caml/compact.h
 create mode 100644 byterun/caml/compare.h
 create mode 100644 byterun/caml/compatibility.h
 create mode 100644 byterun/caml/config.h
 create mode 100644 byterun/caml/custom.h
 create mode 100644 byterun/caml/debugger.h
 create mode 100644 byterun/caml/dynlink.h
 create mode 100644 byterun/caml/exec.h
 create mode 100644 byterun/caml/fail.h
 create mode 100644 byterun/caml/finalise.h
 create mode 100644 byterun/caml/fix_code.h
 create mode 100644 byterun/caml/freelist.h
 create mode 100644 byterun/caml/gc.h
 create mode 100644 byterun/caml/gc_ctrl.h
 create mode 100644 byterun/caml/globroots.h
 create mode 100644 byterun/caml/hash.h
 create mode 100644 byterun/caml/instrtrace.h
 create mode 100644 byterun/caml/instruct.h
 create mode 100644 byterun/caml/int64_emul.h
 create mode 100644 byterun/caml/int64_format.h
 create mode 100644 byterun/caml/int64_native.h
 create mode 100644 byterun/caml/interp.h
 create mode 100644 byterun/caml/intext.h
 create mode 100644 byterun/caml/io.h
 create mode 100644 byterun/caml/major_gc.h
 create mode 100644 byterun/caml/md5.h
 create mode 100644 byterun/caml/memory.h
 create mode 100644 byterun/caml/minor_gc.h
 create mode 100644 byterun/caml/misc.h
 create mode 100644 byterun/caml/mlvalues.h
 create mode 100644 byterun/caml/osdeps.h
 create mode 100644 byterun/caml/prims.h
 create mode 100644 byterun/caml/printexc.h
 create mode 100644 byterun/caml/reverse.h
 create mode 100644 byterun/caml/roots.h
 create mode 100644 byterun/caml/signals.h
 create mode 100644 byterun/caml/signals_machdep.h
 create mode 100644 byterun/caml/stacks.h
 create mode 100644 byterun/caml/startup.h
 create mode 100644 byterun/caml/sys.h
 create mode 100644 byterun/caml/ui.h
 create mode 100644 byterun/caml/weak.h
 delete mode 100644 byterun/compact.h
 delete mode 100644 byterun/compare.h
 delete mode 100644 byterun/compatibility.h
 delete mode 100644 byterun/config.h
 delete mode 100644 byterun/custom.h
 delete mode 100644 byterun/debugger.h
 delete mode 100644 byterun/dynlink.h
 delete mode 100644 byterun/exec.h
 delete mode 100644 byterun/fail.h
 delete mode 100644 byterun/finalise.h
 delete mode 100644 byterun/fix_code.h
 delete mode 100644 byterun/freelist.h
 delete mode 100644 byterun/gc.h
 delete mode 100644 byterun/gc_ctrl.h
 delete mode 100644 byterun/globroots.h
 delete mode 100644 byterun/hash.h
 delete mode 100644 byterun/instrtrace.h
 delete mode 100644 byterun/instruct.h
 delete mode 100644 byterun/int64_emul.h
 delete mode 100644 byterun/int64_format.h
 delete mode 100644 byterun/int64_native.h
 delete mode 100644 byterun/interp.h
 delete mode 100644 byterun/intext.h
 delete mode 100644 byterun/io.h
 delete mode 100644 byterun/major_gc.h
 delete mode 100644 byterun/md5.h
 delete mode 100644 byterun/memory.h
 delete mode 100644 byterun/minor_gc.h
 delete mode 100644 byterun/misc.h
 delete mode 100644 byterun/mlvalues.h
 delete mode 100644 byterun/osdeps.h
 delete mode 100644 byterun/prims.h
 delete mode 100644 byterun/printexc.h
 delete mode 100644 byterun/reverse.h
 delete mode 100644 byterun/roots.h
 delete mode 100644 byterun/signals.h
 delete mode 100644 byterun/signals_machdep.h
 delete mode 100644 byterun/stacks.h
 delete mode 100644 byterun/startup.h
 delete mode 100644 byterun/sys.h
 delete mode 100644 byterun/ui.h
 delete mode 100644 byterun/weak.h

diff --git a/.depend b/.depend
index cc07e38..e5e25eb 100644
--- a/.depend
+++ b/.depend
@@ -240,16 +240,14 @@ typing/primitive.cmo : utils/misc.cmi typing/primitive.cmi
 typing/primitive.cmx : utils/misc.cmx typing/primitive.cmi
 typing/printtyp.cmo : typing/types.cmi utils/tbl.cmi typing/primitive.cmi \
     typing/predef.cmi typing/path.cmi typing/outcometree.cmi \
-    typing/oprint.cmi utils/misc.cmi parsing/longident.cmi \
-    parsing/location.cmi typing/ident.cmi typing/env.cmi typing/ctype.cmi \
-    utils/clflags.cmi typing/btype.cmi parsing/asttypes.cmi \
-    typing/printtyp.cmi
+    typing/oprint.cmi utils/misc.cmi parsing/longident.cmi typing/ident.cmi \
+    typing/env.cmi typing/ctype.cmi utils/clflags.cmi typing/btype.cmi \
+    parsing/asttypes.cmi typing/printtyp.cmi
 typing/printtyp.cmx : typing/types.cmx utils/tbl.cmx typing/primitive.cmx \
     typing/predef.cmx typing/path.cmx typing/outcometree.cmi \
-    typing/oprint.cmx utils/misc.cmx parsing/longident.cmx \
-    parsing/location.cmx typing/ident.cmx typing/env.cmx typing/ctype.cmx \
-    utils/clflags.cmx typing/btype.cmx parsing/asttypes.cmi \
-    typing/printtyp.cmi
+    typing/oprint.cmx utils/misc.cmx parsing/longident.cmx typing/ident.cmx \
+    typing/env.cmx typing/ctype.cmx utils/clflags.cmx typing/btype.cmx \
+    parsing/asttypes.cmi typing/printtyp.cmi
 typing/printtyped.cmo : typing/typedtree.cmi typing/path.cmi \
     parsing/longident.cmi parsing/location.cmi typing/ident.cmi \
     parsing/asttypes.cmi typing/printtyped.cmi
diff --git a/Makefile b/Makefile
index 8e1bb93..4bbde62 100644
--- a/Makefile
+++ b/Makefile
@@ -181,7 +181,7 @@ coldstart:
 	if test -f boot/libcamlrun.a; then :; else \
 	  ln -s ../byterun/libcamlrun.a boot/libcamlrun.a; fi
 	if test -d stdlib/caml; then :; else \
-	  ln -s ../byterun stdlib/caml; fi
+	  ln -s ../byterun/caml stdlib/caml; fi
 
 # Build the core system: the minimum needed to make depend and bootstrap
 core: coldstart ocamlc ocamllex ocamlyacc ocamltools library
@@ -493,8 +493,8 @@ $(COMMON:.cmo=.cmx) $(BYTECOMP:.cmo=.cmx) $(ASMCOMP:.cmo=.cmx): ocamlopt
 
 # The numeric opcodes
 
-bytecomp/opcodes.ml: byterun/instruct.h
-	sed -n -e '/^enum/p' -e 's/,//g' -e '/^  /p' byterun/instruct.h | \
+bytecomp/opcodes.ml: byterun/caml/instruct.h
+	sed -n -e '/^enum/p' -e 's/,//g' -e '/^  /p' byterun/caml/instruct.h | \
 	awk -f tools/make-opcodes > bytecomp/opcodes.ml
 
 partialclean::
@@ -507,9 +507,9 @@ beforedepend:: bytecomp/opcodes.ml
 byterun/primitives:
 	cd byterun; $(MAKE) primitives
 
-bytecomp/runtimedef.ml: byterun/primitives byterun/fail.h
+bytecomp/runtimedef.ml: byterun/primitives byterun/caml/fail.h
 	(echo 'let builtin_exceptions = [|'; \
-	 sed -n -e 's|.*/\* \("[A-Za-z_]*"\) \*/$$|  \1;|p' byterun/fail.h | \
+	 sed -n -e 's|.*/\* \("[A-Za-z_]*"\) \*/$$|  \1;|p' byterun/caml/fail.h | \
 	 sed -e '$$s/;$$//'; \
 	 echo '|]'; \
 	 echo 'let builtin_primitives = [|'; \
diff --git a/Makefile.nt b/Makefile.nt
index 11eff3c..9017d8c 100644
--- a/Makefile.nt
+++ b/Makefile.nt
@@ -431,8 +431,8 @@ $(COMMON:.cmo=.cmx) $(BYTECOMP:.cmo=.cmx) $(ASMCOMP:.cmo=.cmx): ocamlopt
 
 # The numeric opcodes
 
-bytecomp/opcodes.ml: byterun/instruct.h
-	sed -n -e "/^enum/p" -e "s|,||g" -e "/^  /p" byterun/instruct.h | \
+bytecomp/opcodes.ml: byterun/caml/instruct.h
+	sed -n -e "/^enum/p" -e "s|,||g" -e "/^  /p" byterun/caml/instruct.h | \
 	gawk -f tools/make-opcodes > bytecomp/opcodes.ml
 
 partialclean::
@@ -445,9 +445,9 @@ beforedepend:: bytecomp/opcodes.ml
 byterun/primitives:
 	cd byterun ; $(MAKEREC) primitives
 
-bytecomp/runtimedef.ml: byterun/primitives byterun/fail.h
+bytecomp/runtimedef.ml: byterun/primitives byterun/caml/fail.h
 	(echo 'let builtin_exceptions = [|'; \
-	 sed -n -e 's|.*/\* \("[A-Za-z_]*"\) \*/$$|  \1;|p' byterun/fail.h | \
+	 sed -n -e 's|.*/\* \("[A-Za-z_]*"\) \*/$$|  \1;|p' byterun/caml/fail.h | \
 	 sed -e '$$s/;$$//'; \
 	 echo '|]'; \
 	 echo 'let builtin_primitives = [|'; \
diff --git a/asmrun/.depend b/asmrun/.depend
index bae78b4..5b391ba 100644
--- a/asmrun/.depend
+++ b/asmrun/.depend
@@ -1,750 +1,993 @@
-alloc.o: alloc.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/custom.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/stacks.h \
-  ../byterun/memory.h
-array.o: array.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h
-backtrace.o: backtrace.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/backtrace.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/mlvalues.h stack.h
-callback.o: callback.c ../byterun/callback.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/mlvalues.h
-compact.o: compact.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/finalise.h ../byterun/roots.h \
-  ../byterun/misc.h ../byterun/config.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/mlvalues.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/freelist.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/major_gc.h \
-  ../byterun/memory.h ../byterun/mlvalues.h ../byterun/roots.h \
-  ../byterun/weak.h
-compare.o: compare.c ../byterun/custom.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h
-custom.o: custom.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/custom.h ../byterun/fail.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/mlvalues.h
-debugger.o: debugger.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/config.h ../byterun/debugger.h \
-  ../byterun/misc.h
-dynlink.o: dynlink.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/dynlink.h \
-  ../byterun/fail.h ../byterun/mlvalues.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/osdeps.h \
-  ../byterun/prims.h
-extern.o: extern.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/custom.h ../byterun/fail.h \
-  ../byterun/gc.h ../byterun/intext.h ../byterun/io.h ../byterun/io.h \
-  ../byterun/md5.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/reverse.h
-fail.o: fail.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/io.h ../byterun/gc.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/printexc.h \
-  ../byterun/signals.h stack.h ../byterun/roots.h ../byterun/memory.h
-finalise.o: finalise.c ../byterun/callback.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/fail.h ../byterun/mlvalues.h \
-  ../byterun/roots.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/signals.h
-floats.o: floats.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/fail.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/misc.h \
-  ../byterun/reverse.h ../byterun/stacks.h ../byterun/memory.h
-freelist.o: freelist.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/freelist.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/gc.h \
-  ../byterun/gc_ctrl.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/major_gc.h ../byterun/misc.h ../byterun/mlvalues.h
-gc_ctrl.o: gc_ctrl.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/compact.h ../byterun/custom.h \
-  ../byterun/finalise.h ../byterun/roots.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/freelist.h ../byterun/gc.h \
-  ../byterun/gc_ctrl.h ../byterun/major_gc.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h stack.h
-globroots.o: globroots.c ../byterun/memory.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/misc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h ../byterun/roots.h ../byterun/memory.h \
-  ../byterun/globroots.h ../byterun/roots.h
-hash.o: hash.c ../byterun/mlvalues.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/misc.h \
-  ../byterun/custom.h ../byterun/mlvalues.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/hash.h ../byterun/int64_native.h
-intern.o: intern.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/callback.h ../byterun/custom.h \
-  ../byterun/fail.h ../byterun/gc.h ../byterun/intext.h ../byterun/io.h \
-  ../byterun/io.h ../byterun/md5.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/mlvalues.h ../byterun/misc.h ../byterun/reverse.h
-ints.o: ints.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/custom.h ../byterun/fail.h ../byterun/intext.h \
-  ../byterun/io.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/int64_native.h
-io.o: io.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/custom.h \
-  ../byterun/fail.h ../byterun/io.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/signals.h \
-  ../byterun/sys.h
-lexing.o: lexing.c ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/mlvalues.h ../byterun/stacks.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h
-main.o: main.c ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/misc.h ../byterun/sys.h
-major_gc.o: major_gc.c ../byterun/compact.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/misc.h \
-  ../byterun/custom.h ../byterun/mlvalues.h ../byterun/config.h \
-  ../byterun/fail.h ../byterun/finalise.h ../byterun/roots.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/freelist.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/major_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/roots.h \
-  ../byterun/weak.h
-md5.o: md5.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/md5.h ../byterun/io.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/io.h \
-  ../byterun/reverse.h
-memory.o: memory.c ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/freelist.h ../byterun/gc.h \
-  ../byterun/gc_ctrl.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/minor_gc.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h ../byterun/signals.h
-meta.o: meta.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/fail.h ../byterun/fix_code.h \
-  ../byterun/interp.h ../byterun/intext.h ../byterun/io.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/minor_gc.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/mlvalues.h \
-  ../byterun/prims.h ../byterun/stacks.h ../byterun/memory.h
-minor_gc.o: minor_gc.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/finalise.h \
-  ../byterun/roots.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/major_gc.h \
-  ../byterun/memory.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h ../byterun/roots.h ../byterun/signals.h \
-  ../byterun/weak.h
-misc.o: misc.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/mlvalues.h \
-  ../byterun/misc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h
-natdynlink.o: natdynlink.c ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/misc.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h stack.h ../byterun/callback.h ../byterun/alloc.h \
-  ../byterun/intext.h ../byterun/io.h ../byterun/osdeps.h \
-  ../byterun/fail.h
-obj.o: obj.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/gc.h ../byterun/interp.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/minor_gc.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/mlvalues.h \
-  ../byterun/prims.h
-parsing.o: parsing.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/mlvalues.h ../byterun/config.h \
-  ../byterun/misc.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/alloc.h
-printexc.o: printexc.c ../byterun/backtrace.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/callback.h ../byterun/debugger.h \
-  ../byterun/fail.h ../byterun/misc.h ../byterun/mlvalues.h \
-  ../byterun/printexc.h
-roots.o: roots.c ../byterun/finalise.h ../byterun/roots.h \
-  ../byterun/misc.h ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/globroots.h ../byterun/memory.h \
-  ../byterun/major_gc.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h stack.h ../byterun/roots.h
-signals.o: signals.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/callback.h ../byterun/config.h \
-  ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/roots.h \
-  ../byterun/memory.h ../byterun/signals.h ../byterun/signals_machdep.h \
-  ../byterun/sys.h
-signals_asm.o: signals_asm.c ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/osdeps.h ../byterun/signals.h ../byterun/signals_machdep.h \
-  signals_osdep.h stack.h
-startup.o: startup.c ../byterun/callback.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/backtrace.h ../byterun/custom.h \
-  ../byterun/debugger.h ../byterun/fail.h ../byterun/freelist.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/intext.h \
-  ../byterun/io.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/osdeps.h \
-  ../byterun/printexc.h stack.h ../byterun/sys.h
-str.o: str.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/mlvalues.h ../byterun/misc.h
-sys.o: sys.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/debugger.h \
-  ../byterun/fail.h ../byterun/instruct.h ../byterun/mlvalues.h \
-  ../byterun/osdeps.h ../byterun/signals.h ../byterun/stacks.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/sys.h
-terminfo.o: terminfo.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/fail.h \
-  ../byterun/io.h ../byterun/mlvalues.h
-unix.o: unix.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/memory.h ../byterun/config.h \
-  ../byterun/gc.h ../byterun/mlvalues.h ../byterun/misc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/osdeps.h
-weak.o: weak.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h
-alloc.d.o: alloc.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/custom.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/stacks.h \
-  ../byterun/memory.h
-array.d.o: array.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h
-backtrace.d.o: backtrace.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/backtrace.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/mlvalues.h stack.h
-callback.d.o: callback.c ../byterun/callback.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/mlvalues.h
-compact.d.o: compact.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/finalise.h ../byterun/roots.h \
-  ../byterun/misc.h ../byterun/config.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/mlvalues.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/freelist.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/major_gc.h \
-  ../byterun/memory.h ../byterun/mlvalues.h ../byterun/roots.h \
-  ../byterun/weak.h
-compare.d.o: compare.c ../byterun/custom.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h
-custom.d.o: custom.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/custom.h ../byterun/fail.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/mlvalues.h
-debugger.d.o: debugger.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/config.h ../byterun/debugger.h \
-  ../byterun/misc.h
-dynlink.d.o: dynlink.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/dynlink.h \
-  ../byterun/fail.h ../byterun/mlvalues.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/osdeps.h \
-  ../byterun/prims.h
-extern.d.o: extern.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/custom.h ../byterun/fail.h \
-  ../byterun/gc.h ../byterun/intext.h ../byterun/io.h ../byterun/io.h \
-  ../byterun/md5.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/reverse.h
-fail.d.o: fail.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/io.h ../byterun/gc.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/printexc.h \
-  ../byterun/signals.h stack.h ../byterun/roots.h ../byterun/memory.h
-finalise.d.o: finalise.c ../byterun/callback.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/fail.h ../byterun/mlvalues.h \
-  ../byterun/roots.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/signals.h
-floats.d.o: floats.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/fail.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/misc.h \
-  ../byterun/reverse.h ../byterun/stacks.h ../byterun/memory.h
-freelist.d.o: freelist.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/freelist.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/gc.h \
-  ../byterun/gc_ctrl.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/major_gc.h ../byterun/misc.h ../byterun/mlvalues.h
-gc_ctrl.d.o: gc_ctrl.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/compact.h ../byterun/custom.h \
-  ../byterun/finalise.h ../byterun/roots.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/freelist.h ../byterun/gc.h \
-  ../byterun/gc_ctrl.h ../byterun/major_gc.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h stack.h
-globroots.d.o: globroots.c ../byterun/memory.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/misc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h ../byterun/roots.h ../byterun/memory.h \
-  ../byterun/globroots.h ../byterun/roots.h
-hash.d.o: hash.c ../byterun/mlvalues.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/misc.h \
-  ../byterun/custom.h ../byterun/mlvalues.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/hash.h ../byterun/int64_native.h
-intern.d.o: intern.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/callback.h ../byterun/custom.h \
-  ../byterun/fail.h ../byterun/gc.h ../byterun/intext.h ../byterun/io.h \
-  ../byterun/io.h ../byterun/md5.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/mlvalues.h ../byterun/misc.h ../byterun/reverse.h
-ints.d.o: ints.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/custom.h ../byterun/fail.h ../byterun/intext.h \
-  ../byterun/io.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/int64_native.h
-io.d.o: io.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/custom.h \
-  ../byterun/fail.h ../byterun/io.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/signals.h \
-  ../byterun/sys.h
-lexing.d.o: lexing.c ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/mlvalues.h ../byterun/stacks.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h
-main.d.o: main.c ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/misc.h ../byterun/sys.h
-major_gc.d.o: major_gc.c ../byterun/compact.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/misc.h \
-  ../byterun/custom.h ../byterun/mlvalues.h ../byterun/config.h \
-  ../byterun/fail.h ../byterun/finalise.h ../byterun/roots.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/freelist.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/major_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/roots.h \
-  ../byterun/weak.h
-md5.d.o: md5.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/md5.h ../byterun/io.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/io.h \
-  ../byterun/reverse.h
-memory.d.o: memory.c ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/freelist.h ../byterun/gc.h \
-  ../byterun/gc_ctrl.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/minor_gc.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h ../byterun/signals.h
-meta.d.o: meta.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/fail.h ../byterun/fix_code.h \
-  ../byterun/interp.h ../byterun/intext.h ../byterun/io.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/minor_gc.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/mlvalues.h \
-  ../byterun/prims.h ../byterun/stacks.h ../byterun/memory.h
-minor_gc.d.o: minor_gc.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/finalise.h \
-  ../byterun/roots.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/major_gc.h \
-  ../byterun/memory.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h ../byterun/roots.h ../byterun/signals.h \
-  ../byterun/weak.h
-misc.d.o: misc.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/mlvalues.h \
-  ../byterun/misc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h
-natdynlink.d.o: natdynlink.c ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/misc.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h stack.h ../byterun/callback.h ../byterun/alloc.h \
-  ../byterun/intext.h ../byterun/io.h ../byterun/osdeps.h \
-  ../byterun/fail.h
-obj.d.o: obj.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/gc.h ../byterun/interp.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/minor_gc.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/mlvalues.h \
-  ../byterun/prims.h
-parsing.d.o: parsing.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/mlvalues.h ../byterun/config.h \
-  ../byterun/misc.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/alloc.h
-printexc.d.o: printexc.c ../byterun/backtrace.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/callback.h ../byterun/debugger.h \
-  ../byterun/fail.h ../byterun/misc.h ../byterun/mlvalues.h \
-  ../byterun/printexc.h
-roots.d.o: roots.c ../byterun/finalise.h ../byterun/roots.h \
-  ../byterun/misc.h ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/globroots.h ../byterun/memory.h \
-  ../byterun/major_gc.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h stack.h ../byterun/roots.h
-signals.d.o: signals.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/callback.h ../byterun/config.h \
-  ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/roots.h \
-  ../byterun/memory.h ../byterun/signals.h ../byterun/signals_machdep.h \
-  ../byterun/sys.h
-signals_asm.d.o: signals_asm.c ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/osdeps.h ../byterun/signals.h ../byterun/signals_machdep.h \
-  signals_osdep.h stack.h
-startup.d.o: startup.c ../byterun/callback.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/backtrace.h ../byterun/custom.h \
-  ../byterun/debugger.h ../byterun/fail.h ../byterun/freelist.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/intext.h \
-  ../byterun/io.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/osdeps.h \
-  ../byterun/printexc.h stack.h ../byterun/sys.h
-str.d.o: str.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/mlvalues.h ../byterun/misc.h
-sys.d.o: sys.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/debugger.h \
-  ../byterun/fail.h ../byterun/instruct.h ../byterun/mlvalues.h \
-  ../byterun/osdeps.h ../byterun/signals.h ../byterun/stacks.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/sys.h
-terminfo.d.o: terminfo.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/fail.h \
-  ../byterun/io.h ../byterun/mlvalues.h
-unix.d.o: unix.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/memory.h ../byterun/config.h \
-  ../byterun/gc.h ../byterun/mlvalues.h ../byterun/misc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/osdeps.h
-weak.d.o: weak.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h
-alloc.p.o: alloc.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/custom.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/stacks.h \
-  ../byterun/memory.h
-array.p.o: array.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h
-backtrace.p.o: backtrace.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/backtrace.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/mlvalues.h stack.h
-callback.p.o: callback.c ../byterun/callback.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/mlvalues.h
-compact.p.o: compact.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/finalise.h ../byterun/roots.h \
-  ../byterun/misc.h ../byterun/config.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/mlvalues.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/freelist.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/major_gc.h \
-  ../byterun/memory.h ../byterun/mlvalues.h ../byterun/roots.h \
-  ../byterun/weak.h
-compare.p.o: compare.c ../byterun/custom.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h
-custom.p.o: custom.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/custom.h ../byterun/fail.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/mlvalues.h
-debugger.p.o: debugger.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/config.h ../byterun/debugger.h \
-  ../byterun/misc.h
-dynlink.p.o: dynlink.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/dynlink.h \
-  ../byterun/fail.h ../byterun/mlvalues.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/osdeps.h \
-  ../byterun/prims.h
-extern.p.o: extern.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/custom.h ../byterun/fail.h \
-  ../byterun/gc.h ../byterun/intext.h ../byterun/io.h ../byterun/io.h \
-  ../byterun/md5.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/reverse.h
-fail.p.o: fail.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/io.h ../byterun/gc.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/printexc.h \
-  ../byterun/signals.h stack.h ../byterun/roots.h ../byterun/memory.h
-finalise.p.o: finalise.c ../byterun/callback.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/fail.h ../byterun/mlvalues.h \
-  ../byterun/roots.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/signals.h
-floats.p.o: floats.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/fail.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/misc.h \
-  ../byterun/reverse.h ../byterun/stacks.h ../byterun/memory.h
-freelist.p.o: freelist.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/freelist.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/gc.h \
-  ../byterun/gc_ctrl.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/major_gc.h ../byterun/misc.h ../byterun/mlvalues.h
-gc_ctrl.p.o: gc_ctrl.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/compact.h ../byterun/custom.h \
-  ../byterun/finalise.h ../byterun/roots.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/freelist.h ../byterun/gc.h \
-  ../byterun/gc_ctrl.h ../byterun/major_gc.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h stack.h
-globroots.p.o: globroots.c ../byterun/memory.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/misc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h ../byterun/roots.h ../byterun/memory.h \
-  ../byterun/globroots.h ../byterun/roots.h
-hash.p.o: hash.c ../byterun/mlvalues.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/misc.h \
-  ../byterun/custom.h ../byterun/mlvalues.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/hash.h ../byterun/int64_native.h
-intern.p.o: intern.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/callback.h ../byterun/custom.h \
-  ../byterun/fail.h ../byterun/gc.h ../byterun/intext.h ../byterun/io.h \
-  ../byterun/io.h ../byterun/md5.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/mlvalues.h ../byterun/misc.h ../byterun/reverse.h
-ints.p.o: ints.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/custom.h ../byterun/fail.h ../byterun/intext.h \
-  ../byterun/io.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/int64_native.h
-io.p.o: io.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/custom.h \
-  ../byterun/fail.h ../byterun/io.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/signals.h \
-  ../byterun/sys.h
-lexing.p.o: lexing.c ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/mlvalues.h ../byterun/stacks.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h
-main.p.o: main.c ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/misc.h ../byterun/sys.h
-major_gc.p.o: major_gc.c ../byterun/compact.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/misc.h \
-  ../byterun/custom.h ../byterun/mlvalues.h ../byterun/config.h \
-  ../byterun/fail.h ../byterun/finalise.h ../byterun/roots.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/freelist.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/major_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/roots.h \
-  ../byterun/weak.h
-md5.p.o: md5.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/md5.h ../byterun/io.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h ../byterun/io.h \
-  ../byterun/reverse.h
-memory.p.o: memory.c ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/freelist.h ../byterun/gc.h \
-  ../byterun/gc_ctrl.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/minor_gc.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h ../byterun/signals.h
-meta.p.o: meta.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/fail.h ../byterun/fix_code.h \
-  ../byterun/interp.h ../byterun/intext.h ../byterun/io.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/minor_gc.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/mlvalues.h \
-  ../byterun/prims.h ../byterun/stacks.h ../byterun/memory.h
-minor_gc.p.o: minor_gc.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/finalise.h \
-  ../byterun/roots.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/major_gc.h \
-  ../byterun/memory.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h ../byterun/roots.h ../byterun/signals.h \
-  ../byterun/weak.h
-misc.p.o: misc.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/mlvalues.h \
-  ../byterun/misc.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h
-natdynlink.p.o: natdynlink.c ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/misc.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h stack.h ../byterun/callback.h ../byterun/alloc.h \
-  ../byterun/intext.h ../byterun/io.h ../byterun/osdeps.h \
-  ../byterun/fail.h
-obj.p.o: obj.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/gc.h ../byterun/interp.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/memory.h \
-  ../byterun/gc.h ../byterun/major_gc.h ../byterun/minor_gc.h \
-  ../byterun/minor_gc.h ../byterun/misc.h ../byterun/mlvalues.h \
-  ../byterun/prims.h
-parsing.p.o: parsing.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/mlvalues.h ../byterun/config.h \
-  ../byterun/misc.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/alloc.h
-printexc.p.o: printexc.c ../byterun/backtrace.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/callback.h ../byterun/debugger.h \
-  ../byterun/fail.h ../byterun/misc.h ../byterun/mlvalues.h \
-  ../byterun/printexc.h
-roots.p.o: roots.c ../byterun/finalise.h ../byterun/roots.h \
-  ../byterun/misc.h ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/mlvalues.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/minor_gc.h ../byterun/globroots.h ../byterun/memory.h \
-  ../byterun/major_gc.h ../byterun/minor_gc.h ../byterun/misc.h \
-  ../byterun/mlvalues.h stack.h ../byterun/roots.h
-signals.p.o: signals.c ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/callback.h ../byterun/config.h \
-  ../byterun/fail.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/roots.h \
-  ../byterun/memory.h ../byterun/signals.h ../byterun/signals_machdep.h \
-  ../byterun/sys.h
-signals_asm.p.o: signals_asm.c ../byterun/fail.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/mlvalues.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/osdeps.h ../byterun/signals.h ../byterun/signals_machdep.h \
-  signals_osdep.h stack.h
-startup.p.o: startup.c ../byterun/callback.h ../byterun/mlvalues.h \
-  ../byterun/config.h ../byterun/../config/m.h ../byterun/../config/s.h \
-  ../byterun/misc.h ../byterun/backtrace.h ../byterun/custom.h \
-  ../byterun/debugger.h ../byterun/fail.h ../byterun/freelist.h \
-  ../byterun/gc.h ../byterun/gc_ctrl.h ../byterun/intext.h \
-  ../byterun/io.h ../byterun/memory.h ../byterun/gc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/mlvalues.h ../byterun/osdeps.h \
-  ../byterun/printexc.h stack.h ../byterun/sys.h
-str.p.o: str.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/mlvalues.h ../byterun/misc.h
-sys.p.o: sys.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/debugger.h \
-  ../byterun/fail.h ../byterun/instruct.h ../byterun/mlvalues.h \
-  ../byterun/osdeps.h ../byterun/signals.h ../byterun/stacks.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/freelist.h ../byterun/minor_gc.h ../byterun/sys.h
-terminfo.p.o: terminfo.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/alloc.h ../byterun/misc.h \
-  ../byterun/config.h ../byterun/mlvalues.h ../byterun/fail.h \
-  ../byterun/io.h ../byterun/mlvalues.h
-unix.p.o: unix.c ../byterun/config.h ../byterun/../config/m.h \
-  ../byterun/../config/s.h ../byterun/memory.h ../byterun/config.h \
-  ../byterun/gc.h ../byterun/mlvalues.h ../byterun/misc.h \
-  ../byterun/major_gc.h ../byterun/freelist.h ../byterun/minor_gc.h \
-  ../byterun/misc.h ../byterun/osdeps.h
-weak.p.o: weak.c ../byterun/alloc.h ../byterun/misc.h ../byterun/config.h \
-  ../byterun/../config/m.h ../byterun/../config/s.h ../byterun/mlvalues.h \
-  ../byterun/fail.h ../byterun/major_gc.h ../byterun/freelist.h \
-  ../byterun/memory.h ../byterun/gc.h ../byterun/major_gc.h \
-  ../byterun/minor_gc.h ../byterun/mlvalues.h
+alloc.o: alloc.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/stacks.h \
+ ../byterun/caml/memory.h
+array.o: array.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h
+backtrace.o: backtrace.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/backtrace.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h stack.h
+callback.o: callback.c ../byterun/caml/callback.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/fail.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h
+compact.o: compact.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/finalise.h ../byterun/caml/roots.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/gc.h ../byterun/caml/gc_ctrl.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/memory.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/weak.h
+compare.o: compare.c ../byterun/caml/custom.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/misc.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h
+custom.o: custom.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/fail.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h
+debugger.o: debugger.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/config.h ../byterun/caml/debugger.h \
+ ../byterun/caml/misc.h
+dynlink.o: dynlink.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/alloc.h ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/dynlink.h \
+ ../byterun/caml/fail.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/osdeps.h ../byterun/caml/prims.h
+extern.o: extern.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/fail.h ../byterun/caml/gc.h \
+ ../byterun/caml/intext.h ../byterun/caml/io.h ../byterun/caml/io.h \
+ ../byterun/caml/md5.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/reverse.h
+fail.o: fail.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/io.h ../byterun/caml/gc.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/printexc.h \
+ ../byterun/caml/signals.h stack.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h
+finalise.o: finalise.c ../byterun/caml/callback.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/fail.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/roots.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/signals.h
+floats.o: floats.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/misc.h ../byterun/caml/reverse.h \
+ ../byterun/caml/stacks.h ../byterun/caml/memory.h
+freelist.o: freelist.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/freelist.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/mlvalues.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h
+gc_ctrl.o: gc_ctrl.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/compact.h ../byterun/caml/custom.h \
+ ../byterun/caml/finalise.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h stack.h
+globroots.o: globroots.c ../byterun/caml/memory.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h ../byterun/caml/globroots.h \
+ ../byterun/caml/roots.h
+hash.o: hash.c ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/custom.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/hash.h \
+ ../byterun/caml/int64_native.h
+intern.o: intern.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/callback.h ../byterun/caml/custom.h \
+ ../byterun/caml/fail.h ../byterun/caml/gc.h ../byterun/caml/intext.h \
+ ../byterun/caml/io.h ../byterun/caml/io.h ../byterun/caml/md5.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/reverse.h
+ints.o: ints.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/fail.h ../byterun/caml/intext.h \
+ ../byterun/caml/io.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/int64_native.h
+io.o: io.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/alloc.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/custom.h \
+ ../byterun/caml/fail.h ../byterun/caml/io.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/signals.h ../byterun/caml/sys.h
+lexing.o: lexing.c ../byterun/caml/fail.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/stacks.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h
+main.o: main.c ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h ../byterun/caml/sys.h
+major_gc.o: major_gc.c ../byterun/caml/compact.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/custom.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/fail.h ../byterun/caml/finalise.h \
+ ../byterun/caml/roots.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/gc.h ../byterun/caml/gc_ctrl.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/weak.h
+md5.o: md5.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/md5.h ../byterun/caml/io.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/io.h \
+ ../byterun/caml/reverse.h
+memory.o: memory.c ../byterun/caml/fail.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/freelist.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/signals.h
+meta.o: meta.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/config.h ../byterun/caml/fail.h \
+ ../byterun/caml/fix_code.h ../byterun/caml/interp.h \
+ ../byterun/caml/intext.h ../byterun/caml/io.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/prims.h \
+ ../byterun/caml/stacks.h ../byterun/caml/memory.h
+minor_gc.o: minor_gc.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/fail.h ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/finalise.h \
+ ../byterun/caml/roots.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/memory.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/roots.h ../byterun/caml/signals.h ../byterun/caml/weak.h
+misc.o: misc.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h
+natdynlink.o: natdynlink.c ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/misc.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h stack.h \
+ ../byterun/caml/callback.h ../byterun/caml/alloc.h \
+ ../byterun/caml/intext.h ../byterun/caml/io.h ../byterun/caml/osdeps.h \
+ ../byterun/caml/fail.h
+obj.o: obj.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/gc.h ../byterun/caml/interp.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/prims.h
+parsing.o: parsing.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/misc.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/alloc.h
+printexc.o: printexc.c ../byterun/caml/backtrace.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/callback.h \
+ ../byterun/caml/debugger.h ../byterun/caml/fail.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/printexc.h
+roots.o: roots.c ../byterun/caml/finalise.h ../byterun/caml/roots.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/globroots.h \
+ ../byterun/caml/memory.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h stack.h ../byterun/caml/roots.h
+signals.o: signals.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/callback.h ../byterun/caml/config.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h ../byterun/caml/signals.h \
+ ../byterun/caml/signals_machdep.h ../byterun/caml/sys.h
+signals_asm.o: signals_asm.c ../byterun/caml/fail.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/osdeps.h \
+ ../byterun/caml/signals.h ../byterun/caml/signals_machdep.h \
+ signals_osdep.h stack.h
+startup.o: startup.c ../byterun/caml/callback.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/backtrace.h \
+ ../byterun/caml/custom.h ../byterun/caml/debugger.h \
+ ../byterun/caml/fail.h ../byterun/caml/freelist.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/intext.h ../byterun/caml/io.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/osdeps.h ../byterun/caml/printexc.h stack.h \
+ ../byterun/caml/sys.h
+str.o: str.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/int64_native.h
+sys.o: sys.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/alloc.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/debugger.h \
+ ../byterun/caml/fail.h ../byterun/caml/instruct.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/osdeps.h \
+ ../byterun/caml/signals.h ../byterun/caml/stacks.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/sys.h
+terminfo.o: terminfo.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/alloc.h ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/fail.h ../byterun/caml/io.h \
+ ../byterun/caml/mlvalues.h
+unix.o: unix.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/memory.h \
+ ../byterun/caml/config.h ../byterun/caml/gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/misc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/osdeps.h
+weak.o: weak.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h
+alloc.d.o: alloc.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/stacks.h \
+ ../byterun/caml/memory.h
+array.d.o: array.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h
+backtrace.d.o: backtrace.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/backtrace.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h stack.h
+callback.d.o: callback.c ../byterun/caml/callback.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/fail.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h
+compact.d.o: compact.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/finalise.h ../byterun/caml/roots.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/gc.h ../byterun/caml/gc_ctrl.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/memory.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/weak.h
+compare.d.o: compare.c ../byterun/caml/custom.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/misc.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h
+custom.d.o: custom.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/fail.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h
+debugger.d.o: debugger.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/config.h ../byterun/caml/debugger.h \
+ ../byterun/caml/misc.h
+dynlink.d.o: dynlink.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/alloc.h ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/dynlink.h \
+ ../byterun/caml/fail.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/osdeps.h ../byterun/caml/prims.h
+extern.d.o: extern.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/fail.h ../byterun/caml/gc.h \
+ ../byterun/caml/intext.h ../byterun/caml/io.h ../byterun/caml/io.h \
+ ../byterun/caml/md5.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/reverse.h
+fail.d.o: fail.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/io.h ../byterun/caml/gc.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/printexc.h \
+ ../byterun/caml/signals.h stack.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h
+finalise.d.o: finalise.c ../byterun/caml/callback.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/fail.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/roots.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/signals.h
+floats.d.o: floats.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/misc.h ../byterun/caml/reverse.h \
+ ../byterun/caml/stacks.h ../byterun/caml/memory.h
+freelist.d.o: freelist.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/freelist.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/mlvalues.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h
+gc_ctrl.d.o: gc_ctrl.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/compact.h ../byterun/caml/custom.h \
+ ../byterun/caml/finalise.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h stack.h
+globroots.d.o: globroots.c ../byterun/caml/memory.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h ../byterun/caml/globroots.h \
+ ../byterun/caml/roots.h
+hash.d.o: hash.c ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/custom.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/hash.h \
+ ../byterun/caml/int64_native.h
+intern.d.o: intern.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/callback.h ../byterun/caml/custom.h \
+ ../byterun/caml/fail.h ../byterun/caml/gc.h ../byterun/caml/intext.h \
+ ../byterun/caml/io.h ../byterun/caml/io.h ../byterun/caml/md5.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/reverse.h
+ints.d.o: ints.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/fail.h ../byterun/caml/intext.h \
+ ../byterun/caml/io.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/int64_native.h
+io.d.o: io.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/alloc.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/custom.h \
+ ../byterun/caml/fail.h ../byterun/caml/io.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/signals.h ../byterun/caml/sys.h
+lexing.d.o: lexing.c ../byterun/caml/fail.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/stacks.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h
+main.d.o: main.c ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h ../byterun/caml/sys.h
+major_gc.d.o: major_gc.c ../byterun/caml/compact.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/custom.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/fail.h ../byterun/caml/finalise.h \
+ ../byterun/caml/roots.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/gc.h ../byterun/caml/gc_ctrl.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/weak.h
+md5.d.o: md5.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/md5.h ../byterun/caml/io.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/io.h \
+ ../byterun/caml/reverse.h
+memory.d.o: memory.c ../byterun/caml/fail.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/freelist.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/signals.h
+meta.d.o: meta.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/config.h ../byterun/caml/fail.h \
+ ../byterun/caml/fix_code.h ../byterun/caml/interp.h \
+ ../byterun/caml/intext.h ../byterun/caml/io.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/prims.h \
+ ../byterun/caml/stacks.h ../byterun/caml/memory.h
+minor_gc.d.o: minor_gc.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/fail.h ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/finalise.h \
+ ../byterun/caml/roots.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/memory.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/roots.h ../byterun/caml/signals.h ../byterun/caml/weak.h
+misc.d.o: misc.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h
+natdynlink.d.o: natdynlink.c ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/misc.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h stack.h \
+ ../byterun/caml/callback.h ../byterun/caml/alloc.h \
+ ../byterun/caml/intext.h ../byterun/caml/io.h ../byterun/caml/osdeps.h \
+ ../byterun/caml/fail.h
+obj.d.o: obj.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/gc.h ../byterun/caml/interp.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/prims.h
+parsing.d.o: parsing.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/misc.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/alloc.h
+printexc.d.o: printexc.c ../byterun/caml/backtrace.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/callback.h \
+ ../byterun/caml/debugger.h ../byterun/caml/fail.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/printexc.h
+roots.d.o: roots.c ../byterun/caml/finalise.h ../byterun/caml/roots.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/globroots.h \
+ ../byterun/caml/memory.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h stack.h ../byterun/caml/roots.h
+signals.d.o: signals.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/callback.h ../byterun/caml/config.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h ../byterun/caml/signals.h \
+ ../byterun/caml/signals_machdep.h ../byterun/caml/sys.h
+signals_asm.d.o: signals_asm.c ../byterun/caml/fail.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/osdeps.h \
+ ../byterun/caml/signals.h ../byterun/caml/signals_machdep.h \
+ signals_osdep.h stack.h
+startup.d.o: startup.c ../byterun/caml/callback.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/backtrace.h \
+ ../byterun/caml/custom.h ../byterun/caml/debugger.h \
+ ../byterun/caml/fail.h ../byterun/caml/freelist.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/intext.h ../byterun/caml/io.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/osdeps.h ../byterun/caml/printexc.h stack.h \
+ ../byterun/caml/sys.h
+str.d.o: str.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/int64_native.h
+sys.d.o: sys.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/alloc.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/debugger.h \
+ ../byterun/caml/fail.h ../byterun/caml/instruct.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/osdeps.h \
+ ../byterun/caml/signals.h ../byterun/caml/stacks.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/sys.h
+terminfo.d.o: terminfo.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/alloc.h ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/fail.h ../byterun/caml/io.h \
+ ../byterun/caml/mlvalues.h
+unix.d.o: unix.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/memory.h \
+ ../byterun/caml/config.h ../byterun/caml/gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/misc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/osdeps.h
+weak.d.o: weak.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h
+alloc.p.o: alloc.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/stacks.h \
+ ../byterun/caml/memory.h
+array.p.o: array.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h
+backtrace.p.o: backtrace.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/backtrace.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h stack.h
+callback.p.o: callback.c ../byterun/caml/callback.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/fail.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h
+compact.p.o: compact.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/finalise.h ../byterun/caml/roots.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/gc.h ../byterun/caml/gc_ctrl.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/memory.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/weak.h
+compare.p.o: compare.c ../byterun/caml/custom.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/misc.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h
+custom.p.o: custom.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/fail.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h
+debugger.p.o: debugger.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/config.h ../byterun/caml/debugger.h \
+ ../byterun/caml/misc.h
+dynlink.p.o: dynlink.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/alloc.h ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/dynlink.h \
+ ../byterun/caml/fail.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/osdeps.h ../byterun/caml/prims.h
+extern.p.o: extern.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/fail.h ../byterun/caml/gc.h \
+ ../byterun/caml/intext.h ../byterun/caml/io.h ../byterun/caml/io.h \
+ ../byterun/caml/md5.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/reverse.h
+fail.p.o: fail.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/io.h ../byterun/caml/gc.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/printexc.h \
+ ../byterun/caml/signals.h stack.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h
+finalise.p.o: finalise.c ../byterun/caml/callback.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/fail.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/roots.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/signals.h
+floats.p.o: floats.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/misc.h ../byterun/caml/reverse.h \
+ ../byterun/caml/stacks.h ../byterun/caml/memory.h
+freelist.p.o: freelist.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/freelist.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/mlvalues.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h
+gc_ctrl.p.o: gc_ctrl.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/compact.h ../byterun/caml/custom.h \
+ ../byterun/caml/finalise.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h stack.h
+globroots.p.o: globroots.c ../byterun/caml/memory.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h ../byterun/caml/globroots.h \
+ ../byterun/caml/roots.h
+hash.p.o: hash.c ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/custom.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/hash.h \
+ ../byterun/caml/int64_native.h
+intern.p.o: intern.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/callback.h ../byterun/caml/custom.h \
+ ../byterun/caml/fail.h ../byterun/caml/gc.h ../byterun/caml/intext.h \
+ ../byterun/caml/io.h ../byterun/caml/io.h ../byterun/caml/md5.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/reverse.h
+ints.p.o: ints.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/custom.h ../byterun/caml/fail.h ../byterun/caml/intext.h \
+ ../byterun/caml/io.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/int64_native.h
+io.p.o: io.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/alloc.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/custom.h \
+ ../byterun/caml/fail.h ../byterun/caml/io.h ../byterun/caml/memory.h \
+ ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/signals.h ../byterun/caml/sys.h
+lexing.p.o: lexing.c ../byterun/caml/fail.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/stacks.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h
+main.p.o: main.c ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h ../byterun/caml/sys.h
+major_gc.p.o: major_gc.c ../byterun/caml/compact.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/custom.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/fail.h ../byterun/caml/finalise.h \
+ ../byterun/caml/roots.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/gc.h ../byterun/caml/gc_ctrl.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/weak.h
+md5.p.o: md5.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/md5.h ../byterun/caml/io.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/io.h \
+ ../byterun/caml/reverse.h
+memory.p.o: memory.c ../byterun/caml/fail.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/freelist.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/signals.h
+meta.p.o: meta.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/config.h ../byterun/caml/fail.h \
+ ../byterun/caml/fix_code.h ../byterun/caml/interp.h \
+ ../byterun/caml/intext.h ../byterun/caml/io.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/prims.h \
+ ../byterun/caml/stacks.h ../byterun/caml/memory.h
+minor_gc.p.o: minor_gc.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/fail.h ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/finalise.h \
+ ../byterun/caml/roots.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/memory.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/roots.h ../byterun/caml/signals.h ../byterun/caml/weak.h
+misc.p.o: misc.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h
+natdynlink.p.o: natdynlink.c ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/misc.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h stack.h \
+ ../byterun/caml/callback.h ../byterun/caml/alloc.h \
+ ../byterun/caml/intext.h ../byterun/caml/io.h ../byterun/caml/osdeps.h \
+ ../byterun/caml/fail.h
+obj.p.o: obj.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/gc.h ../byterun/caml/interp.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/prims.h
+parsing.p.o: parsing.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/misc.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/alloc.h
+printexc.p.o: printexc.c ../byterun/caml/backtrace.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/callback.h \
+ ../byterun/caml/debugger.h ../byterun/caml/fail.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/printexc.h
+roots.p.o: roots.c ../byterun/caml/finalise.h ../byterun/caml/roots.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/globroots.h \
+ ../byterun/caml/memory.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h stack.h ../byterun/caml/roots.h
+signals.p.o: signals.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/callback.h ../byterun/caml/config.h \
+ ../byterun/caml/fail.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/misc.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/roots.h \
+ ../byterun/caml/memory.h ../byterun/caml/signals.h \
+ ../byterun/caml/signals_machdep.h ../byterun/caml/sys.h
+signals_asm.p.o: signals_asm.c ../byterun/caml/fail.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/freelist.h \
+ ../byterun/caml/minor_gc.h ../byterun/caml/osdeps.h \
+ ../byterun/caml/signals.h ../byterun/caml/signals_machdep.h \
+ signals_osdep.h stack.h
+startup.p.o: startup.c ../byterun/caml/callback.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/misc.h ../byterun/caml/backtrace.h \
+ ../byterun/caml/custom.h ../byterun/caml/debugger.h \
+ ../byterun/caml/fail.h ../byterun/caml/freelist.h ../byterun/caml/gc.h \
+ ../byterun/caml/gc_ctrl.h ../byterun/caml/intext.h ../byterun/caml/io.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/osdeps.h ../byterun/caml/printexc.h stack.h \
+ ../byterun/caml/sys.h
+str.p.o: str.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/mlvalues.h ../byterun/caml/misc.h \
+ ../byterun/caml/int64_native.h
+sys.p.o: sys.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/alloc.h \
+ ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/debugger.h \
+ ../byterun/caml/fail.h ../byterun/caml/instruct.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/osdeps.h \
+ ../byterun/caml/signals.h ../byterun/caml/stacks.h \
+ ../byterun/caml/memory.h ../byterun/caml/gc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/sys.h
+terminfo.p.o: terminfo.c ../byterun/caml/config.h \
+ ../byterun/caml/../../config/m.h ../byterun/caml/../../config/s.h \
+ ../byterun/caml/alloc.h ../byterun/caml/misc.h ../byterun/caml/config.h \
+ ../byterun/caml/mlvalues.h ../byterun/caml/fail.h ../byterun/caml/io.h \
+ ../byterun/caml/mlvalues.h
+unix.p.o: unix.c ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/memory.h \
+ ../byterun/caml/config.h ../byterun/caml/gc.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/misc.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/misc.h ../byterun/caml/osdeps.h
+weak.p.o: weak.c ../byterun/caml/alloc.h ../byterun/caml/misc.h \
+ ../byterun/caml/config.h ../byterun/caml/../../config/m.h \
+ ../byterun/caml/../../config/s.h ../byterun/caml/mlvalues.h \
+ ../byterun/caml/fail.h ../byterun/caml/major_gc.h \
+ ../byterun/caml/freelist.h ../byterun/caml/memory.h ../byterun/caml/gc.h \
+ ../byterun/caml/major_gc.h ../byterun/caml/minor_gc.h \
+ ../byterun/caml/mlvalues.h
diff --git a/asmrun/backtrace.c b/asmrun/backtrace.c
index 292549b..79c462e 100644
--- a/asmrun/backtrace.c
+++ b/asmrun/backtrace.c
@@ -14,11 +14,11 @@
 /* Stack backtrace for uncaught exceptions */
 
 #include <stdio.h>
-#include "alloc.h"
-#include "backtrace.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
+#include "caml/alloc.h"
+#include "caml/backtrace.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
 #include "stack.h"
 
 int caml_backtrace_active = 0;
diff --git a/asmrun/fail.c b/asmrun/fail.c
index 09a9af9..473aca5 100644
--- a/asmrun/fail.c
+++ b/asmrun/fail.c
@@ -14,16 +14,16 @@
 /* Raising exceptions from C. */
 
 #include <signal.h>
-#include "alloc.h"
-#include "fail.h"
-#include "io.h"
-#include "gc.h"
-#include "memory.h"
-#include "mlvalues.h"
-#include "printexc.h"
-#include "signals.h"
+#include "caml/alloc.h"
+#include "caml/fail.h"
+#include "caml/io.h"
+#include "caml/gc.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
+#include "caml/printexc.h"
+#include "caml/signals.h"
 #include "stack.h"
-#include "roots.h"
+#include "caml/roots.h"
 
 /* The globals holding predefined exceptions */
 
diff --git a/asmrun/natdynlink.c b/asmrun/natdynlink.c
index edb389d..906fca1 100644
--- a/asmrun/natdynlink.c
+++ b/asmrun/natdynlink.c
@@ -11,15 +11,15 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include "misc.h"
-#include "mlvalues.h"
-#include "memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/memory.h"
 #include "stack.h"
-#include "callback.h"
-#include "alloc.h"
-#include "intext.h"
-#include "osdeps.h"
-#include "fail.h"
+#include "caml/callback.h"
+#include "caml/alloc.h"
+#include "caml/intext.h"
+#include "caml/osdeps.h"
+#include "caml/fail.h"
 
 #include <stdio.h>
 #include <string.h>
diff --git a/asmrun/roots.c b/asmrun/roots.c
index 93e7a65..32325e2 100644
--- a/asmrun/roots.c
+++ b/asmrun/roots.c
@@ -13,15 +13,15 @@
 
 /* To walk the memory roots for garbage collection */
 
-#include "finalise.h"
-#include "globroots.h"
-#include "memory.h"
-#include "major_gc.h"
-#include "minor_gc.h"
-#include "misc.h"
-#include "mlvalues.h"
+#include "caml/finalise.h"
+#include "caml/globroots.h"
+#include "caml/memory.h"
+#include "caml/major_gc.h"
+#include "caml/minor_gc.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
 #include "stack.h"
-#include "roots.h"
+#include "caml/roots.h"
 #include <string.h>
 #include <stdio.h>
 
diff --git a/asmrun/signals_asm.c b/asmrun/signals_asm.c
index fb22f8b..2f6fac5 100644
--- a/asmrun/signals_asm.c
+++ b/asmrun/signals_asm.c
@@ -18,11 +18,11 @@
 #endif
 #include <signal.h>
 #include <stdio.h>
-#include "fail.h"
-#include "memory.h"
-#include "osdeps.h"
-#include "signals.h"
-#include "signals_machdep.h"
+#include "caml/fail.h"
+#include "caml/memory.h"
+#include "caml/osdeps.h"
+#include "caml/signals.h"
+#include "caml/signals_machdep.h"
 #include "signals_osdep.h"
 #include "stack.h"
 
diff --git a/asmrun/startup.c b/asmrun/startup.c
index a171ab5..c360e97 100644
--- a/asmrun/startup.c
+++ b/asmrun/startup.c
@@ -15,24 +15,24 @@
 
 #include <stdio.h>
 #include <stdlib.h>
-#include "callback.h"
-#include "backtrace.h"
-#include "custom.h"
-#include "debugger.h"
-#include "fail.h"
-#include "freelist.h"
-#include "gc.h"
-#include "gc_ctrl.h"
-#include "intext.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "osdeps.h"
-#include "printexc.h"
+#include "caml/callback.h"
+#include "caml/backtrace.h"
+#include "caml/custom.h"
+#include "caml/debugger.h"
+#include "caml/fail.h"
+#include "caml/freelist.h"
+#include "caml/gc.h"
+#include "caml/gc_ctrl.h"
+#include "caml/intext.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/osdeps.h"
+#include "caml/printexc.h"
 #include "stack.h"
-#include "sys.h"
+#include "caml/sys.h"
 #ifdef HAS_UI
-#include "ui.h"
+#include "caml/ui.h"
 #endif
 
 extern int caml_parser_trace;
diff --git a/byterun/.depend b/byterun/.depend
index 68adc27..16d6fbe 100644
--- a/byterun/.depend
+++ b/byterun/.depend
@@ -1,413 +1,661 @@
-alloc.o: alloc.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h major_gc.h freelist.h memory.h gc.h \
-  minor_gc.h stacks.h
-array.o: array.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h
-backtrace.o: backtrace.c config.h ../config/m.h ../config/s.h \
-  compatibility.h mlvalues.h misc.h alloc.h io.h instruct.h intext.h \
-  exec.h fix_code.h memory.h gc.h major_gc.h freelist.h minor_gc.h \
-  startup.h stacks.h sys.h backtrace.h
-callback.o: callback.c callback.h compatibility.h mlvalues.h config.h \
-  ../config/m.h ../config/s.h misc.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h interp.h instruct.h fix_code.h stacks.h
-compact.o: compact.c config.h ../config/m.h ../config/s.h compatibility.h \
-  finalise.h roots.h misc.h memory.h gc.h mlvalues.h major_gc.h \
-  freelist.h minor_gc.h gc_ctrl.h weak.h
-compare.o: compare.c custom.h compatibility.h mlvalues.h config.h \
-  ../config/m.h ../config/s.h misc.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h
-custom.o: custom.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h
-debugger.o: debugger.c alloc.h compatibility.h misc.h config.h \
-  ../config/m.h ../config/s.h mlvalues.h debugger.h fail.h fix_code.h \
-  instruct.h intext.h io.h stacks.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h sys.h
-dynlink.o: dynlink.c config.h ../config/m.h ../config/s.h compatibility.h \
-  alloc.h misc.h mlvalues.h dynlink.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h osdeps.h prims.h
-extern.o: extern.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h fail.h gc.h intext.h io.h md5.h \
-  memory.h major_gc.h freelist.h minor_gc.h reverse.h
-fail.o: fail.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h io.h gc.h memory.h major_gc.h \
-  freelist.h minor_gc.h printexc.h signals.h stacks.h
-finalise.o: finalise.c callback.h compatibility.h mlvalues.h config.h \
-  ../config/m.h ../config/s.h misc.h fail.h roots.h memory.h gc.h \
-  major_gc.h freelist.h minor_gc.h signals.h
-fix_code.o: fix_code.c config.h ../config/m.h ../config/s.h \
-  compatibility.h debugger.h misc.h mlvalues.h fix_code.h instruct.h \
-  intext.h io.h md5.h memory.h gc.h major_gc.h freelist.h minor_gc.h \
-  reverse.h
-floats.o: floats.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h reverse.h stacks.h
-freelist.o: freelist.c config.h ../config/m.h ../config/s.h \
-  compatibility.h freelist.h misc.h mlvalues.h gc.h gc_ctrl.h memory.h \
-  major_gc.h minor_gc.h
-gc_ctrl.o: gc_ctrl.c alloc.h compatibility.h misc.h config.h \
-  ../config/m.h ../config/s.h mlvalues.h compact.h custom.h finalise.h \
-  roots.h memory.h gc.h major_gc.h freelist.h minor_gc.h gc_ctrl.h \
-  stacks.h
-globroots.o: globroots.c memory.h compatibility.h config.h ../config/m.h \
-  ../config/s.h gc.h mlvalues.h misc.h major_gc.h freelist.h minor_gc.h \
-  roots.h globroots.h
-hash.o: hash.c mlvalues.h compatibility.h config.h ../config/m.h \
-  ../config/s.h misc.h custom.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h hash.h int64_native.h
+alloc.o: alloc.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/major_gc.h caml/freelist.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/minor_gc.h caml/mlvalues.h \
+ caml/stacks.h caml/memory.h
+array.o: array.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/misc.h caml/mlvalues.h
+backtrace.o: backtrace.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/mlvalues.h caml/config.h \
+ caml/misc.h caml/alloc.h caml/mlvalues.h caml/io.h caml/instruct.h \
+ caml/intext.h caml/io.h caml/exec.h caml/fix_code.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/startup.h \
+ caml/exec.h caml/stacks.h caml/memory.h caml/sys.h caml/backtrace.h
+callback.o: callback.c caml/callback.h caml/compatibility.h \
+ caml/mlvalues.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/misc.h caml/fail.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/mlvalues.h \
+ caml/interp.h caml/instruct.h caml/fix_code.h caml/stacks.h \
+ caml/memory.h
+compact.o: compact.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/finalise.h caml/roots.h \
+ caml/misc.h caml/config.h caml/memory.h caml/gc.h caml/mlvalues.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/freelist.h \
+ caml/gc.h caml/gc_ctrl.h caml/major_gc.h caml/memory.h caml/mlvalues.h \
+ caml/roots.h caml/weak.h
+compare.o: compare.c caml/custom.h caml/compatibility.h caml/mlvalues.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h caml/misc.h \
+ caml/fail.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/misc.h caml/mlvalues.h
+custom.o: custom.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/mlvalues.h
+debugger.o: debugger.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/config.h caml/debugger.h caml/misc.h caml/fail.h \
+ caml/fix_code.h caml/instruct.h caml/intext.h caml/io.h caml/io.h \
+ caml/mlvalues.h caml/stacks.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/sys.h
+dynlink.o: dynlink.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/alloc.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/dynlink.h caml/fail.h caml/mlvalues.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/misc.h caml/osdeps.h caml/prims.h
+extern.o: extern.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/gc.h caml/intext.h \
+ caml/io.h caml/io.h caml/md5.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/misc.h caml/mlvalues.h \
+ caml/reverse.h
+fail.o: fail.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/io.h caml/gc.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/printexc.h caml/signals.h caml/stacks.h \
+ caml/memory.h
+finalise.o: finalise.c caml/callback.h caml/compatibility.h \
+ caml/mlvalues.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/misc.h caml/fail.h caml/mlvalues.h \
+ caml/roots.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/signals.h
+fix_code.o: fix_code.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/debugger.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/fix_code.h caml/instruct.h \
+ caml/intext.h caml/io.h caml/md5.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/reverse.h
+floats.o: floats.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/mlvalues.h caml/misc.h \
+ caml/reverse.h caml/stacks.h caml/memory.h
+freelist.o: freelist.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/freelist.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/gc.h caml/gc_ctrl.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/major_gc.h caml/misc.h caml/mlvalues.h
+gc_ctrl.o: gc_ctrl.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/compact.h caml/custom.h caml/finalise.h \
+ caml/roots.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/freelist.h caml/gc.h caml/gc_ctrl.h caml/major_gc.h \
+ caml/minor_gc.h caml/misc.h caml/mlvalues.h caml/stacks.h
+globroots.o: globroots.c caml/memory.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/gc.h caml/mlvalues.h \
+ caml/misc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/memory.h caml/globroots.h caml/roots.h
+hash.o: hash.c caml/mlvalues.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/misc.h caml/custom.h \
+ caml/mlvalues.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/hash.h caml/int64_native.h
 instrtrace.o: instrtrace.c
-intern.o: intern.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h callback.h custom.h fail.h gc.h intext.h io.h \
-  md5.h memory.h major_gc.h freelist.h minor_gc.h reverse.h
-interp.o: interp.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h backtrace.h callback.h debugger.h fail.h \
-  fix_code.h instrtrace.h instruct.h interp.h major_gc.h freelist.h \
-  memory.h gc.h minor_gc.h prims.h signals.h stacks.h jumptbl.h
-ints.o: ints.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h fail.h intext.h io.h memory.h gc.h \
-  major_gc.h freelist.h minor_gc.h int64_native.h
-io.o: io.c config.h ../config/m.h ../config/s.h compatibility.h alloc.h \
-  misc.h mlvalues.h custom.h fail.h io.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h signals.h sys.h
-lexing.o: lexing.c fail.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h stacks.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h
-main.o: main.c misc.h compatibility.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h sys.h
-major_gc.o: major_gc.c compact.h config.h ../config/m.h ../config/s.h \
-  compatibility.h misc.h custom.h mlvalues.h fail.h finalise.h roots.h \
-  memory.h gc.h major_gc.h freelist.h minor_gc.h gc_ctrl.h weak.h
-md5.o: md5.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h md5.h io.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h reverse.h
-memory.o: memory.c fail.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h freelist.h gc.h gc_ctrl.h major_gc.h memory.h \
-  minor_gc.h signals.h
-meta.o: meta.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h fix_code.h interp.h intext.h io.h \
-  major_gc.h freelist.h memory.h gc.h minor_gc.h prims.h stacks.h
-minor_gc.o: minor_gc.c config.h ../config/m.h ../config/s.h \
-  compatibility.h fail.h misc.h mlvalues.h finalise.h roots.h memory.h \
-  gc.h major_gc.h freelist.h minor_gc.h gc_ctrl.h signals.h weak.h
-misc.o: misc.c config.h ../config/m.h ../config/s.h compatibility.h \
-  misc.h memory.h gc.h mlvalues.h major_gc.h freelist.h minor_gc.h
-obj.o: obj.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h gc.h interp.h major_gc.h freelist.h \
-  memory.h minor_gc.h prims.h
-parsing.o: parsing.c config.h ../config/m.h ../config/s.h compatibility.h \
-  mlvalues.h misc.h memory.h gc.h major_gc.h freelist.h minor_gc.h \
-  alloc.h
-prims.o: prims.c mlvalues.h compatibility.h config.h ../config/m.h \
-  ../config/s.h misc.h prims.h
-printexc.o: printexc.c backtrace.h mlvalues.h compatibility.h config.h \
-  ../config/m.h ../config/s.h misc.h callback.h debugger.h fail.h \
-  printexc.h
-roots.o: roots.c finalise.h roots.h misc.h compatibility.h config.h \
-  ../config/m.h ../config/s.h memory.h gc.h mlvalues.h major_gc.h \
-  freelist.h minor_gc.h globroots.h stacks.h
-signals.o: signals.c alloc.h compatibility.h misc.h config.h \
-  ../config/m.h ../config/s.h mlvalues.h callback.h fail.h memory.h gc.h \
-  major_gc.h freelist.h minor_gc.h roots.h signals.h signals_machdep.h \
-  sys.h
-signals_byt.o: signals_byt.c config.h ../config/m.h ../config/s.h \
-  compatibility.h memory.h gc.h mlvalues.h misc.h major_gc.h freelist.h \
-  minor_gc.h osdeps.h signals.h signals_machdep.h
-stacks.o: stacks.c config.h ../config/m.h ../config/s.h compatibility.h \
-  fail.h misc.h mlvalues.h stacks.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h
-startup.o: startup.c config.h ../config/m.h ../config/s.h compatibility.h \
-  alloc.h misc.h mlvalues.h backtrace.h callback.h custom.h debugger.h \
-  dynlink.h exec.h fail.h fix_code.h freelist.h gc_ctrl.h instrtrace.h \
-  interp.h intext.h io.h memory.h gc.h major_gc.h minor_gc.h osdeps.h \
-  prims.h printexc.h reverse.h signals.h stacks.h sys.h startup.h \
-  version.h
-str.o: str.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h
-sys.o: sys.c config.h ../config/m.h ../config/s.h compatibility.h alloc.h \
-  misc.h mlvalues.h debugger.h fail.h instruct.h osdeps.h signals.h \
-  stacks.h memory.h gc.h major_gc.h freelist.h minor_gc.h sys.h
-terminfo.o: terminfo.c config.h ../config/m.h ../config/s.h \
-  compatibility.h alloc.h misc.h mlvalues.h fail.h io.h
-unix.o: unix.c config.h ../config/m.h ../config/s.h compatibility.h \
-  memory.h gc.h mlvalues.h misc.h major_gc.h freelist.h minor_gc.h \
-  osdeps.h
-weak.o: weak.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h major_gc.h freelist.h memory.h gc.h \
-  minor_gc.h
-alloc.d.o: alloc.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h major_gc.h freelist.h memory.h gc.h \
-  minor_gc.h stacks.h
-array.d.o: array.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h
-backtrace.d.o: backtrace.c config.h ../config/m.h ../config/s.h \
-  compatibility.h mlvalues.h misc.h alloc.h io.h instruct.h intext.h \
-  exec.h fix_code.h memory.h gc.h major_gc.h freelist.h minor_gc.h \
-  startup.h stacks.h sys.h backtrace.h
-callback.d.o: callback.c callback.h compatibility.h mlvalues.h config.h \
-  ../config/m.h ../config/s.h misc.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h interp.h instruct.h fix_code.h stacks.h
-compact.d.o: compact.c config.h ../config/m.h ../config/s.h compatibility.h \
-  finalise.h roots.h misc.h memory.h gc.h mlvalues.h major_gc.h \
-  freelist.h minor_gc.h gc_ctrl.h weak.h
-compare.d.o: compare.c custom.h compatibility.h mlvalues.h config.h \
-  ../config/m.h ../config/s.h misc.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h
-custom.d.o: custom.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h
-debugger.d.o: debugger.c alloc.h compatibility.h misc.h config.h \
-  ../config/m.h ../config/s.h mlvalues.h debugger.h fail.h fix_code.h \
-  instruct.h intext.h io.h stacks.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h sys.h
-dynlink.d.o: dynlink.c config.h ../config/m.h ../config/s.h compatibility.h \
-  alloc.h misc.h mlvalues.h dynlink.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h osdeps.h prims.h
-extern.d.o: extern.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h fail.h gc.h intext.h io.h md5.h \
-  memory.h major_gc.h freelist.h minor_gc.h reverse.h
-fail.d.o: fail.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h io.h gc.h memory.h major_gc.h \
-  freelist.h minor_gc.h printexc.h signals.h stacks.h
-finalise.d.o: finalise.c callback.h compatibility.h mlvalues.h config.h \
-  ../config/m.h ../config/s.h misc.h fail.h roots.h memory.h gc.h \
-  major_gc.h freelist.h minor_gc.h signals.h
-fix_code.d.o: fix_code.c config.h ../config/m.h ../config/s.h \
-  compatibility.h debugger.h misc.h mlvalues.h fix_code.h instruct.h \
-  intext.h io.h md5.h memory.h gc.h major_gc.h freelist.h minor_gc.h \
-  reverse.h
-floats.d.o: floats.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h reverse.h stacks.h
-freelist.d.o: freelist.c config.h ../config/m.h ../config/s.h \
-  compatibility.h freelist.h misc.h mlvalues.h gc.h gc_ctrl.h memory.h \
-  major_gc.h minor_gc.h
-gc_ctrl.d.o: gc_ctrl.c alloc.h compatibility.h misc.h config.h \
-  ../config/m.h ../config/s.h mlvalues.h compact.h custom.h finalise.h \
-  roots.h memory.h gc.h major_gc.h freelist.h minor_gc.h gc_ctrl.h \
-  stacks.h
-globroots.d.o: globroots.c memory.h compatibility.h config.h ../config/m.h \
-  ../config/s.h gc.h mlvalues.h misc.h major_gc.h freelist.h minor_gc.h \
-  roots.h globroots.h
-hash.d.o: hash.c mlvalues.h compatibility.h config.h ../config/m.h \
-  ../config/s.h misc.h custom.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h hash.h int64_native.h
-instrtrace.d.o: instrtrace.c instruct.h misc.h compatibility.h config.h \
-  ../config/m.h ../config/s.h mlvalues.h opnames.h prims.h stacks.h \
-  memory.h gc.h major_gc.h freelist.h minor_gc.h
-intern.d.o: intern.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h callback.h custom.h fail.h gc.h intext.h io.h \
-  md5.h memory.h major_gc.h freelist.h minor_gc.h reverse.h
-interp.d.o: interp.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h backtrace.h callback.h debugger.h fail.h \
-  fix_code.h instrtrace.h instruct.h interp.h major_gc.h freelist.h \
-  memory.h gc.h minor_gc.h prims.h signals.h stacks.h
-ints.d.o: ints.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h fail.h intext.h io.h memory.h gc.h \
-  major_gc.h freelist.h minor_gc.h int64_native.h
-io.d.o: io.c config.h ../config/m.h ../config/s.h compatibility.h alloc.h \
-  misc.h mlvalues.h custom.h fail.h io.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h signals.h sys.h
-lexing.d.o: lexing.c fail.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h stacks.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h
-main.d.o: main.c misc.h compatibility.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h sys.h
-major_gc.d.o: major_gc.c compact.h config.h ../config/m.h ../config/s.h \
-  compatibility.h misc.h custom.h mlvalues.h fail.h finalise.h roots.h \
-  memory.h gc.h major_gc.h freelist.h minor_gc.h gc_ctrl.h weak.h
-md5.d.o: md5.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h md5.h io.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h reverse.h
-memory.d.o: memory.c fail.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h freelist.h gc.h gc_ctrl.h major_gc.h memory.h \
-  minor_gc.h signals.h
-meta.d.o: meta.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h fix_code.h interp.h intext.h io.h \
-  major_gc.h freelist.h memory.h gc.h minor_gc.h prims.h stacks.h
-minor_gc.d.o: minor_gc.c config.h ../config/m.h ../config/s.h \
-  compatibility.h fail.h misc.h mlvalues.h finalise.h roots.h memory.h \
-  gc.h major_gc.h freelist.h minor_gc.h gc_ctrl.h signals.h weak.h
-misc.d.o: misc.c config.h ../config/m.h ../config/s.h compatibility.h \
-  misc.h memory.h gc.h mlvalues.h major_gc.h freelist.h minor_gc.h
-obj.d.o: obj.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h gc.h interp.h major_gc.h freelist.h \
-  memory.h minor_gc.h prims.h
-parsing.d.o: parsing.c config.h ../config/m.h ../config/s.h compatibility.h \
-  mlvalues.h misc.h memory.h gc.h major_gc.h freelist.h minor_gc.h \
-  alloc.h
-prims.d.o: prims.c mlvalues.h compatibility.h config.h ../config/m.h \
-  ../config/s.h misc.h prims.h
-printexc.d.o: printexc.c backtrace.h mlvalues.h compatibility.h config.h \
-  ../config/m.h ../config/s.h misc.h callback.h debugger.h fail.h \
-  printexc.h
-roots.d.o: roots.c finalise.h roots.h misc.h compatibility.h config.h \
-  ../config/m.h ../config/s.h memory.h gc.h mlvalues.h major_gc.h \
-  freelist.h minor_gc.h globroots.h stacks.h
-signals.d.o: signals.c alloc.h compatibility.h misc.h config.h \
-  ../config/m.h ../config/s.h mlvalues.h callback.h fail.h memory.h gc.h \
-  major_gc.h freelist.h minor_gc.h roots.h signals.h signals_machdep.h \
-  sys.h
-signals_byt.d.o: signals_byt.c config.h ../config/m.h ../config/s.h \
-  compatibility.h memory.h gc.h mlvalues.h misc.h major_gc.h freelist.h \
-  minor_gc.h osdeps.h signals.h signals_machdep.h
-stacks.d.o: stacks.c config.h ../config/m.h ../config/s.h compatibility.h \
-  fail.h misc.h mlvalues.h stacks.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h
-startup.d.o: startup.c config.h ../config/m.h ../config/s.h compatibility.h \
-  alloc.h misc.h mlvalues.h backtrace.h callback.h custom.h debugger.h \
-  dynlink.h exec.h fail.h fix_code.h freelist.h gc_ctrl.h instrtrace.h \
-  interp.h intext.h io.h memory.h gc.h major_gc.h minor_gc.h osdeps.h \
-  prims.h printexc.h reverse.h signals.h stacks.h sys.h startup.h \
-  version.h
-str.d.o: str.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h
-sys.d.o: sys.c config.h ../config/m.h ../config/s.h compatibility.h alloc.h \
-  misc.h mlvalues.h debugger.h fail.h instruct.h osdeps.h signals.h \
-  stacks.h memory.h gc.h major_gc.h freelist.h minor_gc.h sys.h
-terminfo.d.o: terminfo.c config.h ../config/m.h ../config/s.h \
-  compatibility.h alloc.h misc.h mlvalues.h fail.h io.h
-unix.d.o: unix.c config.h ../config/m.h ../config/s.h compatibility.h \
-  memory.h gc.h mlvalues.h misc.h major_gc.h freelist.h minor_gc.h \
-  osdeps.h
-weak.d.o: weak.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h major_gc.h freelist.h memory.h gc.h \
-  minor_gc.h
-alloc.pic.o: alloc.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h major_gc.h freelist.h memory.h gc.h \
-  minor_gc.h stacks.h
-array.pic.o: array.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h
-backtrace.pic.o: backtrace.c config.h ../config/m.h ../config/s.h \
-  compatibility.h mlvalues.h misc.h alloc.h io.h instruct.h intext.h \
-  exec.h fix_code.h memory.h gc.h major_gc.h freelist.h minor_gc.h \
-  startup.h stacks.h sys.h backtrace.h
-callback.pic.o: callback.c callback.h compatibility.h mlvalues.h config.h \
-  ../config/m.h ../config/s.h misc.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h interp.h instruct.h fix_code.h stacks.h
-compact.pic.o: compact.c config.h ../config/m.h ../config/s.h compatibility.h \
-  finalise.h roots.h misc.h memory.h gc.h mlvalues.h major_gc.h \
-  freelist.h minor_gc.h gc_ctrl.h weak.h
-compare.pic.o: compare.c custom.h compatibility.h mlvalues.h config.h \
-  ../config/m.h ../config/s.h misc.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h
-custom.pic.o: custom.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h
-debugger.pic.o: debugger.c alloc.h compatibility.h misc.h config.h \
-  ../config/m.h ../config/s.h mlvalues.h debugger.h fail.h fix_code.h \
-  instruct.h intext.h io.h stacks.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h sys.h
-dynlink.pic.o: dynlink.c config.h ../config/m.h ../config/s.h compatibility.h \
-  alloc.h misc.h mlvalues.h dynlink.h fail.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h osdeps.h prims.h
-extern.pic.o: extern.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h fail.h gc.h intext.h io.h md5.h \
-  memory.h major_gc.h freelist.h minor_gc.h reverse.h
-fail.pic.o: fail.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h io.h gc.h memory.h major_gc.h \
-  freelist.h minor_gc.h printexc.h signals.h stacks.h
-finalise.pic.o: finalise.c callback.h compatibility.h mlvalues.h config.h \
-  ../config/m.h ../config/s.h misc.h fail.h roots.h memory.h gc.h \
-  major_gc.h freelist.h minor_gc.h signals.h
-fix_code.pic.o: fix_code.c config.h ../config/m.h ../config/s.h \
-  compatibility.h debugger.h misc.h mlvalues.h fix_code.h instruct.h \
-  intext.h io.h md5.h memory.h gc.h major_gc.h freelist.h minor_gc.h \
-  reverse.h
-floats.pic.o: floats.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h reverse.h stacks.h
-freelist.pic.o: freelist.c config.h ../config/m.h ../config/s.h \
-  compatibility.h freelist.h misc.h mlvalues.h gc.h gc_ctrl.h memory.h \
-  major_gc.h minor_gc.h
-gc_ctrl.pic.o: gc_ctrl.c alloc.h compatibility.h misc.h config.h \
-  ../config/m.h ../config/s.h mlvalues.h compact.h custom.h finalise.h \
-  roots.h memory.h gc.h major_gc.h freelist.h minor_gc.h gc_ctrl.h \
-  stacks.h
-globroots.pic.o: globroots.c memory.h compatibility.h config.h ../config/m.h \
-  ../config/s.h gc.h mlvalues.h misc.h major_gc.h freelist.h minor_gc.h \
-  roots.h globroots.h
-hash.pic.o: hash.c mlvalues.h compatibility.h config.h ../config/m.h \
-  ../config/s.h misc.h custom.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h hash.h int64_native.h
+intern.o: intern.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/callback.h caml/custom.h caml/fail.h caml/gc.h \
+ caml/intext.h caml/io.h caml/io.h caml/md5.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/mlvalues.h \
+ caml/misc.h caml/reverse.h
+interp.o: interp.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/backtrace.h caml/callback.h caml/debugger.h \
+ caml/fail.h caml/fix_code.h caml/instrtrace.h caml/instruct.h \
+ caml/interp.h caml/major_gc.h caml/freelist.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/minor_gc.h caml/misc.h caml/mlvalues.h caml/prims.h \
+ caml/signals.h caml/stacks.h caml/memory.h caml/jumptbl.h
+ints.o: ints.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/intext.h caml/io.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/misc.h caml/mlvalues.h caml/int64_native.h
+io.o: io.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/alloc.h caml/misc.h caml/config.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/io.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/signals.h caml/sys.h
+lexing.o: lexing.c caml/fail.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/mlvalues.h caml/stacks.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h
+main.o: main.c caml/misc.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/misc.h \
+ caml/sys.h
+major_gc.o: major_gc.c caml/compact.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/misc.h caml/custom.h \
+ caml/mlvalues.h caml/config.h caml/fail.h caml/finalise.h caml/roots.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/freelist.h caml/gc.h caml/gc_ctrl.h caml/major_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/weak.h
+md5.o: md5.c caml/alloc.h caml/compatibility.h caml/misc.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/fail.h \
+ caml/md5.h caml/io.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/mlvalues.h caml/io.h caml/reverse.h
+memory.o: memory.c caml/fail.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/freelist.h caml/gc.h caml/gc_ctrl.h caml/major_gc.h \
+ caml/freelist.h caml/memory.h caml/gc.h caml/major_gc.h caml/minor_gc.h \
+ caml/minor_gc.h caml/misc.h caml/mlvalues.h caml/signals.h
+meta.o: meta.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/config.h caml/fail.h caml/fix_code.h caml/interp.h \
+ caml/intext.h caml/io.h caml/major_gc.h caml/freelist.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/minor_gc.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/prims.h caml/stacks.h caml/memory.h
+minor_gc.o: minor_gc.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/fail.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/finalise.h caml/roots.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/gc.h \
+ caml/gc_ctrl.h caml/major_gc.h caml/memory.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/signals.h caml/weak.h
+misc.o: misc.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/misc.h caml/config.h caml/memory.h caml/gc.h \
+ caml/mlvalues.h caml/misc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h
+obj.o: obj.c caml/alloc.h caml/compatibility.h caml/misc.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/fail.h \
+ caml/gc.h caml/interp.h caml/major_gc.h caml/freelist.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/minor_gc.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/prims.h
+parsing.o: parsing.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/mlvalues.h caml/config.h \
+ caml/misc.h caml/memory.h caml/gc.h caml/mlvalues.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/alloc.h
+prims.o: prims.c caml/mlvalues.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/misc.h caml/prims.h
+printexc.o: printexc.c caml/backtrace.h caml/mlvalues.h \
+ caml/compatibility.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/misc.h caml/callback.h caml/debugger.h \
+ caml/fail.h caml/misc.h caml/mlvalues.h caml/printexc.h
+roots.o: roots.c caml/finalise.h caml/roots.h caml/misc.h \
+ caml/compatibility.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/memory.h caml/gc.h caml/mlvalues.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/globroots.h \
+ caml/major_gc.h caml/memory.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/stacks.h
+signals.o: signals.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/callback.h caml/config.h caml/fail.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/memory.h caml/signals.h \
+ caml/signals_machdep.h caml/sys.h
+signals_byt.o: signals_byt.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/memory.h caml/config.h \
+ caml/gc.h caml/mlvalues.h caml/misc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/osdeps.h caml/signals.h caml/signals_machdep.h
+stacks.o: stacks.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/fail.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/misc.h caml/mlvalues.h caml/stacks.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h
+startup.o: startup.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/alloc.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/backtrace.h caml/callback.h \
+ caml/custom.h caml/debugger.h caml/dynlink.h caml/exec.h caml/fail.h \
+ caml/fix_code.h caml/freelist.h caml/gc_ctrl.h caml/instrtrace.h \
+ caml/interp.h caml/intext.h caml/io.h caml/io.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/minor_gc.h \
+ caml/misc.h caml/mlvalues.h caml/osdeps.h caml/prims.h caml/printexc.h \
+ caml/reverse.h caml/signals.h caml/stacks.h caml/memory.h caml/sys.h \
+ caml/startup.h caml/exec.h caml/version.h
+str.o: str.c caml/alloc.h caml/compatibility.h caml/misc.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/fail.h \
+ caml/mlvalues.h caml/misc.h caml/int64_native.h
+sys.o: sys.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/alloc.h caml/misc.h caml/config.h \
+ caml/mlvalues.h caml/debugger.h caml/fail.h caml/instruct.h \
+ caml/mlvalues.h caml/osdeps.h caml/signals.h caml/stacks.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/sys.h
+terminfo.o: terminfo.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/alloc.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/fail.h caml/io.h caml/mlvalues.h
+unix.o: unix.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/memory.h caml/config.h caml/gc.h \
+ caml/mlvalues.h caml/misc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/misc.h caml/osdeps.h
+weak.o: weak.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/major_gc.h caml/freelist.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/minor_gc.h caml/mlvalues.h
+alloc.d.o: alloc.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/major_gc.h caml/freelist.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/minor_gc.h caml/mlvalues.h \
+ caml/stacks.h caml/memory.h
+array.d.o: array.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/misc.h caml/mlvalues.h
+backtrace.d.o: backtrace.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/mlvalues.h caml/config.h \
+ caml/misc.h caml/alloc.h caml/mlvalues.h caml/io.h caml/instruct.h \
+ caml/intext.h caml/io.h caml/exec.h caml/fix_code.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/startup.h \
+ caml/exec.h caml/stacks.h caml/memory.h caml/sys.h caml/backtrace.h
+callback.d.o: callback.c caml/callback.h caml/compatibility.h \
+ caml/mlvalues.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/misc.h caml/fail.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/mlvalues.h \
+ caml/interp.h caml/instruct.h caml/fix_code.h caml/stacks.h \
+ caml/memory.h
+compact.d.o: compact.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/finalise.h caml/roots.h \
+ caml/misc.h caml/config.h caml/memory.h caml/gc.h caml/mlvalues.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/freelist.h \
+ caml/gc.h caml/gc_ctrl.h caml/major_gc.h caml/memory.h caml/mlvalues.h \
+ caml/roots.h caml/weak.h
+compare.d.o: compare.c caml/custom.h caml/compatibility.h caml/mlvalues.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h caml/misc.h \
+ caml/fail.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/misc.h caml/mlvalues.h
+custom.d.o: custom.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/mlvalues.h
+debugger.d.o: debugger.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/config.h caml/debugger.h caml/misc.h caml/fail.h \
+ caml/fix_code.h caml/instruct.h caml/intext.h caml/io.h caml/io.h \
+ caml/mlvalues.h caml/stacks.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/sys.h
+dynlink.d.o: dynlink.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/alloc.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/dynlink.h caml/fail.h caml/mlvalues.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/misc.h caml/osdeps.h caml/prims.h
+extern.d.o: extern.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/gc.h caml/intext.h \
+ caml/io.h caml/io.h caml/md5.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/misc.h caml/mlvalues.h \
+ caml/reverse.h
+fail.d.o: fail.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/io.h caml/gc.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/printexc.h caml/signals.h caml/stacks.h \
+ caml/memory.h
+finalise.d.o: finalise.c caml/callback.h caml/compatibility.h \
+ caml/mlvalues.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/misc.h caml/fail.h caml/mlvalues.h \
+ caml/roots.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/signals.h
+fix_code.d.o: fix_code.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/debugger.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/fix_code.h caml/instruct.h \
+ caml/intext.h caml/io.h caml/md5.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/reverse.h
+floats.d.o: floats.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/mlvalues.h caml/misc.h \
+ caml/reverse.h caml/stacks.h caml/memory.h
+freelist.d.o: freelist.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/freelist.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/gc.h caml/gc_ctrl.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/major_gc.h caml/misc.h caml/mlvalues.h
+gc_ctrl.d.o: gc_ctrl.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/compact.h caml/custom.h caml/finalise.h \
+ caml/roots.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/freelist.h caml/gc.h caml/gc_ctrl.h caml/major_gc.h \
+ caml/minor_gc.h caml/misc.h caml/mlvalues.h caml/stacks.h
+globroots.d.o: globroots.c caml/memory.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/gc.h caml/mlvalues.h \
+ caml/misc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/memory.h caml/globroots.h caml/roots.h
+hash.d.o: hash.c caml/mlvalues.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/misc.h caml/custom.h \
+ caml/mlvalues.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/hash.h caml/int64_native.h
+instrtrace.d.o: instrtrace.c caml/instruct.h caml/misc.h \
+ caml/compatibility.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/mlvalues.h caml/misc.h caml/opnames.h \
+ caml/prims.h caml/stacks.h caml/mlvalues.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h
+intern.d.o: intern.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/callback.h caml/custom.h caml/fail.h caml/gc.h \
+ caml/intext.h caml/io.h caml/io.h caml/md5.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/mlvalues.h \
+ caml/misc.h caml/reverse.h
+interp.d.o: interp.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/backtrace.h caml/callback.h caml/debugger.h \
+ caml/fail.h caml/fix_code.h caml/instrtrace.h caml/instruct.h \
+ caml/interp.h caml/major_gc.h caml/freelist.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/minor_gc.h caml/misc.h caml/mlvalues.h caml/prims.h \
+ caml/signals.h caml/stacks.h caml/memory.h
+ints.d.o: ints.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/intext.h caml/io.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/misc.h caml/mlvalues.h caml/int64_native.h
+io.d.o: io.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/alloc.h caml/misc.h caml/config.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/io.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/signals.h caml/sys.h
+lexing.d.o: lexing.c caml/fail.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/mlvalues.h caml/stacks.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h
+main.d.o: main.c caml/misc.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/misc.h \
+ caml/sys.h
+major_gc.d.o: major_gc.c caml/compact.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/misc.h caml/custom.h \
+ caml/mlvalues.h caml/config.h caml/fail.h caml/finalise.h caml/roots.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/freelist.h caml/gc.h caml/gc_ctrl.h caml/major_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/weak.h
+md5.d.o: md5.c caml/alloc.h caml/compatibility.h caml/misc.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/fail.h \
+ caml/md5.h caml/io.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/mlvalues.h caml/io.h caml/reverse.h
+memory.d.o: memory.c caml/fail.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/freelist.h caml/gc.h caml/gc_ctrl.h caml/major_gc.h \
+ caml/freelist.h caml/memory.h caml/gc.h caml/major_gc.h caml/minor_gc.h \
+ caml/minor_gc.h caml/misc.h caml/mlvalues.h caml/signals.h
+meta.d.o: meta.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/config.h caml/fail.h caml/fix_code.h caml/interp.h \
+ caml/intext.h caml/io.h caml/major_gc.h caml/freelist.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/minor_gc.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/prims.h caml/stacks.h caml/memory.h
+minor_gc.d.o: minor_gc.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/fail.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/finalise.h caml/roots.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/gc.h \
+ caml/gc_ctrl.h caml/major_gc.h caml/memory.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/signals.h caml/weak.h
+misc.d.o: misc.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/misc.h caml/config.h caml/memory.h caml/gc.h \
+ caml/mlvalues.h caml/misc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h
+obj.d.o: obj.c caml/alloc.h caml/compatibility.h caml/misc.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/fail.h \
+ caml/gc.h caml/interp.h caml/major_gc.h caml/freelist.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/minor_gc.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/prims.h
+parsing.d.o: parsing.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/mlvalues.h caml/config.h \
+ caml/misc.h caml/memory.h caml/gc.h caml/mlvalues.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/alloc.h
+prims.d.o: prims.c caml/mlvalues.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/misc.h caml/prims.h
+printexc.d.o: printexc.c caml/backtrace.h caml/mlvalues.h \
+ caml/compatibility.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/misc.h caml/callback.h caml/debugger.h \
+ caml/fail.h caml/misc.h caml/mlvalues.h caml/printexc.h
+roots.d.o: roots.c caml/finalise.h caml/roots.h caml/misc.h \
+ caml/compatibility.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/memory.h caml/gc.h caml/mlvalues.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/globroots.h \
+ caml/major_gc.h caml/memory.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/stacks.h
+signals.d.o: signals.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/callback.h caml/config.h caml/fail.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/memory.h caml/signals.h \
+ caml/signals_machdep.h caml/sys.h
+signals_byt.d.o: signals_byt.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/memory.h caml/config.h \
+ caml/gc.h caml/mlvalues.h caml/misc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/osdeps.h caml/signals.h caml/signals_machdep.h
+stacks.d.o: stacks.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/fail.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/misc.h caml/mlvalues.h caml/stacks.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h
+startup.d.o: startup.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/alloc.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/backtrace.h caml/callback.h \
+ caml/custom.h caml/debugger.h caml/dynlink.h caml/exec.h caml/fail.h \
+ caml/fix_code.h caml/freelist.h caml/gc_ctrl.h caml/instrtrace.h \
+ caml/interp.h caml/intext.h caml/io.h caml/io.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/minor_gc.h \
+ caml/misc.h caml/mlvalues.h caml/osdeps.h caml/prims.h caml/printexc.h \
+ caml/reverse.h caml/signals.h caml/stacks.h caml/memory.h caml/sys.h \
+ caml/startup.h caml/exec.h caml/version.h
+str.d.o: str.c caml/alloc.h caml/compatibility.h caml/misc.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/fail.h \
+ caml/mlvalues.h caml/misc.h caml/int64_native.h
+sys.d.o: sys.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/alloc.h caml/misc.h caml/config.h \
+ caml/mlvalues.h caml/debugger.h caml/fail.h caml/instruct.h \
+ caml/mlvalues.h caml/osdeps.h caml/signals.h caml/stacks.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/sys.h
+terminfo.d.o: terminfo.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/alloc.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/fail.h caml/io.h caml/mlvalues.h
+unix.d.o: unix.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/memory.h caml/config.h caml/gc.h \
+ caml/mlvalues.h caml/misc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/misc.h caml/osdeps.h
+weak.d.o: weak.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/major_gc.h caml/freelist.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/minor_gc.h caml/mlvalues.h
+alloc.pic.o: alloc.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/major_gc.h caml/freelist.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/minor_gc.h caml/mlvalues.h \
+ caml/stacks.h caml/memory.h
+array.pic.o: array.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/misc.h caml/mlvalues.h
+backtrace.pic.o: backtrace.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/mlvalues.h caml/config.h \
+ caml/misc.h caml/alloc.h caml/mlvalues.h caml/io.h caml/instruct.h \
+ caml/intext.h caml/io.h caml/exec.h caml/fix_code.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/startup.h \
+ caml/exec.h caml/stacks.h caml/memory.h caml/sys.h caml/backtrace.h
+callback.pic.o: callback.c caml/callback.h caml/compatibility.h \
+ caml/mlvalues.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/misc.h caml/fail.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/mlvalues.h \
+ caml/interp.h caml/instruct.h caml/fix_code.h caml/stacks.h \
+ caml/memory.h
+compact.pic.o: compact.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/finalise.h caml/roots.h \
+ caml/misc.h caml/config.h caml/memory.h caml/gc.h caml/mlvalues.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/freelist.h \
+ caml/gc.h caml/gc_ctrl.h caml/major_gc.h caml/memory.h caml/mlvalues.h \
+ caml/roots.h caml/weak.h
+compare.pic.o: compare.c caml/custom.h caml/compatibility.h caml/mlvalues.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h caml/misc.h \
+ caml/fail.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/misc.h caml/mlvalues.h
+custom.pic.o: custom.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/mlvalues.h
+debugger.pic.o: debugger.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/config.h caml/debugger.h caml/misc.h caml/fail.h \
+ caml/fix_code.h caml/instruct.h caml/intext.h caml/io.h caml/io.h \
+ caml/mlvalues.h caml/stacks.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/sys.h
+dynlink.pic.o: dynlink.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/alloc.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/dynlink.h caml/fail.h caml/mlvalues.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/misc.h caml/osdeps.h caml/prims.h
+extern.pic.o: extern.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/gc.h caml/intext.h \
+ caml/io.h caml/io.h caml/md5.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/misc.h caml/mlvalues.h \
+ caml/reverse.h
+fail.pic.o: fail.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/io.h caml/gc.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/printexc.h caml/signals.h caml/stacks.h \
+ caml/memory.h
+finalise.pic.o: finalise.c caml/callback.h caml/compatibility.h \
+ caml/mlvalues.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/misc.h caml/fail.h caml/mlvalues.h \
+ caml/roots.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/signals.h
+fix_code.pic.o: fix_code.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/debugger.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/fix_code.h caml/instruct.h \
+ caml/intext.h caml/io.h caml/md5.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/reverse.h
+floats.pic.o: floats.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/mlvalues.h caml/misc.h \
+ caml/reverse.h caml/stacks.h caml/memory.h
+freelist.pic.o: freelist.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/freelist.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/gc.h caml/gc_ctrl.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/major_gc.h caml/misc.h caml/mlvalues.h
+gc_ctrl.pic.o: gc_ctrl.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/compact.h caml/custom.h caml/finalise.h \
+ caml/roots.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/freelist.h caml/gc.h caml/gc_ctrl.h caml/major_gc.h \
+ caml/minor_gc.h caml/misc.h caml/mlvalues.h caml/stacks.h
+globroots.pic.o: globroots.c caml/memory.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/gc.h caml/mlvalues.h \
+ caml/misc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/memory.h caml/globroots.h caml/roots.h
+hash.pic.o: hash.c caml/mlvalues.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/misc.h caml/custom.h \
+ caml/mlvalues.h caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/hash.h caml/int64_native.h
 instrtrace.pic.o: instrtrace.c
-intern.pic.o: intern.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h callback.h custom.h fail.h gc.h intext.h io.h \
-  md5.h memory.h major_gc.h freelist.h minor_gc.h reverse.h
-interp.pic.o: interp.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h backtrace.h callback.h debugger.h fail.h \
-  fix_code.h instrtrace.h instruct.h interp.h major_gc.h freelist.h \
-  memory.h gc.h minor_gc.h prims.h signals.h stacks.h jumptbl.h
-ints.pic.o: ints.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h custom.h fail.h intext.h io.h memory.h gc.h \
-  major_gc.h freelist.h minor_gc.h int64_native.h
-io.pic.o: io.c config.h ../config/m.h ../config/s.h compatibility.h alloc.h \
-  misc.h mlvalues.h custom.h fail.h io.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h signals.h sys.h
-lexing.pic.o: lexing.c fail.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h stacks.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h
-main.pic.o: main.c misc.h compatibility.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h sys.h
-major_gc.pic.o: major_gc.c compact.h config.h ../config/m.h ../config/s.h \
-  compatibility.h misc.h custom.h mlvalues.h fail.h finalise.h roots.h \
-  memory.h gc.h major_gc.h freelist.h minor_gc.h gc_ctrl.h weak.h
-md5.pic.o: md5.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h md5.h io.h memory.h gc.h major_gc.h \
-  freelist.h minor_gc.h reverse.h
-memory.pic.o: memory.c fail.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h freelist.h gc.h gc_ctrl.h major_gc.h memory.h \
-  minor_gc.h signals.h
-meta.pic.o: meta.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h fix_code.h interp.h intext.h io.h \
-  major_gc.h freelist.h memory.h gc.h minor_gc.h prims.h stacks.h
-minor_gc.pic.o: minor_gc.c config.h ../config/m.h ../config/s.h \
-  compatibility.h fail.h misc.h mlvalues.h finalise.h roots.h memory.h \
-  gc.h major_gc.h freelist.h minor_gc.h gc_ctrl.h signals.h weak.h
-misc.pic.o: misc.c config.h ../config/m.h ../config/s.h compatibility.h \
-  misc.h memory.h gc.h mlvalues.h major_gc.h freelist.h minor_gc.h
-obj.pic.o: obj.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h gc.h interp.h major_gc.h freelist.h \
-  memory.h minor_gc.h prims.h
-parsing.pic.o: parsing.c config.h ../config/m.h ../config/s.h compatibility.h \
-  mlvalues.h misc.h memory.h gc.h major_gc.h freelist.h minor_gc.h \
-  alloc.h
-prims.pic.o: prims.c mlvalues.h compatibility.h config.h ../config/m.h \
-  ../config/s.h misc.h prims.h
-printexc.pic.o: printexc.c backtrace.h mlvalues.h compatibility.h config.h \
-  ../config/m.h ../config/s.h misc.h callback.h debugger.h fail.h \
-  printexc.h
-roots.pic.o: roots.c finalise.h roots.h misc.h compatibility.h config.h \
-  ../config/m.h ../config/s.h memory.h gc.h mlvalues.h major_gc.h \
-  freelist.h minor_gc.h globroots.h stacks.h
-signals.pic.o: signals.c alloc.h compatibility.h misc.h config.h \
-  ../config/m.h ../config/s.h mlvalues.h callback.h fail.h memory.h gc.h \
-  major_gc.h freelist.h minor_gc.h roots.h signals.h signals_machdep.h \
-  sys.h
-signals_byt.pic.o: signals_byt.c config.h ../config/m.h ../config/s.h \
-  compatibility.h memory.h gc.h mlvalues.h misc.h major_gc.h freelist.h \
-  minor_gc.h osdeps.h signals.h signals_machdep.h
-stacks.pic.o: stacks.c config.h ../config/m.h ../config/s.h compatibility.h \
-  fail.h misc.h mlvalues.h stacks.h memory.h gc.h major_gc.h freelist.h \
-  minor_gc.h
-startup.pic.o: startup.c config.h ../config/m.h ../config/s.h compatibility.h \
-  alloc.h misc.h mlvalues.h backtrace.h callback.h custom.h debugger.h \
-  dynlink.h exec.h fail.h fix_code.h freelist.h gc_ctrl.h instrtrace.h \
-  interp.h intext.h io.h memory.h gc.h major_gc.h minor_gc.h osdeps.h \
-  prims.h printexc.h reverse.h signals.h stacks.h sys.h startup.h \
-  version.h
-str.pic.o: str.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h
-sys.pic.o: sys.c config.h ../config/m.h ../config/s.h compatibility.h alloc.h \
-  misc.h mlvalues.h debugger.h fail.h instruct.h osdeps.h signals.h \
-  stacks.h memory.h gc.h major_gc.h freelist.h minor_gc.h sys.h
-terminfo.pic.o: terminfo.c config.h ../config/m.h ../config/s.h \
-  compatibility.h alloc.h misc.h mlvalues.h fail.h io.h
-unix.pic.o: unix.c config.h ../config/m.h ../config/s.h compatibility.h \
-  memory.h gc.h mlvalues.h misc.h major_gc.h freelist.h minor_gc.h \
-  osdeps.h
-weak.pic.o: weak.c alloc.h compatibility.h misc.h config.h ../config/m.h \
-  ../config/s.h mlvalues.h fail.h major_gc.h freelist.h memory.h gc.h \
-  minor_gc.h
+intern.pic.o: intern.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/callback.h caml/custom.h caml/fail.h caml/gc.h \
+ caml/intext.h caml/io.h caml/io.h caml/md5.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/mlvalues.h \
+ caml/misc.h caml/reverse.h
+interp.pic.o: interp.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/backtrace.h caml/callback.h caml/debugger.h \
+ caml/fail.h caml/fix_code.h caml/instrtrace.h caml/instruct.h \
+ caml/interp.h caml/major_gc.h caml/freelist.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/minor_gc.h caml/misc.h caml/mlvalues.h caml/prims.h \
+ caml/signals.h caml/stacks.h caml/memory.h caml/jumptbl.h
+ints.pic.o: ints.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/intext.h caml/io.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/misc.h caml/mlvalues.h caml/int64_native.h
+io.pic.o: io.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/alloc.h caml/misc.h caml/config.h \
+ caml/mlvalues.h caml/custom.h caml/fail.h caml/io.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/signals.h caml/sys.h
+lexing.pic.o: lexing.c caml/fail.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/mlvalues.h caml/stacks.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h
+main.pic.o: main.c caml/misc.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/misc.h \
+ caml/sys.h
+major_gc.pic.o: major_gc.c caml/compact.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/misc.h caml/custom.h \
+ caml/mlvalues.h caml/config.h caml/fail.h caml/finalise.h caml/roots.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h \
+ caml/freelist.h caml/gc.h caml/gc_ctrl.h caml/major_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/weak.h
+md5.pic.o: md5.c caml/alloc.h caml/compatibility.h caml/misc.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/fail.h \
+ caml/md5.h caml/io.h caml/memory.h caml/gc.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/mlvalues.h caml/io.h caml/reverse.h
+memory.pic.o: memory.c caml/fail.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/freelist.h caml/gc.h caml/gc_ctrl.h caml/major_gc.h \
+ caml/freelist.h caml/memory.h caml/gc.h caml/major_gc.h caml/minor_gc.h \
+ caml/minor_gc.h caml/misc.h caml/mlvalues.h caml/signals.h
+meta.pic.o: meta.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/config.h caml/fail.h caml/fix_code.h caml/interp.h \
+ caml/intext.h caml/io.h caml/major_gc.h caml/freelist.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/minor_gc.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/prims.h caml/stacks.h caml/memory.h
+minor_gc.pic.o: minor_gc.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/fail.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/finalise.h caml/roots.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/gc.h \
+ caml/gc_ctrl.h caml/major_gc.h caml/memory.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/signals.h caml/weak.h
+misc.pic.o: misc.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/misc.h caml/config.h caml/memory.h caml/gc.h \
+ caml/mlvalues.h caml/misc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h
+obj.pic.o: obj.c caml/alloc.h caml/compatibility.h caml/misc.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/fail.h \
+ caml/gc.h caml/interp.h caml/major_gc.h caml/freelist.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/minor_gc.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/prims.h
+parsing.pic.o: parsing.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/mlvalues.h caml/config.h \
+ caml/misc.h caml/memory.h caml/gc.h caml/mlvalues.h caml/major_gc.h \
+ caml/freelist.h caml/minor_gc.h caml/alloc.h
+prims.pic.o: prims.c caml/mlvalues.h caml/compatibility.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/misc.h caml/prims.h
+printexc.pic.o: printexc.c caml/backtrace.h caml/mlvalues.h \
+ caml/compatibility.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/misc.h caml/callback.h caml/debugger.h \
+ caml/fail.h caml/misc.h caml/mlvalues.h caml/printexc.h
+roots.pic.o: roots.c caml/finalise.h caml/roots.h caml/misc.h \
+ caml/compatibility.h caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/memory.h caml/gc.h caml/mlvalues.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/globroots.h \
+ caml/major_gc.h caml/memory.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/stacks.h
+signals.pic.o: signals.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/callback.h caml/config.h caml/fail.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/misc.h \
+ caml/mlvalues.h caml/roots.h caml/memory.h caml/signals.h \
+ caml/signals_machdep.h caml/sys.h
+signals_byt.pic.o: signals_byt.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/memory.h caml/config.h \
+ caml/gc.h caml/mlvalues.h caml/misc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/osdeps.h caml/signals.h caml/signals_machdep.h
+stacks.pic.o: stacks.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/fail.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/misc.h caml/mlvalues.h caml/stacks.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h
+startup.pic.o: startup.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/alloc.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/backtrace.h caml/callback.h \
+ caml/custom.h caml/debugger.h caml/dynlink.h caml/exec.h caml/fail.h \
+ caml/fix_code.h caml/freelist.h caml/gc_ctrl.h caml/instrtrace.h \
+ caml/interp.h caml/intext.h caml/io.h caml/io.h caml/memory.h caml/gc.h \
+ caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/minor_gc.h \
+ caml/misc.h caml/mlvalues.h caml/osdeps.h caml/prims.h caml/printexc.h \
+ caml/reverse.h caml/signals.h caml/stacks.h caml/memory.h caml/sys.h \
+ caml/startup.h caml/exec.h caml/version.h
+str.pic.o: str.c caml/alloc.h caml/compatibility.h caml/misc.h caml/config.h \
+ caml/../../config/m.h caml/../../config/s.h caml/mlvalues.h caml/fail.h \
+ caml/mlvalues.h caml/misc.h caml/int64_native.h
+sys.pic.o: sys.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/alloc.h caml/misc.h caml/config.h \
+ caml/mlvalues.h caml/debugger.h caml/fail.h caml/instruct.h \
+ caml/mlvalues.h caml/osdeps.h caml/signals.h caml/stacks.h caml/memory.h \
+ caml/gc.h caml/major_gc.h caml/freelist.h caml/minor_gc.h caml/sys.h
+terminfo.pic.o: terminfo.c caml/config.h caml/../../config/m.h \
+ caml/../../config/s.h caml/compatibility.h caml/alloc.h caml/misc.h \
+ caml/config.h caml/mlvalues.h caml/fail.h caml/io.h caml/mlvalues.h
+unix.pic.o: unix.c caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/compatibility.h caml/memory.h caml/config.h caml/gc.h \
+ caml/mlvalues.h caml/misc.h caml/major_gc.h caml/freelist.h \
+ caml/minor_gc.h caml/misc.h caml/osdeps.h
+weak.pic.o: weak.c caml/alloc.h caml/compatibility.h caml/misc.h \
+ caml/config.h caml/../../config/m.h caml/../../config/s.h \
+ caml/mlvalues.h caml/fail.h caml/major_gc.h caml/freelist.h \
+ caml/memory.h caml/gc.h caml/major_gc.h caml/minor_gc.h caml/mlvalues.h
diff --git a/byterun/.ignore b/byterun/.ignore
index 7b178a4..7eab2b6 100644
--- a/byterun/.ignore
+++ b/byterun/.ignore
@@ -1,8 +1,8 @@
-jumptbl.h
+caml/jumptbl.h
 primitives
 prims.c
-opnames.h
-version.h
+caml/opnames.h
+caml/version.h
 ocamlrun
 ocamlrun.exe
 ocamlrund
diff --git a/byterun/Makefile b/byterun/Makefile
index bee6b5b..c047013 100644
--- a/byterun/Makefile
+++ b/byterun/Makefile
@@ -64,7 +64,7 @@ clean::
 clean::
 	rm -f *.pic.c *.d.c
 
-depend : prims.c opnames.h jumptbl.h version.h
+depend : prims.c caml/opnames.h caml/jumptbl.h caml/version.h
 	-gcc -MM $(BYTECCCOMPOPTS) *.c > .depend
 	-gcc -MM $(BYTECCCOMPOPTS) -DDEBUG *.c | sed -e 's/\.o/.d.o/' >> .depend
 	-gcc -MM $(BYTECCCOMPOPTS) *.c | sed -e 's/\.o/.pic.o/' >> .depend
diff --git a/byterun/Makefile.common b/byterun/Makefile.common
index bfc5573..1d7a3ee 100755
--- a/byterun/Makefile.common
+++ b/byterun/Makefile.common
@@ -54,7 +54,7 @@ install::
 	cd $(LIBDIR); $(RANLIB) libcamlrun.$(A)
 	if test -d $(LIBDIR)/caml; then : ; else mkdir $(LIBDIR)/caml; fi
 	for i in $(PUBLIC_INCLUDES); do \
-	  sed -f ../tools/cleanup-header $$i > $(LIBDIR)/caml/$$i; \
+	  sed -f ../tools/cleanup-header caml/$$i > $(LIBDIR)/caml/$$i; \
 	done
 	cp ld.conf $(LIBDIR)/ld.conf
 .PHONY: install
@@ -87,8 +87,8 @@ primitives : $(PRIMS)
 	rm primitives.tmp
 
 prims.c : primitives
-	(echo '#include "mlvalues.h"'; \
-	 echo '#include "prims.h"'; \
+	(echo '#include "caml/mlvalues.h"'; \
+	 echo '#include "caml/prims.h"'; \
 	 sed -e 's/.*/extern value &();/' primitives; \
 	 echo 'c_primitive caml_builtin_cprim[] = {'; \
 	 sed -e 's/.*/	&,/' primitives; \
@@ -97,23 +97,23 @@ prims.c : primitives
 	 sed -e 's/.*/	"&",/' primitives; \
 	 echo '	 0 };') > prims.c
 
-opnames.h : instruct.h
+caml/opnames.h : caml/instruct.h
 	sed -e '/\/\*/d' \
 	    -e '/^#/d' \
 	    -e 's/enum /char * names_of_/' \
 	    -e 's/{$$/[] = {/' \
-	    -e 's/\([[:upper:]][[:upper:]_0-9]*\)/"\1"/g' instruct.h > opnames.h
+	    -e 's/\([[:upper:]][[:upper:]_0-9]*\)/"\1"/g' caml/instruct.h > caml/opnames.h
 
-# jumptbl.h is required only if you have GCC 2.0 or later
-jumptbl.h : instruct.h
+# caml/jumptbl.h is required only if you have GCC 2.0 or later
+caml/jumptbl.h : caml/instruct.h
 	sed -n -e '/^  /s/ \([A-Z]\)/ \&\&lbl_\1/gp' \
-	       -e '/^}/q' instruct.h > jumptbl.h
+	       -e '/^}/q' caml/instruct.h > caml/jumptbl.h
 
-version.h : ../VERSION
-	echo "#define OCAML_VERSION \"`sed -e 1q ../VERSION`\"" > version.h
+caml/version.h : ../VERSION
+	echo "#define OCAML_VERSION \"`sed -e 1q ../VERSION`\"" > caml/version.h
 
 clean ::
 	rm -f ocamlrun$(EXE) ocamlrund$(EXE) *.$(O) *.$(A) *.$(SO)
-	rm -f primitives prims.c opnames.h jumptbl.h ld.conf
-	rm -f version.h
+	rm -f primitives prims.c caml/opnames.h caml/jumptbl.h ld.conf
+	rm -f caml/version.h
 .PHONY: clean
diff --git a/byterun/alloc.c b/byterun/alloc.c
index a1fd2f0..fe16509 100644
--- a/byterun/alloc.c
+++ b/byterun/alloc.c
@@ -17,12 +17,12 @@
 */
 
 #include <string.h>
-#include "alloc.h"
-#include "custom.h"
-#include "major_gc.h"
-#include "memory.h"
-#include "mlvalues.h"
-#include "stacks.h"
+#include "caml/alloc.h"
+#include "caml/custom.h"
+#include "caml/major_gc.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
+#include "caml/stacks.h"
 
 #define Setup_for_gc
 #define Restore_after_gc
diff --git a/byterun/alloc.h b/byterun/alloc.h
deleted file mode 100644
index a0cd41b..0000000
--- a/byterun/alloc.h
+++ /dev/null
@@ -1,53 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_ALLOC_H
-#define CAML_ALLOC_H
-
-
-#ifndef CAML_NAME_SPACE
-#include "compatibility.h"
-#endif
-#include "misc.h"
-#include "mlvalues.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-CAMLextern value caml_alloc (mlsize_t, tag_t);
-CAMLextern value caml_alloc_small (mlsize_t, tag_t);
-CAMLextern value caml_alloc_tuple (mlsize_t);
-CAMLextern value caml_alloc_string (mlsize_t);  /* size in bytes */
-CAMLextern value caml_copy_string (char const *);
-CAMLextern value caml_copy_string_array (char const **);
-CAMLextern value caml_copy_double (double);
-CAMLextern value caml_copy_int32 (int32);       /* defined in [ints.c] */
-CAMLextern value caml_copy_int64 (int64);       /* defined in [ints.c] */
-CAMLextern value caml_copy_nativeint (intnat);  /* defined in [ints.c] */
-CAMLextern value caml_alloc_array (value (*funct) (char const *),
-                                   char const ** array);
-
-typedef void (*final_fun)(value);
-CAMLextern value caml_alloc_final (mlsize_t, /*size in words*/
-                                   final_fun, /*finalization function*/
-                                   mlsize_t, /*resources consumed*/
-                                   mlsize_t  /*max resources*/);
-
-CAMLextern int caml_convert_flag_list (value, int *);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* CAML_ALLOC_H */
diff --git a/byterun/array.c b/byterun/array.c
index c9d991e..e4cb9c9 100644
--- a/byterun/array.c
+++ b/byterun/array.c
@@ -14,11 +14,11 @@
 /* Operations on arrays */
 
 #include <string.h>
-#include "alloc.h"
-#include "fail.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
+#include "caml/alloc.h"
+#include "caml/fail.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
 
 CAMLexport mlsize_t caml_array_length(value array)
 {
diff --git a/byterun/backtrace.c b/byterun/backtrace.c
index ef7ca62..1b46aa0 100644
--- a/byterun/backtrace.c
+++ b/byterun/backtrace.c
@@ -16,22 +16,22 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <fcntl.h>
-#include "config.h"
+#include "caml/config.h"
 #ifdef HAS_UNISTD
 #include <unistd.h>
 #endif
-#include "mlvalues.h"
-#include "alloc.h"
-#include "io.h"
-#include "instruct.h"
-#include "intext.h"
-#include "exec.h"
-#include "fix_code.h"
-#include "memory.h"
-#include "startup.h"
-#include "stacks.h"
-#include "sys.h"
-#include "backtrace.h"
+#include "caml/mlvalues.h"
+#include "caml/alloc.h"
+#include "caml/io.h"
+#include "caml/instruct.h"
+#include "caml/intext.h"
+#include "caml/exec.h"
+#include "caml/fix_code.h"
+#include "caml/memory.h"
+#include "caml/startup.h"
+#include "caml/stacks.h"
+#include "caml/sys.h"
+#include "caml/backtrace.h"
 
 CAMLexport int caml_backtrace_active = 0;
 CAMLexport int caml_backtrace_pos = 0;
diff --git a/byterun/backtrace.h b/byterun/backtrace.h
deleted file mode 100644
index 158ca28..0000000
--- a/byterun/backtrace.h
+++ /dev/null
@@ -1,31 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2001 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_BACKTRACE_H
-#define CAML_BACKTRACE_H
-
-#include "mlvalues.h"
-
-CAMLextern int caml_backtrace_active;
-CAMLextern int caml_backtrace_pos;
-CAMLextern code_t * caml_backtrace_buffer;
-CAMLextern value caml_backtrace_last_exn;
-CAMLextern char * caml_cds_file;
-
-CAMLprim value caml_record_backtrace(value vflag);
-#ifndef NATIVE_CODE
-extern void caml_stash_backtrace(value exn, code_t pc, value * sp);
-#endif
-CAMLextern void caml_print_exception_backtrace(void);
-
-#endif /* CAML_BACKTRACE_H */
diff --git a/byterun/callback.c b/byterun/callback.c
index 3bd7ea4..5d6ddea 100644
--- a/byterun/callback.c
+++ b/byterun/callback.c
@@ -14,19 +14,19 @@
 /* Callbacks from C to OCaml */
 
 #include <string.h>
-#include "callback.h"
-#include "fail.h"
-#include "memory.h"
-#include "mlvalues.h"
+#include "caml/callback.h"
+#include "caml/fail.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
 
 #ifndef NATIVE_CODE
 
 /* Bytecode callbacks */
 
-#include "interp.h"
-#include "instruct.h"
-#include "fix_code.h"
-#include "stacks.h"
+#include "caml/interp.h"
+#include "caml/instruct.h"
+#include "caml/fix_code.h"
+#include "caml/stacks.h"
 
 CAMLexport int caml_callback_depth = 0;
 
diff --git a/byterun/callback.h b/byterun/callback.h
deleted file mode 100644
index ded0b98..0000000
--- a/byterun/callback.h
+++ /dev/null
@@ -1,55 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Callbacks from C to OCaml */
-
-#ifndef CAML_CALLBACK_H
-#define CAML_CALLBACK_H
-
-#ifndef CAML_NAME_SPACE
-#include "compatibility.h"
-#endif
-#include "mlvalues.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-CAMLextern value caml_callback (value closure, value arg);
-CAMLextern value caml_callback2 (value closure, value arg1, value arg2);
-CAMLextern value caml_callback3 (value closure, value arg1, value arg2,
-                                 value arg3);
-CAMLextern value caml_callbackN (value closure, int narg, value args[]);
-
-CAMLextern value caml_callback_exn (value closure, value arg);
-CAMLextern value caml_callback2_exn (value closure, value arg1, value arg2);
-CAMLextern value caml_callback3_exn (value closure,
-                                     value arg1, value arg2, value arg3);
-CAMLextern value caml_callbackN_exn (value closure, int narg, value args[]);
-
-#define Make_exception_result(v) ((v) | 2)
-#define Is_exception_result(v) (((v) & 3) == 2)
-#define Extract_exception(v) ((v) & ~3)
-
-CAMLextern value * caml_named_value (char const * name);
-
-CAMLextern void caml_main (char ** argv);
-CAMLextern void caml_startup (char ** argv);
-
-CAMLextern int caml_callback_depth;
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif
diff --git a/byterun/caml/alloc.h b/byterun/caml/alloc.h
new file mode 100644
index 0000000..a0cd41b
--- /dev/null
+++ b/byterun/caml/alloc.h
@@ -0,0 +1,53 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_ALLOC_H
+#define CAML_ALLOC_H
+
+
+#ifndef CAML_NAME_SPACE
+#include "compatibility.h"
+#endif
+#include "misc.h"
+#include "mlvalues.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+CAMLextern value caml_alloc (mlsize_t, tag_t);
+CAMLextern value caml_alloc_small (mlsize_t, tag_t);
+CAMLextern value caml_alloc_tuple (mlsize_t);
+CAMLextern value caml_alloc_string (mlsize_t);  /* size in bytes */
+CAMLextern value caml_copy_string (char const *);
+CAMLextern value caml_copy_string_array (char const **);
+CAMLextern value caml_copy_double (double);
+CAMLextern value caml_copy_int32 (int32);       /* defined in [ints.c] */
+CAMLextern value caml_copy_int64 (int64);       /* defined in [ints.c] */
+CAMLextern value caml_copy_nativeint (intnat);  /* defined in [ints.c] */
+CAMLextern value caml_alloc_array (value (*funct) (char const *),
+                                   char const ** array);
+
+typedef void (*final_fun)(value);
+CAMLextern value caml_alloc_final (mlsize_t, /*size in words*/
+                                   final_fun, /*finalization function*/
+                                   mlsize_t, /*resources consumed*/
+                                   mlsize_t  /*max resources*/);
+
+CAMLextern int caml_convert_flag_list (value, int *);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* CAML_ALLOC_H */
diff --git a/byterun/caml/backtrace.h b/byterun/caml/backtrace.h
new file mode 100644
index 0000000..158ca28
--- /dev/null
+++ b/byterun/caml/backtrace.h
@@ -0,0 +1,31 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2001 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_BACKTRACE_H
+#define CAML_BACKTRACE_H
+
+#include "mlvalues.h"
+
+CAMLextern int caml_backtrace_active;
+CAMLextern int caml_backtrace_pos;
+CAMLextern code_t * caml_backtrace_buffer;
+CAMLextern value caml_backtrace_last_exn;
+CAMLextern char * caml_cds_file;
+
+CAMLprim value caml_record_backtrace(value vflag);
+#ifndef NATIVE_CODE
+extern void caml_stash_backtrace(value exn, code_t pc, value * sp);
+#endif
+CAMLextern void caml_print_exception_backtrace(void);
+
+#endif /* CAML_BACKTRACE_H */
diff --git a/byterun/caml/callback.h b/byterun/caml/callback.h
new file mode 100644
index 0000000..ded0b98
--- /dev/null
+++ b/byterun/caml/callback.h
@@ -0,0 +1,55 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Callbacks from C to OCaml */
+
+#ifndef CAML_CALLBACK_H
+#define CAML_CALLBACK_H
+
+#ifndef CAML_NAME_SPACE
+#include "compatibility.h"
+#endif
+#include "mlvalues.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+CAMLextern value caml_callback (value closure, value arg);
+CAMLextern value caml_callback2 (value closure, value arg1, value arg2);
+CAMLextern value caml_callback3 (value closure, value arg1, value arg2,
+                                 value arg3);
+CAMLextern value caml_callbackN (value closure, int narg, value args[]);
+
+CAMLextern value caml_callback_exn (value closure, value arg);
+CAMLextern value caml_callback2_exn (value closure, value arg1, value arg2);
+CAMLextern value caml_callback3_exn (value closure,
+                                     value arg1, value arg2, value arg3);
+CAMLextern value caml_callbackN_exn (value closure, int narg, value args[]);
+
+#define Make_exception_result(v) ((v) | 2)
+#define Is_exception_result(v) (((v) & 3) == 2)
+#define Extract_exception(v) ((v) & ~3)
+
+CAMLextern value * caml_named_value (char const * name);
+
+CAMLextern void caml_main (char ** argv);
+CAMLextern void caml_startup (char ** argv);
+
+CAMLextern int caml_callback_depth;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/byterun/caml/compact.h b/byterun/caml/compact.h
new file mode 100644
index 0000000..2abac16
--- /dev/null
+++ b/byterun/caml/compact.h
@@ -0,0 +1,25 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_COMPACT_H
+#define CAML_COMPACT_H
+
+
+#include "config.h"
+#include "misc.h"
+
+extern void caml_compact_heap (void);
+extern void caml_compact_heap_maybe (void);
+
+
+#endif /* CAML_COMPACT_H */
diff --git a/byterun/caml/compare.h b/byterun/caml/compare.h
new file mode 100644
index 0000000..41d6a0c
--- /dev/null
+++ b/byterun/caml/compare.h
@@ -0,0 +1,19 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*          Damien Doligez, Projet Moscova, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2003 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_COMPARE_H
+#define CAML_COMPARE_H
+
+CAMLextern int caml_compare_unordered;
+
+#endif /* CAML_COMPARE_H */
diff --git a/byterun/caml/compatibility.h b/byterun/caml/compatibility.h
new file mode 100644
index 0000000..58bf283
--- /dev/null
+++ b/byterun/caml/compatibility.h
@@ -0,0 +1,370 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*          Damien Doligez, projet Moscova, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2003 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* definitions for compatibility with old identifiers */
+
+#ifndef CAML_COMPATIBILITY_H
+#define CAML_COMPATIBILITY_H
+
+#ifndef CAML_NAME_SPACE
+
+/*
+   #define --> CAMLextern  (defined with CAMLexport or CAMLprim)
+   (rien)  --> CAMLprim
+   g       --> global C identifier
+   x       --> special case
+
+   SP* signals the special cases:
+   - when the identifier was not simply prefixed with [caml_]
+   - when the [caml_] version was already used for something else, and
+     was renamed out of the way (watch out for [caml_alloc] and
+     [caml_array_bound_error] in *.s)
+*/
+
+/* a faire:
+   - ui_*   (reverifier que win32.c n'en depend pas)
+*/
+
+
+/* **** alloc.c */
+#define alloc caml_alloc /*SP*/
+#define alloc_small caml_alloc_small
+#define alloc_tuple caml_alloc_tuple
+#define alloc_string caml_alloc_string
+#define alloc_final caml_alloc_final
+#define copy_string caml_copy_string
+#define alloc_array caml_alloc_array
+#define copy_string_array caml_copy_string_array
+#define convert_flag_list caml_convert_flag_list
+
+/* **** array.c */
+
+/* **** backtrace.c */
+#define backtrace_active caml_backtrace_active
+#define backtrace_pos caml_backtrace_pos
+#define backtrace_buffer caml_backtrace_buffer
+#define backtrace_last_exn caml_backtrace_last_exn
+#define print_exception_backtrace caml_print_exception_backtrace
+
+/* **** callback.c */
+#define callback_depth caml_callback_depth
+#define callbackN_exn caml_callbackN_exn
+#define callback_exn caml_callback_exn
+#define callback2_exn caml_callback2_exn
+#define callback3_exn caml_callback3_exn
+#define callback caml_callback
+#define callback2 caml_callback2
+#define callback3 caml_callback3
+#define callbackN caml_callbackN
+
+/* **** compact.c */
+
+/* **** compare.c */
+#define compare_unordered caml_compare_unordered
+
+/* **** custom.c */
+#define alloc_custom caml_alloc_custom
+#define register_custom_operations caml_register_custom_operations
+
+/* **** debugger.c */
+
+/* **** dynlink.c */
+
+/* **** extern.c */
+#define output_val caml_output_val
+#define output_value_to_malloc caml_output_value_to_malloc
+#define output_value_to_block caml_output_value_to_block
+#define serialize_int_1 caml_serialize_int_1
+#define serialize_int_2 caml_serialize_int_2
+#define serialize_int_4 caml_serialize_int_4
+#define serialize_int_8 caml_serialize_int_8
+#define serialize_float_4 caml_serialize_float_4
+#define serialize_float_8 caml_serialize_float_8
+#define serialize_block_1 caml_serialize_block_1
+#define serialize_block_2 caml_serialize_block_2
+#define serialize_block_4 caml_serialize_block_4
+#define serialize_block_8 caml_serialize_block_8
+#define serialize_block_float_8 caml_serialize_block_float_8
+
+/* **** fail.c */
+#define external_raise caml_external_raise
+#define mlraise caml_raise /*SP*/
+#define raise_constant caml_raise_constant
+#define raise_with_arg caml_raise_with_arg
+#define raise_with_string caml_raise_with_string
+#define failwith caml_failwith
+#define invalid_argument caml_invalid_argument
+#define array_bound_error caml_array_bound_error /*SP*/
+#define raise_out_of_memory caml_raise_out_of_memory
+#define raise_stack_overflow caml_raise_stack_overflow
+#define raise_sys_error caml_raise_sys_error
+#define raise_end_of_file caml_raise_end_of_file
+#define raise_zero_divide caml_raise_zero_divide
+#define raise_not_found caml_raise_not_found
+#define raise_sys_blocked_io caml_raise_sys_blocked_io
+#define init_exceptions caml_init_exceptions
+/* **** asmrun/fail.c */
+/* **** asmrun/<arch>.s */
+
+/* **** finalise.c */
+
+/* **** fix_code.c */
+
+/* **** floats.c */
+/*#define Double_val caml_Double_val             done in mlvalues.h as needed */
+/*#define Store_double_val caml_Store_double_val done in mlvalues.h as needed */
+#define copy_double caml_copy_double
+
+/* **** freelist.c */
+
+/* **** gc_ctrl.c */
+
+/* **** globroots.c */
+#define register_global_root caml_register_global_root
+#define remove_global_root caml_remove_global_root
+
+/* **** hash.c */
+#define hash_variant caml_hash_variant
+
+/* **** instrtrace.c */
+
+/* **** intern.c */
+#define input_val caml_input_val
+#define input_val_from_string caml_input_val_from_string
+#define input_value_from_malloc caml_input_value_from_malloc
+#define input_value_from_block caml_input_value_from_block
+#define deserialize_uint_1 caml_deserialize_uint_1
+#define deserialize_sint_1 caml_deserialize_sint_1
+#define deserialize_uint_2 caml_deserialize_uint_2
+#define deserialize_sint_2 caml_deserialize_sint_2
+#define deserialize_uint_4 caml_deserialize_uint_4
+#define deserialize_sint_4 caml_deserialize_sint_4
+#define deserialize_uint_8 caml_deserialize_uint_8
+#define deserialize_sint_8 caml_deserialize_sint_8
+#define deserialize_float_4 caml_deserialize_float_4
+#define deserialize_float_8 caml_deserialize_float_8
+#define deserialize_block_1 caml_deserialize_block_1
+#define deserialize_block_2 caml_deserialize_block_2
+#define deserialize_block_4 caml_deserialize_block_4
+#define deserialize_block_8 caml_deserialize_block_8
+#define deserialize_block_float_8 caml_deserialize_block_float_8
+#define deserialize_error caml_deserialize_error
+
+/* **** interp.c */
+
+/* **** ints.c */
+#define int32_ops caml_int32_ops
+#define copy_int32 caml_copy_int32
+/*#define Int64_val caml_Int64_val   *** done in mlvalues.h as needed */
+#define int64_ops caml_int64_ops
+#define copy_int64 caml_copy_int64
+#define nativeint_ops caml_nativeint_ops
+#define copy_nativeint caml_copy_nativeint
+
+/* **** io.c */
+#define channel_mutex_free caml_channel_mutex_free
+#define channel_mutex_lock caml_channel_mutex_lock
+#define channel_mutex_unlock caml_channel_mutex_unlock
+#define channel_mutex_unlock_exn caml_channel_mutex_unlock_exn
+#define all_opened_channels caml_all_opened_channels
+#define open_descriptor_in caml_open_descriptor_in /*SP*/
+#define open_descriptor_out caml_open_descriptor_out /*SP*/
+#define close_channel caml_close_channel /*SP*/
+#define channel_size caml_channel_size /*SP*/
+#define channel_binary_mode caml_channel_binary_mode
+#define flush_partial caml_flush_partial /*SP*/
+#define flush caml_flush /*SP*/
+#define putword caml_putword
+#define putblock caml_putblock
+#define really_putblock caml_really_putblock
+#define seek_out caml_seek_out /*SP*/
+#define pos_out caml_pos_out /*SP*/
+#define do_read caml_do_read
+#define refill caml_refill
+#define getword caml_getword
+#define getblock caml_getblock
+#define really_getblock caml_really_getblock
+#define seek_in caml_seek_in /*SP*/
+#define pos_in caml_pos_in /*SP*/
+#define input_scan_line caml_input_scan_line /*SP*/
+#define finalize_channel caml_finalize_channel
+#define alloc_channel caml_alloc_channel
+/*#define Val_file_offset caml_Val_file_offset   *** done in io.h as needed */
+/*#define File_offset_val caml_File_offset_val   *** done in io.h as needed */
+
+/* **** lexing.c */
+
+/* **** main.c */
+/* *** no change */
+
+/* **** major_gc.c */
+#define heap_start caml_heap_start
+#define page_table caml_page_table
+
+/* **** md5.c */
+#define md5_string caml_md5_string
+#define md5_chan caml_md5_chan
+#define MD5Init caml_MD5Init
+#define MD5Update caml_MD5Update
+#define MD5Final caml_MD5Final
+#define MD5Transform caml_MD5Transform
+
+/* **** memory.c */
+#define alloc_shr caml_alloc_shr
+#define initialize caml_initialize
+#define modify caml_modify
+#define stat_alloc caml_stat_alloc
+#define stat_free caml_stat_free
+#define stat_resize caml_stat_resize
+
+/* **** meta.c */
+
+/* **** minor_gc.c */
+#define young_start caml_young_start
+#define young_end caml_young_end
+#define young_ptr caml_young_ptr
+#define young_limit caml_young_limit
+#define ref_table caml_ref_table
+#define minor_collection caml_minor_collection
+#define check_urgent_gc caml_check_urgent_gc
+
+/* **** misc.c */
+
+/* **** obj.c */
+
+/* **** parsing.c */
+
+/* **** prims.c */
+
+/* **** printexc.c */
+#define format_caml_exception caml_format_exception /*SP*/
+
+/* **** roots.c */
+#define local_roots caml_local_roots
+#define scan_roots_hook caml_scan_roots_hook
+#define do_local_roots caml_do_local_roots
+
+/* **** signals.c */
+#define pending_signals caml_pending_signals
+#define something_to_do caml_something_to_do
+#define enter_blocking_section_hook caml_enter_blocking_section_hook
+#define leave_blocking_section_hook caml_leave_blocking_section_hook
+#define try_leave_blocking_section_hook caml_try_leave_blocking_section_hook
+#define async_action_hook caml_async_action_hook
+#define enter_blocking_section caml_enter_blocking_section
+#define leave_blocking_section caml_leave_blocking_section
+#define convert_signal_number caml_convert_signal_number
+/* **** asmrun/signals.c */
+#define garbage_collection caml_garbage_collection
+
+/* **** stacks.c */
+#define stack_low caml_stack_low
+#define stack_high caml_stack_high
+#define stack_threshold caml_stack_threshold
+#define extern_sp caml_extern_sp
+#define trapsp caml_trapsp
+#define trap_barrier caml_trap_barrier
+
+/* **** startup.c */
+#define atom_table caml_atom_table
+/* **** asmrun/startup.c */
+#define static_data_start caml_static_data_start
+#define static_data_end caml_static_data_end
+
+/* **** str.c */
+#define string_length caml_string_length
+
+/* **** sys.c */
+#define sys_error caml_sys_error
+#define sys_exit caml_sys_exit
+
+/* **** terminfo.c */
+
+/* **** unix.c  &  win32.c */
+#define search_exe_in_path caml_search_exe_in_path
+
+/* **** weak.c */
+
+/* **** asmcomp/asmlink.ml */
+
+/* **** asmcomp/cmmgen.ml */
+
+/* **** asmcomp/asmlink.ml, asmcomp/cmmgen.ml, asmcomp/compilenv.ml */
+
+/* ************************************************************* */
+
+/* **** otherlibs/bigarray */
+#define int8 caml_ba_int8
+#define uint8 caml_ba_uint8
+#define int16 caml_ba_int16
+#define uint16 caml_ba_uint16
+#define MAX_NUM_DIMS CAML_BA_MAX_NUM_DIMS
+#define caml_bigarray_kind caml_ba_kind
+#define BIGARRAY_FLOAT32 CAML_BA_FLOAT32
+#define BIGARRAY_FLOAT64 CAML_BA_FLOAT64
+#define BIGARRAY_SINT8 CAML_BA_SINT8
+#define BIGARRAY_UINT8 CAML_BA_UINT8
+#define BIGARRAY_SINT16 CAML_BA_SINT16
+#define BIGARRAY_UINT16 CAML_BA_UINT16
+#define BIGARRAY_INT32 CAML_BA_INT32
+#define BIGARRAY_INT64 CAML_BA_INT64
+#define BIGARRAY_CAML_INT CAML_BA_CAML_INT
+#define BIGARRAY_NATIVE_INT CAML_BA_NATIVE_INT
+#define BIGARRAY_COMPLEX32 CAML_BA_COMPLEX32
+#define BIGARRAY_COMPLEX64 CAML_BA_COMPLEX64
+#define BIGARRAY_KIND_MASK CAML_BA_KIND_MASK
+#define caml_bigarray_layout caml_ba_layout
+#define BIGARRAY_C_LAYOUT CAML_BA_C_LAYOUT
+#define BIGARRAY_FORTRAN_LAYOUT CAML_BA_FORTRAN_LAYOUT
+#define BIGARRAY_LAYOUT_MASK CAML_BA_LAYOUT_MASK
+#define caml_bigarray_managed caml_ba_managed
+#define BIGARRAY_EXTERNAL CAML_BA_EXTERNAL
+#define BIGARRAY_MANAGED CAML_BA_MANAGED
+#define BIGARRAY_MAPPED_FILE CAML_BA_MAPPED_FILE
+#define BIGARRAY_MANAGED_MASK CAML_BA_MANAGED_MASK
+#define caml_bigarray_proxy caml_ba_proxy
+#define caml_bigarray caml_ba_array
+#define Bigarray_val Caml_ba_array_val
+#define Data_bigarray_val Caml_ba_data_val
+#define alloc_bigarray caml_ba_alloc
+#define alloc_bigarray_dims caml_ba_alloc_dims
+#define bigarray_map_file caml_ba_map_file
+#define bigarray_unmap_file caml_ba_unmap_file
+#define bigarray_element_size caml_ba_element_size
+#define bigarray_byte_size caml_ba_byte_size
+#define bigarray_deserialize caml_ba_deserialize
+#define MAX_BIGARRAY_MEMORY CAML_BA_MAX_MEMORY
+#define bigarray_create caml_ba_create
+#define bigarray_get_N caml_ba_get_N
+#define bigarray_get_1 caml_ba_get_1
+#define bigarray_get_2 caml_ba_get_2
+#define bigarray_get_3 caml_ba_get_3
+#define bigarray_get_generic caml_ba_get_generic
+#define bigarray_set_1 caml_ba_set_1
+#define bigarray_set_2 caml_ba_set_2
+#define bigarray_set_3 caml_ba_set_3
+#define bigarray_set_N caml_ba_set_N
+#define bigarray_set_generic caml_ba_set_generic
+#define bigarray_num_dims caml_ba_num_dims
+#define bigarray_dim caml_ba_dim
+#define bigarray_kind caml_ba_kind
+#define bigarray_layout caml_ba_layout
+#define bigarray_slice caml_ba_slice
+#define bigarray_sub caml_ba_sub
+#define bigarray_blit caml_ba_blit
+#define bigarray_fill caml_ba_fill
+#define bigarray_reshape caml_ba_reshape
+#define bigarray_init caml_ba_init
+
+#endif /* CAML_NAME_SPACE */
+#endif /* CAML_COMPATIBILITY_H */
diff --git a/byterun/caml/config.h b/byterun/caml/config.h
new file mode 100644
index 0000000..e8ba451
--- /dev/null
+++ b/byterun/caml/config.h
@@ -0,0 +1,166 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_CONFIG_H
+#define CAML_CONFIG_H
+
+/* <include ../../config/m.h> */
+/* <include ../../config/s.h> */
+/* <private> */
+#include "../../config/m.h"
+#include "../../config/s.h"
+/* </private> */
+
+#ifndef CAML_NAME_SPACE
+#include "compatibility.h"
+#endif
+
+/* Types for signed chars, 32-bit integers, 64-bit integers,
+   native integers (as wide as a pointer type) */
+
+typedef signed char schar;
+
+#if SIZEOF_PTR == SIZEOF_LONG
+/* Standard models: ILP32 or I32LP64 */
+typedef long intnat;
+typedef unsigned long uintnat;
+#define ARCH_INTNAT_PRINTF_FORMAT "l"
+#elif SIZEOF_PTR == SIZEOF_INT
+/* Hypothetical IP32L64 model */
+typedef int intnat;
+typedef unsigned int uintnat;
+#define ARCH_INTNAT_PRINTF_FORMAT ""
+#elif SIZEOF_PTR == 8 && defined(ARCH_INT64_TYPE)
+/* Win64 model: IL32LLP64 */
+typedef ARCH_INT64_TYPE intnat;
+typedef ARCH_UINT64_TYPE uintnat;
+#define ARCH_INTNAT_PRINTF_FORMAT ARCH_INT64_PRINTF_FORMAT
+#else
+#error "No integer type available to represent pointers"
+#endif
+
+#if SIZEOF_INT == 4
+typedef int int32;
+typedef unsigned int uint32;
+#define ARCH_INT32_PRINTF_FORMAT ""
+#elif SIZEOF_LONG == 4
+typedef long int32;
+typedef unsigned long uint32;
+#define ARCH_INT32_PRINTF_FORMAT "l"
+#elif SIZEOF_SHORT == 4
+typedef short int32;
+typedef unsigned short uint32;
+#define ARCH_INT32_PRINTF_FORMAT ""
+#else
+#error "No 32-bit integer type available"
+#endif
+
+#if defined(ARCH_INT64_TYPE)
+typedef ARCH_INT64_TYPE int64;
+typedef ARCH_UINT64_TYPE uint64;
+#else
+#  ifdef ARCH_BIG_ENDIAN
+typedef struct { uint32 h, l; } uint64, int64;
+#  else
+typedef struct { uint32 l, h; } uint64, int64;
+#  endif
+#endif
+
+/* Endianness of floats */
+
+/* ARCH_FLOAT_ENDIANNESS encodes the byte order of doubles as follows:
+   the value [0xabcdefgh] means that the least significant byte of the
+   float is at byte offset [a], the next lsb at [b], ..., and the
+   most significant byte at [h]. */
+
+#if defined(__arm__) && !defined(__ARM_EABI__)
+#define ARCH_FLOAT_ENDIANNESS 0x45670123
+#elif defined(ARCH_BIG_ENDIAN)
+#define ARCH_FLOAT_ENDIANNESS 0x76543210
+#else
+#define ARCH_FLOAT_ENDIANNESS 0x01234567
+#endif
+
+/* We use threaded code interpretation if the compiler provides labels
+   as first-class values (GCC 2.x). */
+
+#if defined(__GNUC__) && __GNUC__ >= 2 && !defined(DEBUG) && !defined (SHRINKED_GNUC) && !defined(CAML_JIT)
+#define THREADED_CODE
+#endif
+
+
+/* Do not change this definition. */
+#define Page_size (1 << Page_log)
+
+/* Memory model parameters */
+
+/* The size of a page for memory management (in bytes) is [1 << Page_log].
+   It must be a multiple of [sizeof (value)] and >= 8 and <= 20. */
+#define Page_log 12             /* A page is 4 kilobytes. */
+
+/* Initial size of stack (bytes). */
+#define Stack_size (4096 * sizeof(value))
+
+/* Minimum free size of stack (bytes); below that, it is reallocated. */
+#define Stack_threshold (256 * sizeof(value))
+
+/* Default maximum size of the stack (words). */
+#define Max_stack_def (1024 * 1024)
+
+
+/* Maximum size of a block allocated in the young generation (words). */
+/* Must be > 4 */
+#define Max_young_wosize 256
+
+
+/* Minimum size of the minor zone (words).
+   This must be at least [Max_young_wosize + 1]. */
+#define Minor_heap_min 4096
+
+/* Maximum size of the minor zone (words).
+   Must be greater than or equal to [Minor_heap_min].
+*/
+#define Minor_heap_max (1 << 28)
+
+/* Default size of the minor zone. (words)  */
+#define Minor_heap_def 262144
+
+
+/* Minimum size increment when growing the heap (words).
+   Must be a multiple of [Page_size / sizeof (value)]. */
+#define Heap_chunk_min (2 * Page_size / sizeof (value))
+
+/* Default size increment when growing the heap. (words)
+   Must be a multiple of [Page_size / sizeof (value)].
+   (Approx 512 Kb for a 32-bit platform, 1 Mb for a 64-bit platform.) */
+#define Heap_chunk_def (31 * Page_size)
+
+/* Default initial size of the major heap (words);
+   same constraints as for Heap_chunk_def. */
+#define Init_heap_def (31 * Page_size)
+
+
+/* Default speed setting for the major GC.  The heap will grow until
+   the dead objects and the free list represent this percentage of the
+   total size of live objects. */
+#define Percent_free_def 80
+
+/* Default setting for the compacter: 500%
+   (i.e. trigger the compacter when 5/6 of the heap is free or garbage)
+   This can be set quite high because the overhead is over-estimated
+   when fragmentation occurs.
+ */
+#define Max_percent_free_def 500
+
+
+#endif /* CAML_CONFIG_H */
diff --git a/byterun/caml/custom.h b/byterun/caml/custom.h
new file mode 100644
index 0000000..ff3cd89
--- /dev/null
+++ b/byterun/caml/custom.h
@@ -0,0 +1,71 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*         Manuel Serrano and Xavier Leroy, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2000 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_CUSTOM_H
+#define CAML_CUSTOM_H
+
+
+#ifndef CAML_NAME_SPACE
+#include "compatibility.h"
+#endif
+#include "mlvalues.h"
+
+struct custom_operations {
+  char *identifier;
+  void (*finalize)(value v);
+  int (*compare)(value v1, value v2);
+  intnat (*hash)(value v);
+  void (*serialize)(value v,
+                    /*out*/ uintnat * wsize_32 /*size in bytes*/,
+                    /*out*/ uintnat * wsize_64 /*size in bytes*/);
+  uintnat (*deserialize)(void * dst);
+  int (*compare_ext)(value v1, value v2);
+};
+
+#define custom_finalize_default NULL
+#define custom_compare_default NULL
+#define custom_hash_default NULL
+#define custom_serialize_default NULL
+#define custom_deserialize_default NULL
+#define custom_compare_ext_default NULL
+
+#define Custom_ops_val(v) (*((struct custom_operations **) (v)))
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+CAMLextern value caml_alloc_custom(struct custom_operations * ops,
+                                   uintnat size, /*size in bytes*/
+                                   mlsize_t mem, /*resources consumed*/
+                                   mlsize_t max  /*max resources*/);
+
+CAMLextern void caml_register_custom_operations(struct custom_operations * ops);
+
+CAMLextern int caml_compare_unordered;
+  /* Used by custom comparison to report unordered NaN-like cases. */
+
+/* <private> */
+extern struct custom_operations * caml_find_custom_operations(char * ident);
+extern struct custom_operations *
+          caml_final_custom_operations(void (*fn)(value));
+
+extern void caml_init_custom_operations(void);
+/* </private> */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* CAML_CUSTOM_H */
diff --git a/byterun/caml/debugger.h b/byterun/caml/debugger.h
new file mode 100644
index 0000000..b5079eb
--- /dev/null
+++ b/byterun/caml/debugger.h
@@ -0,0 +1,111 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Interface with the debugger */
+
+#ifndef CAML_DEBUGGER_H
+#define CAML_DEBUGGER_H
+
+#include "misc.h"
+#include "mlvalues.h"
+
+CAMLextern int caml_debugger_in_use;
+CAMLextern int caml_debugger_fork_mode; /* non-zero for parent */
+extern uintnat caml_event_count;
+
+enum event_kind {
+  EVENT_COUNT, BREAKPOINT, PROGRAM_START, PROGRAM_EXIT,
+  TRAP_BARRIER, UNCAUGHT_EXC
+};
+
+void caml_debugger_init (void);
+void caml_debugger (enum event_kind event);
+void caml_debugger_cleanup_fork (void);
+
+/* Communication protocol */
+
+/* Requests from the debugger to the runtime system */
+
+enum debugger_request {
+  REQ_SET_EVENT = 'e',          /* uint32 pos */
+  /* Set an event on the instruction at position pos */
+  REQ_SET_BREAKPOINT = 'B',     /* uint32 pos, (char k) */
+  /* Set a breakpoint at position pos */
+  /* In profiling mode, the breakpoint kind is set to k */
+  REQ_RESET_INSTR = 'i',        /* uint32 pos */
+  /* Clear an event or breapoint at position pos, restores initial instr. */
+  REQ_CHECKPOINT = 'c',         /* no args */
+  /* Checkpoint the runtime system by forking a child process.
+     Reply is pid of child process or -1 if checkpoint failed. */
+  REQ_GO = 'g',                 /* uint32 n */
+  /* Run the program for n events.
+     Reply is one of debugger_reply described below. */
+  REQ_STOP = 's',               /* no args */
+  /* Terminate the runtime system */
+  REQ_WAIT = 'w',               /* no args */
+  /* Reap one dead child (a discarded checkpoint). */
+  REQ_INITIAL_FRAME = '0',      /* no args */
+  /* Set current frame to bottom frame (the one currently executing).
+     Reply is stack offset and current pc. */
+  REQ_GET_FRAME = 'f',          /* no args */
+  /* Return current frame location (stack offset + current pc). */
+  REQ_SET_FRAME = 'S',          /* uint32 stack_offset */
+  /* Set current frame to given stack offset. No reply. */
+  REQ_UP_FRAME = 'U',           /* uint32 n */
+  /* Move one frame up. Argument n is size of current frame (in words).
+     Reply is stack offset and current pc, or -1 if top of stack reached. */
+  REQ_SET_TRAP_BARRIER = 'b',   /* uint32 offset */
+  /* Set the trap barrier at the given offset. */
+  REQ_GET_LOCAL = 'L',          /* uint32 slot_number */
+  /* Return the local variable at the given slot in the current frame.
+     Reply is one value. */
+  REQ_GET_ENVIRONMENT = 'E',    /* uint32 slot_number */
+  /* Return the local variable at the given slot in the heap environment
+     of the current frame. Reply is one value. */
+  REQ_GET_GLOBAL = 'G',         /* uint32 global_number */
+  /* Return the specified global variable. Reply is one value. */
+  REQ_GET_ACCU = 'A',           /* no args */
+  /* Return the current contents of the accumulator. Reply is one value. */
+  REQ_GET_HEADER = 'H',         /* mlvalue v */
+  /* As REQ_GET_OBJ, but sends only the header. */
+  REQ_GET_FIELD = 'F',          /* mlvalue v, uint32 fieldnum */
+  /* As REQ_GET_OBJ, but sends only one field. */
+  REQ_MARSHAL_OBJ = 'M',        /* mlvalue v */
+  /* Send a copy of the data structure rooted at v, using the same
+     format as [caml_output_value]. */
+  REQ_GET_CLOSURE_CODE = 'C',   /* mlvalue v */
+  /* Send the code address of the given closure.
+     Reply is one uint32. */
+  REQ_SET_FORK_MODE = 'K'       /* uint32 m */
+  /* Set whether to follow the child (m=0) or the parent on fork. */
+};
+
+/* Replies to a REQ_GO request. All replies are followed by three uint32:
+   - the value of the event counter
+   - the position of the stack
+   - the current pc. */
+
+enum debugger_reply {
+  REP_EVENT = 'e',
+  /* Event counter reached 0. */
+  REP_BREAKPOINT = 'b',
+  /* Breakpoint hit. */
+  REP_EXITED = 'x',
+  /* Program exited by calling exit or reaching the end of the source. */
+  REP_TRAP = 's',
+  /* Trap barrier crossed. */
+  REP_UNCAUGHT_EXC = 'u'
+  /* Program exited due to a stray exception. */
+};
+
+#endif /* CAML_DEBUGGER_H */
diff --git a/byterun/caml/dynlink.h b/byterun/caml/dynlink.h
new file mode 100644
index 0000000..74cfdb6
--- /dev/null
+++ b/byterun/caml/dynlink.h
@@ -0,0 +1,36 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2000 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Dynamic loading of C primitives. */
+
+#ifndef CAML_DYNLINK_H
+#define CAML_DYNLINK_H
+
+#include "misc.h"
+
+/* Build the table of primitives, given a search path, a list
+   of shared libraries, and a list of primitive names
+   (all three 0-separated in char arrays).
+   Abort the runtime system on error. */
+extern void caml_build_primitive_table(char * lib_path,
+                                       char * libs,
+                                       char * req_prims);
+
+/* The search path for shared libraries */
+extern struct ext_table caml_shared_libs_path;
+
+/* Build the table of primitives as a copy of the builtin primitive table.
+   Used for executables generated by ocamlc -output-obj. */
+extern void caml_build_primitive_table_builtin(void);
+
+#endif /* CAML_DYNLINK_H */
diff --git a/byterun/caml/exec.h b/byterun/caml/exec.h
new file mode 100644
index 0000000..8b50484
--- /dev/null
+++ b/byterun/caml/exec.h
@@ -0,0 +1,60 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* exec.h : format of executable bytecode files */
+
+#ifndef CAML_EXEC_H
+#define CAML_EXEC_H
+
+/* Executable bytecode files are composed of a number of sections,
+   identified by 4-character names.  A table of contents at the
+   end of the file lists the section names along with their sizes,
+   in the order in which they appear in the file:
+
+   offset 0 --->  initial junk
+                  data for section 1
+                  data for section 2
+                  ...
+                  data for section N
+                  table of contents:
+                    descriptor for section 1
+                    ...
+                    descriptor for section N
+                  trailer
+ end of file --->
+*/
+
+/* Structure of t.o.c. entries
+   Numerical quantities are 32-bit unsigned integers, big endian */
+
+struct section_descriptor {
+  char name[4];                 /* Section name */
+  uint32 len;                   /* Length of data in bytes */
+};
+
+/* Structure of the trailer. */
+
+struct exec_trailer {
+  uint32 num_sections;          /* Number of sections */
+  char magic[12];               /* The magic number */
+  struct section_descriptor * section; /* Not part of file */
+};
+
+#define TRAILER_SIZE (4+12)
+
+/* Magic number for this release */
+
+#define EXEC_MAGIC "Caml1999X008"
+
+
+#endif /* CAML_EXEC_H */
diff --git a/byterun/caml/fail.h b/byterun/caml/fail.h
new file mode 100644
index 0000000..775b011
--- /dev/null
+++ b/byterun/caml/fail.h
@@ -0,0 +1,84 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_FAIL_H
+#define CAML_FAIL_H
+
+/* <private> */
+#include <setjmp.h>
+/* </private> */
+
+#ifndef CAML_NAME_SPACE
+#include "compatibility.h"
+#endif
+#include "misc.h"
+#include "mlvalues.h"
+
+/* <private> */
+#define OUT_OF_MEMORY_EXN 0     /* "Out_of_memory" */
+#define SYS_ERROR_EXN 1         /* "Sys_error" */
+#define FAILURE_EXN 2           /* "Failure" */
+#define INVALID_EXN 3           /* "Invalid_argument" */
+#define END_OF_FILE_EXN 4       /* "End_of_file" */
+#define ZERO_DIVIDE_EXN 5       /* "Division_by_zero" */
+#define NOT_FOUND_EXN 6         /* "Not_found" */
+#define MATCH_FAILURE_EXN 7     /* "Match_failure" */
+#define STACK_OVERFLOW_EXN 8    /* "Stack_overflow" */
+#define SYS_BLOCKED_IO 9        /* "Sys_blocked_io" */
+#define ASSERT_FAILURE_EXN 10   /* "Assert_failure" */
+#define UNDEFINED_RECURSIVE_MODULE_EXN 11 /* "Undefined_recursive_module" */
+
+#ifdef POSIX_SIGNALS
+struct longjmp_buffer {
+  sigjmp_buf buf;
+};
+#else
+struct longjmp_buffer {
+  jmp_buf buf;
+};
+#define sigsetjmp(buf,save) setjmp(buf)
+#define siglongjmp(buf,val) longjmp(buf,val)
+#endif
+
+CAMLextern struct longjmp_buffer * caml_external_raise;
+extern value caml_exn_bucket;
+int caml_is_special_exception(value exn);
+
+/* </private> */
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+CAMLextern void caml_raise (value bucket) Noreturn;
+CAMLextern void caml_raise_constant (value tag) Noreturn;
+CAMLextern void caml_raise_with_arg (value tag, value arg) Noreturn;
+CAMLextern void caml_raise_with_args (value tag, int nargs, value arg[]) Noreturn;
+CAMLextern void caml_raise_with_string (value tag, char const * msg) Noreturn;
+CAMLextern void caml_failwith (char const *) Noreturn;
+CAMLextern void caml_invalid_argument (char const *) Noreturn;
+CAMLextern void caml_raise_out_of_memory (void) Noreturn;
+CAMLextern void caml_raise_stack_overflow (void) Noreturn;
+CAMLextern void caml_raise_sys_error (value) Noreturn;
+CAMLextern void caml_raise_end_of_file (void) Noreturn;
+CAMLextern void caml_raise_zero_divide (void) Noreturn;
+CAMLextern void caml_raise_not_found (void) Noreturn;
+CAMLextern void caml_init_exceptions (void);
+CAMLextern void caml_array_bound_error (void) Noreturn;
+CAMLextern void caml_raise_sys_blocked_io (void) Noreturn;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* CAML_FAIL_H */
diff --git a/byterun/caml/finalise.h b/byterun/caml/finalise.h
new file mode 100644
index 0000000..96853f5
--- /dev/null
+++ b/byterun/caml/finalise.h
@@ -0,0 +1,27 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*          Damien Doligez, projet Moscova, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2000 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_FINALISE_H
+#define CAML_FINALISE_H
+
+#include "roots.h"
+
+void caml_final_update (void);
+void caml_final_do_calls (void);
+void caml_final_do_strong_roots (scanning_action f);
+void caml_final_do_weak_roots (scanning_action f);
+void caml_final_do_young_roots (scanning_action f);
+void caml_final_empty_young (void);
+value caml_final_register (value f, value v);
+
+#endif /* CAML_FINALISE_H */
diff --git a/byterun/caml/fix_code.h b/byterun/caml/fix_code.h
new file mode 100644
index 0000000..419ad32
--- /dev/null
+++ b/byterun/caml/fix_code.h
@@ -0,0 +1,40 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Handling of blocks of bytecode (endianness switch, threading). */
+
+#ifndef CAML_FIX_CODE_H
+#define CAML_FIX_CODE_H
+
+
+#include "config.h"
+#include "misc.h"
+#include "mlvalues.h"
+
+extern code_t caml_start_code;
+extern asize_t caml_code_size;
+extern unsigned char * caml_saved_code;
+
+void caml_init_code_fragments();
+void caml_load_code (int fd, asize_t len);
+void caml_fixup_endianness (code_t code, asize_t len);
+void caml_set_instruction (code_t pos, opcode_t instr);
+int caml_is_instruction (opcode_t instr1, opcode_t instr2);
+
+#ifdef THREADED_CODE
+extern char ** caml_instr_table;
+extern char * caml_instr_base;
+void caml_thread_code (code_t code, asize_t len);
+#endif
+
+#endif /* CAML_FIX_CODE_H */
diff --git a/byterun/caml/freelist.h b/byterun/caml/freelist.h
new file mode 100644
index 0000000..146961f
--- /dev/null
+++ b/byterun/caml/freelist.h
@@ -0,0 +1,34 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Free lists of heap blocks. */
+
+#ifndef CAML_FREELIST_H
+#define CAML_FREELIST_H
+
+
+#include "misc.h"
+#include "mlvalues.h"
+
+extern asize_t caml_fl_cur_size;     /* size in words */
+
+char *caml_fl_allocate (mlsize_t);
+void caml_fl_init_merge (void);
+void caml_fl_reset (void);
+char *caml_fl_merge_block (char *);
+void caml_fl_add_blocks (char *);
+void caml_make_free_blocks (value *, mlsize_t, int, int);
+void caml_set_allocation_policy (uintnat);
+
+
+#endif /* CAML_FREELIST_H */
diff --git a/byterun/caml/gc.h b/byterun/caml/gc.h
new file mode 100644
index 0000000..3cbf08a
--- /dev/null
+++ b/byterun/caml/gc.h
@@ -0,0 +1,56 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_GC_H
+#define CAML_GC_H
+
+
+#include "mlvalues.h"
+
+#define Caml_white (0 << 8)
+#define Caml_gray  (1 << 8)
+#define Caml_blue  (2 << 8)
+#define Caml_black (3 << 8)
+
+#define Color_hd(hd) ((color_t) ((hd) & Caml_black))
+#define Color_hp(hp) (Color_hd (Hd_hp (hp)))
+#define Color_val(val) (Color_hd (Hd_val (val)))
+
+#define Is_white_hd(hd) (Color_hd (hd) == Caml_white)
+#define Is_gray_hd(hd) (Color_hd (hd) == Caml_gray)
+#define Is_blue_hd(hd) (Color_hd (hd) == Caml_blue)
+#define Is_black_hd(hd) (Color_hd (hd) == Caml_black)
+
+#define Whitehd_hd(hd) (((hd)  & ~Caml_black)/*| Caml_white*/)
+#define Grayhd_hd(hd)  (((hd)  & ~Caml_black)  | Caml_gray)
+#define Blackhd_hd(hd) (((hd)/*& ~Caml_black*/)| Caml_black)
+#define Bluehd_hd(hd)  (((hd)  & ~Caml_black)  | Caml_blue)
+
+/* This depends on the layout of the header.  See [mlvalues.h]. */
+#define Make_header(wosize, tag, color)                                       \
+      (/*Assert ((wosize) <= Max_wosize),*/                                   \
+       ((header_t) (((header_t) (wosize) << 10)                               \
+                    + (color)                                                 \
+                    + (tag_t) (tag)))                                         \
+      )
+
+#define Is_white_val(val) (Color_val(val) == Caml_white)
+#define Is_gray_val(val) (Color_val(val) == Caml_gray)
+#define Is_blue_val(val) (Color_val(val) == Caml_blue)
+#define Is_black_val(val) (Color_val(val) == Caml_black)
+
+/* For extern.c */
+#define Colornum_hd(hd) ((color_t) (((hd) >> 8) & 3))
+#define Coloredhd_hd(hd,colnum) (((hd) & ~Caml_black) | ((colnum) << 8))
+
+#endif /* CAML_GC_H */
diff --git a/byterun/caml/gc_ctrl.h b/byterun/caml/gc_ctrl.h
new file mode 100644
index 0000000..5f9d873
--- /dev/null
+++ b/byterun/caml/gc_ctrl.h
@@ -0,0 +1,40 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_GC_CTRL_H
+#define CAML_GC_CTRL_H
+
+#include "misc.h"
+
+extern double
+     caml_stat_minor_words,
+     caml_stat_promoted_words,
+     caml_stat_major_words;
+
+extern intnat
+     caml_stat_minor_collections,
+     caml_stat_major_collections,
+     caml_stat_heap_size,
+     caml_stat_top_heap_size,
+     caml_stat_compactions,
+     caml_stat_heap_chunks;
+
+void caml_init_gc (uintnat, uintnat, uintnat,
+                   uintnat, uintnat);
+
+
+#ifdef DEBUG
+void caml_heap_check (void);
+#endif
+
+#endif /* CAML_GC_CTRL_H */
diff --git a/byterun/caml/globroots.h b/byterun/caml/globroots.h
new file mode 100644
index 0000000..1c3ebab
--- /dev/null
+++ b/byterun/caml/globroots.h
@@ -0,0 +1,25 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*           Xavier Leroy, projet Cristal, INRIA Rocquencourt          */
+/*                                                                     */
+/*  Copyright 2001 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Registration of global memory roots */
+
+#ifndef CAML_GLOBROOTS_H
+#define CAML_GLOBROOTS_H
+
+#include "mlvalues.h"
+#include "roots.h"
+
+void caml_scan_global_roots(scanning_action f);
+void caml_scan_global_young_roots(scanning_action f);
+
+#endif /* CAML_GLOBROOTS_H */
diff --git a/byterun/caml/hash.h b/byterun/caml/hash.h
new file mode 100644
index 0000000..436a8bb
--- /dev/null
+++ b/byterun/caml/hash.h
@@ -0,0 +1,29 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Gallium, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2011 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Auxiliary functions for custom hash functions */
+
+#ifndef CAML_HASH_H
+#define CAML_HASH_H
+
+#include "mlvalues.h"
+
+CAMLextern uint32 caml_hash_mix_uint32(uint32 h, uint32 d);
+CAMLextern uint32 caml_hash_mix_intnat(uint32 h, intnat d);
+CAMLextern uint32 caml_hash_mix_int64(uint32 h, int64 d);
+CAMLextern uint32 caml_hash_mix_double(uint32 h, double d);
+CAMLextern uint32 caml_hash_mix_float(uint32 h, float d);
+CAMLextern uint32 caml_hash_mix_string(uint32 h, value s);
+
+
+#endif
diff --git a/byterun/caml/instrtrace.h b/byterun/caml/instrtrace.h
new file mode 100644
index 0000000..1e62ac4
--- /dev/null
+++ b/byterun/caml/instrtrace.h
@@ -0,0 +1,29 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Trace the instructions executed */
+
+#ifndef _instrtrace_
+#define _instrtrace_
+
+
+#include "mlvalues.h"
+#include "misc.h"
+
+extern int caml_trace_flag;
+extern intnat caml_icount;
+void caml_stop_here (void);
+void caml_disasm_instr (code_t pc);
+void caml_trace_value_file (value v, code_t prog, int proglen, FILE * f);
+void caml_trace_accu_sp_file(value accu, value * sp, code_t prog, int proglen, FILE * f);
+#endif
diff --git a/byterun/caml/instruct.h b/byterun/caml/instruct.h
new file mode 100644
index 0000000..5686050
--- /dev/null
+++ b/byterun/caml/instruct.h
@@ -0,0 +1,59 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* The instruction set. */
+
+#ifndef CAML_INSTRUCT_H
+#define CAML_INSTRUCT_H
+
+enum instructions {
+  ACC0, ACC1, ACC2, ACC3, ACC4, ACC5, ACC6, ACC7,
+  ACC, PUSH,
+  PUSHACC0, PUSHACC1, PUSHACC2, PUSHACC3,
+  PUSHACC4, PUSHACC5, PUSHACC6, PUSHACC7,
+  PUSHACC, POP, ASSIGN,
+  ENVACC1, ENVACC2, ENVACC3, ENVACC4, ENVACC,
+  PUSHENVACC1, PUSHENVACC2, PUSHENVACC3, PUSHENVACC4, PUSHENVACC,
+  PUSH_RETADDR, APPLY, APPLY1, APPLY2, APPLY3,
+  APPTERM, APPTERM1, APPTERM2, APPTERM3,
+  RETURN, RESTART, GRAB,
+  CLOSURE, CLOSUREREC,
+  OFFSETCLOSUREM2, OFFSETCLOSURE0, OFFSETCLOSURE2, OFFSETCLOSURE,
+  PUSHOFFSETCLOSUREM2, PUSHOFFSETCLOSURE0,
+  PUSHOFFSETCLOSURE2, PUSHOFFSETCLOSURE,
+  GETGLOBAL, PUSHGETGLOBAL, GETGLOBALFIELD, PUSHGETGLOBALFIELD, SETGLOBAL,
+  ATOM0, ATOM, PUSHATOM0, PUSHATOM,
+  MAKEBLOCK, MAKEBLOCK1, MAKEBLOCK2, MAKEBLOCK3, MAKEFLOATBLOCK,
+  GETFIELD0, GETFIELD1, GETFIELD2, GETFIELD3, GETFIELD, GETFLOATFIELD,
+  SETFIELD0, SETFIELD1, SETFIELD2, SETFIELD3, SETFIELD, SETFLOATFIELD,
+  VECTLENGTH, GETVECTITEM, SETVECTITEM,
+  GETSTRINGCHAR, SETSTRINGCHAR,
+  BRANCH, BRANCHIF, BRANCHIFNOT, SWITCH, BOOLNOT,
+  PUSHTRAP, POPTRAP, RAISE, CHECK_SIGNALS,
+  C_CALL1, C_CALL2, C_CALL3, C_CALL4, C_CALL5, C_CALLN,
+  CONST0, CONST1, CONST2, CONST3, CONSTINT,
+  PUSHCONST0, PUSHCONST1, PUSHCONST2, PUSHCONST3, PUSHCONSTINT,
+  NEGINT, ADDINT, SUBINT, MULINT, DIVINT, MODINT,
+  ANDINT, ORINT, XORINT, LSLINT, LSRINT, ASRINT,
+  EQ, NEQ, LTINT, LEINT, GTINT, GEINT,
+  OFFSETINT, OFFSETREF, ISINT,
+  GETMETHOD,
+  BEQ, BNEQ,  BLTINT, BLEINT, BGTINT, BGEINT,
+  ULTINT, UGEINT,
+  BULTINT, BUGEINT,
+  GETPUBMET, GETDYNMET,
+  STOP,
+  EVENT, BREAK
+};
+
+#endif /* CAML_INSTRUCT_H */
diff --git a/byterun/caml/int64_emul.h b/byterun/caml/int64_emul.h
new file mode 100644
index 0000000..ba7904a
--- /dev/null
+++ b/byterun/caml/int64_emul.h
@@ -0,0 +1,287 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2002 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Software emulation of 64-bit integer arithmetic, for C compilers
+   that do not support it.  */
+
+#ifndef CAML_INT64_EMUL_H
+#define CAML_INT64_EMUL_H
+
+#include <math.h>
+
+#ifdef ARCH_BIG_ENDIAN
+#define I64_literal(hi,lo) { hi, lo }
+#else
+#define I64_literal(hi,lo) { lo, hi }
+#endif
+
+#define I64_split(x,hi,lo) (hi = (x).h, lo = (x).l)
+
+/* Unsigned comparison */
+static int I64_ucompare(uint64 x, uint64 y)
+{
+  if (x.h > y.h) return 1;
+  if (x.h < y.h) return -1;
+  if (x.l > y.l) return 1;
+  if (x.l < y.l) return -1;
+  return 0;
+}
+
+#define I64_ult(x, y) (I64_ucompare(x, y) < 0)
+
+/* Signed comparison */
+static int I64_compare(int64 x, int64 y)
+{
+  if ((int32)x.h > (int32)y.h) return 1;
+  if ((int32)x.h < (int32)y.h) return -1;
+  if (x.l > y.l) return 1;
+  if (x.l < y.l) return -1;
+  return 0;
+}
+
+/* Negation */
+static int64 I64_neg(int64 x)
+{
+  int64 res;
+  res.l = -x.l;
+  res.h = ~x.h;
+  if (res.l == 0) res.h++;
+  return res;
+}
+
+/* Addition */
+static int64 I64_add(int64 x, int64 y)
+{
+  int64 res;
+  res.l = x.l + y.l;
+  res.h = x.h + y.h;
+  if (res.l < x.l) res.h++;
+  return res;
+}
+
+/* Subtraction */
+static int64 I64_sub(int64 x, int64 y)
+{
+  int64 res;
+  res.l = x.l - y.l;
+  res.h = x.h - y.h;
+  if (x.l < y.l) res.h--;
+  return res;
+}
+
+/* Multiplication */
+static int64 I64_mul(int64 x, int64 y)
+{
+  int64 res;
+  uint32 prod00 = (x.l & 0xFFFF) * (y.l & 0xFFFF);
+  uint32 prod10 = (x.l >> 16) * (y.l & 0xFFFF);
+  uint32 prod01 = (x.l & 0xFFFF) * (y.l >> 16);
+  uint32 prod11 = (x.l >> 16) * (y.l >> 16);
+  res.l = prod00;
+  res.h = prod11 + (prod01 >> 16) + (prod10 >> 16);
+  prod01 = prod01 << 16; res.l += prod01; if (res.l < prod01) res.h++;
+  prod10 = prod10 << 16; res.l += prod10; if (res.l < prod10) res.h++;
+  res.h += x.l * y.h + x.h * y.l;
+  return res;
+}
+
+#define I64_is_zero(x) (((x).l | (x).h) == 0)
+#define I64_is_negative(x) ((int32) (x).h < 0)
+#define I64_is_min_int(x) ((x).l == 0 && (x).h == 0x80000000U)
+#define I64_is_minus_one(x) (((x).l & (x).h) == 0xFFFFFFFFU)
+
+/* Bitwise operations */
+static int64 I64_and(int64 x, int64 y)
+{
+  int64 res;
+  res.l = x.l & y.l;
+  res.h = x.h & y.h;
+  return res;
+}
+
+static int64 I64_or(int64 x, int64 y)
+{
+  int64 res;
+  res.l = x.l | y.l;
+  res.h = x.h | y.h;
+  return res;
+}
+
+static int64 I64_xor(int64 x, int64 y)
+{
+  int64 res;
+  res.l = x.l ^ y.l;
+  res.h = x.h ^ y.h;
+  return res;
+}
+
+/* Shifts */
+static int64 I64_lsl(int64 x, int s)
+{
+  int64 res;
+  s = s & 63;
+  if (s == 0) return x;
+  if (s < 32) {
+    res.l = x.l << s;
+    res.h = (x.h << s) | (x.l >> (32 - s));
+  } else {
+    res.l = 0;
+    res.h = x.l << (s - 32);
+  }
+  return res;
+}
+
+static int64 I64_lsr(int64 x, int s)
+{
+  int64 res;
+  s = s & 63;
+  if (s == 0) return x;
+  if (s < 32) {
+    res.l = (x.l >> s) | (x.h << (32 - s));
+    res.h = x.h >> s;
+  } else {
+    res.l = x.h >> (s - 32);
+    res.h = 0;
+  }
+  return res;
+}
+
+static int64 I64_asr(int64 x, int s)
+{
+  int64 res;
+  s = s & 63;
+  if (s == 0) return x;
+  if (s < 32) {
+    res.l = (x.l >> s) | (x.h << (32 - s));
+    res.h = (int32) x.h >> s;
+  } else {
+    res.l = (int32) x.h >> (s - 32);
+    res.h = (int32) x.h >> 31;
+  }
+  return res;
+}
+
+/* Division and modulus */
+
+#define I64_SHL1(x) x.h = (x.h << 1) | (x.l >> 31); x.l <<= 1
+#define I64_SHR1(x) x.l = (x.l >> 1) | (x.h << 31); x.h >>= 1
+
+static void I64_udivmod(uint64 modulus, uint64 divisor,
+                        uint64 * quo, uint64 * mod)
+{
+  int64 quotient, mask;
+  int cmp;
+
+  quotient.h = 0; quotient.l = 0;
+  mask.h = 0; mask.l = 1;
+  while ((int32) divisor.h >= 0) {
+    cmp = I64_ucompare(divisor, modulus);
+    I64_SHL1(divisor);
+    I64_SHL1(mask);
+    if (cmp >= 0) break;
+  }
+  while (mask.l | mask.h) {
+    if (I64_ucompare(modulus, divisor) >= 0) {
+      quotient.h |= mask.h; quotient.l |= mask.l;
+      modulus = I64_sub(modulus, divisor);
+    }
+    I64_SHR1(mask);
+    I64_SHR1(divisor);
+  }
+  *quo = quotient;
+  *mod = modulus;
+}
+
+static int64 I64_div(int64 x, int64 y)
+{
+  int64 q, r;
+  int32 sign;
+
+  sign = x.h ^ y.h;
+  if ((int32) x.h < 0) x = I64_neg(x);
+  if ((int32) y.h < 0) y = I64_neg(y);
+  I64_udivmod(x, y, &q, &r);
+  if (sign < 0) q = I64_neg(q);
+  return q;
+}
+
+static int64 I64_mod(int64 x, int64 y)
+{
+  int64 q, r;
+  int32 sign;
+
+  sign = x.h;
+  if ((int32) x.h < 0) x = I64_neg(x);
+  if ((int32) y.h < 0) y = I64_neg(y);
+  I64_udivmod(x, y, &q, &r);
+  if (sign < 0) r = I64_neg(r);
+  return r;
+}
+
+/* Coercions */
+
+static int64 I64_of_int32(int32 x)
+{
+  int64 res;
+  res.l = x;
+  res.h = x >> 31;
+  return res;
+}
+
+#define I64_to_int32(x) ((int32) (x).l)
+
+/* Note: we assume sizeof(intnat) = 4 here, which is true otherwise
+   autoconfiguration would have selected native 64-bit integers */
+#define I64_of_intnat I64_of_int32
+#define I64_to_intnat I64_to_int32
+
+static double I64_to_double(int64 x)
+{
+  double res;
+  int32 sign = x.h;
+  if (sign < 0) x = I64_neg(x);
+  res = ldexp((double) x.h, 32) + x.l;
+  if (sign < 0) res = -res;
+  return res;
+}
+
+static int64 I64_of_double(double f)
+{
+  int64 res;
+  double frac, integ;
+  int neg;
+
+  neg = (f < 0);
+  f = fabs(f);
+  frac = modf(ldexp(f, -32), &integ);
+  res.h = (uint32) integ;
+  res.l = (uint32) ldexp(frac, 32);
+  if (neg) res = I64_neg(res);
+  return res;
+}
+
+static int64 I64_bswap(int64 x)
+{
+  int64 res;
+  res.h = (((x.l & 0x000000FF) << 24) |
+           ((x.l & 0x0000FF00) << 8) |
+           ((x.l & 0x00FF0000) >> 8) |
+           ((x.l & 0xFF000000) >> 24));
+  res.l = (((x.h & 0x000000FF) << 24) |
+           ((x.h & 0x0000FF00) << 8) |
+           ((x.h & 0x00FF0000) >> 8) |
+           ((x.h & 0xFF000000) >> 24));
+  return res;
+}
+
+#endif /* CAML_INT64_EMUL_H */
diff --git a/byterun/caml/int64_format.h b/byterun/caml/int64_format.h
new file mode 100644
index 0000000..b0de527
--- /dev/null
+++ b/byterun/caml/int64_format.h
@@ -0,0 +1,105 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2002 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* printf-like formatting of 64-bit integers, in case the C library
+   printf() function does not support them. */
+
+#ifndef CAML_INT64_FORMAT_H
+#define CAML_INT64_FORMAT_H
+
+static void I64_format(char * buffer, char * fmt, int64 x)
+{
+  static char conv_lower[] = "0123456789abcdef";
+  static char conv_upper[] = "0123456789ABCDEF";
+  char rawbuffer[24];
+  char justify, signstyle, filler, alternate, signedconv;
+  int base, width, sign, i, rawlen;
+  char * cvtbl;
+  char * p, * r;
+  int64 wbase, digit;
+
+  /* Parsing of format */
+  justify = '+';
+  signstyle = '-';
+  filler = ' ';
+  alternate = 0;
+  base = 0;
+  signedconv = 0;
+  width = 0;
+  cvtbl = conv_lower;
+  for (p = fmt; *p != 0; p++) {
+    switch (*p) {
+    case '-':
+      justify = '-'; break;
+    case '+': case ' ':
+      signstyle = *p; break;
+    case '0':
+      filler = '0'; break;
+    case '#':
+      alternate = 1; break;
+    case '1': case '2': case '3': case '4': case '5':
+    case '6': case '7': case '8': case '9':
+      width = atoi(p);
+      while (p[1] >= '0' && p[1] <= '9') p++;
+      break;
+    case 'd': case 'i':
+      signedconv = 1; /* fallthrough */
+    case 'u':
+      base = 10; break;
+    case 'x':
+      base = 16; break;
+    case 'X':
+      base = 16; cvtbl = conv_upper; break;
+    case 'o':
+      base = 8; break;
+    }
+  }
+  if (base == 0) { buffer[0] = 0; return; }
+  /* Do the conversion */
+  sign = 1;
+  if (signedconv && I64_is_negative(x)) { sign = -1; x = I64_neg(x); }
+  r = rawbuffer + sizeof(rawbuffer);
+  wbase = I64_of_int32(base);
+  do {
+    I64_udivmod(x, wbase, &x, &digit);
+    *--r = cvtbl[I64_to_int32(digit)];
+  } while (! I64_is_zero(x));
+  rawlen = rawbuffer + sizeof(rawbuffer) - r;
+  /* Adjust rawlen to reflect additional chars (sign, etc) */
+  if (signedconv && (sign < 0 || signstyle != '-')) rawlen++;
+  if (alternate) {
+    if (base == 8) rawlen += 1;
+    if (base == 16) rawlen += 2;
+  }
+  /* Do the formatting */
+  p = buffer;
+  if (justify == '+' && filler == ' ') {
+    for (i = rawlen; i < width; i++) *p++ = ' ';
+  }
+  if (signedconv) {
+    if (sign < 0) *p++ = '-';
+    else if (signstyle != '-') *p++ = signstyle;
+  }
+  if (alternate && base == 8) *p++ = '0';
+  if (alternate && base == 16) { *p++ = '0'; *p++ = 'x'; }
+  if (justify == '+' && filler == '0') {
+    for (i = rawlen; i < width; i++) *p++ = '0';
+  }
+  while (r < rawbuffer + sizeof(rawbuffer)) *p++ = *r++;
+  if (justify == '-') {
+    for (i = rawlen; i < width; i++) *p++ = ' ';
+  }
+  *p = 0;
+}
+
+#endif /* CAML_INT64_FORMAT_H */
diff --git a/byterun/caml/int64_native.h b/byterun/caml/int64_native.h
new file mode 100644
index 0000000..09b5d65
--- /dev/null
+++ b/byterun/caml/int64_native.h
@@ -0,0 +1,61 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2002 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Wrapper macros around native 64-bit integer arithmetic,
+   so that it has the same interface as the software emulation
+   provided in int64_emul.h */
+
+#ifndef CAML_INT64_NATIVE_H
+#define CAML_INT64_NATIVE_H
+
+#define I64_literal(hi,lo) ((int64)(hi) << 32 | (lo))
+#define I64_split(x,hi,lo) (hi = (uint32)((x)>>32), lo = (uint32)(x))
+#define I64_compare(x,y) (((x) > (y)) - ((x) < (y)))
+#define I64_ult(x,y) ((uint64)(x) < (uint64)(y))
+#define I64_neg(x) (-(x))
+#define I64_add(x,y) ((x) + (y))
+#define I64_sub(x,y) ((x) - (y))
+#define I64_mul(x,y) ((x) * (y))
+#define I64_is_zero(x) ((x) == 0)
+#define I64_is_negative(x) ((x) < 0)
+#define I64_is_min_int(x) ((x) == ((int64)1 << 63))
+#define I64_is_minus_one(x) ((x) == -1)
+
+#define I64_div(x,y) ((x) / (y))
+#define I64_mod(x,y) ((x) % (y))
+#define I64_udivmod(x,y,quo,rem) \
+  (*(rem) = (uint64)(x) % (uint64)(y), \
+   *(quo) = (uint64)(x) / (uint64)(y))
+#define I64_and(x,y) ((x) & (y))
+#define I64_or(x,y) ((x) | (y))
+#define I64_xor(x,y) ((x) ^ (y))
+#define I64_lsl(x,y) ((x) << (y))
+#define I64_asr(x,y) ((x) >> (y))
+#define I64_lsr(x,y) ((uint64)(x) >> (y))
+#define I64_to_intnat(x) ((intnat) (x))
+#define I64_of_intnat(x) ((intnat) (x))
+#define I64_to_int32(x) ((int32) (x))
+#define I64_of_int32(x) ((int64) (x))
+#define I64_to_double(x) ((double)(x))
+#define I64_of_double(x) ((int64)(x))
+
+#define I64_bswap(x) ((((x) & 0x00000000000000FF) << 56) | \
+                      (((x) & 0x000000000000FF00) << 40) | \
+                      (((x) & 0x0000000000FF0000) << 24) | \
+                      (((x) & 0x00000000FF000000) << 8) |  \
+                      (((x) & 0x000000FF00000000) >> 8) |  \
+                      (((x) & 0x0000FF0000000000) >> 24) | \
+                      (((x) & 0x00FF000000000000) >> 40) | \
+                      (((x) & 0xFF00000000000000) >> 56))
+
+#endif /* CAML_INT64_NATIVE_H */
diff --git a/byterun/caml/interp.h b/byterun/caml/interp.h
new file mode 100644
index 0000000..c8e2f89
--- /dev/null
+++ b/byterun/caml/interp.h
@@ -0,0 +1,31 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* The bytecode interpreter */
+
+#ifndef CAML_INTERP_H
+#define CAML_INTERP_H
+
+#include "misc.h"
+#include "mlvalues.h"
+
+/* interpret a bytecode */
+value caml_interprete (code_t prog, asize_t prog_size);
+
+/* tell the runtime that a bytecode program might be needed */
+void caml_prepare_bytecode(code_t prog, asize_t prog_size);
+
+/* tell the runtime that a bytecode program is no more needed */
+void caml_release_bytecode(code_t prog, asize_t prog_size);
+
+#endif /* CAML_INTERP_H */
diff --git a/byterun/caml/intext.h b/byterun/caml/intext.h
new file mode 100644
index 0000000..f7aa655
--- /dev/null
+++ b/byterun/caml/intext.h
@@ -0,0 +1,168 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Structured input/output */
+
+#ifndef CAML_INTEXT_H
+#define CAML_INTEXT_H
+
+#ifndef CAML_NAME_SPACE
+#include "compatibility.h"
+#endif
+#include "misc.h"
+#include "mlvalues.h"
+
+/* <private> */
+#include "io.h"
+
+/* Magic number */
+
+#define Intext_magic_number 0x8495A6BE
+
+/* Codes for the compact format */
+
+#define PREFIX_SMALL_BLOCK 0x80
+#define PREFIX_SMALL_INT 0x40
+#define PREFIX_SMALL_STRING 0x20
+#define CODE_INT8 0x0
+#define CODE_INT16 0x1
+#define CODE_INT32 0x2
+#define CODE_INT64 0x3
+#define CODE_SHARED8 0x4
+#define CODE_SHARED16 0x5
+#define CODE_SHARED32 0x6
+#define CODE_BLOCK32 0x8
+#define CODE_BLOCK64 0x13
+#define CODE_STRING8 0x9
+#define CODE_STRING32 0xA
+#define CODE_DOUBLE_BIG 0xB
+#define CODE_DOUBLE_LITTLE 0xC
+#define CODE_DOUBLE_ARRAY8_BIG 0xD
+#define CODE_DOUBLE_ARRAY8_LITTLE 0xE
+#define CODE_DOUBLE_ARRAY32_BIG 0xF
+#define CODE_DOUBLE_ARRAY32_LITTLE 0x7
+#define CODE_CODEPOINTER 0x10
+#define CODE_INFIXPOINTER 0x11
+#define CODE_CUSTOM 0x12
+
+#if ARCH_FLOAT_ENDIANNESS == 0x76543210
+#define CODE_DOUBLE_NATIVE CODE_DOUBLE_BIG
+#define CODE_DOUBLE_ARRAY8_NATIVE CODE_DOUBLE_ARRAY8_BIG
+#define CODE_DOUBLE_ARRAY32_NATIVE CODE_DOUBLE_ARRAY32_BIG
+#else
+#define CODE_DOUBLE_NATIVE CODE_DOUBLE_LITTLE
+#define CODE_DOUBLE_ARRAY8_NATIVE CODE_DOUBLE_ARRAY8_LITTLE
+#define CODE_DOUBLE_ARRAY32_NATIVE CODE_DOUBLE_ARRAY32_LITTLE
+#endif
+
+/* Size-ing data structures for extern.  Chosen so that
+   sizeof(struct trail_block) and sizeof(struct output_block)
+   are slightly below 8Kb. */
+
+#define ENTRIES_PER_TRAIL_BLOCK  1025
+#define SIZE_EXTERN_OUTPUT_BLOCK 8100
+
+/* The entry points */
+
+void caml_output_val (struct channel * chan, value v, value flags);
+  /* Output [v] with flags [flags] on the channel [chan]. */
+
+/* </private> */
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+CAMLextern void caml_output_value_to_malloc(value v, value flags,
+                                            /*out*/ char ** buf,
+                                            /*out*/ intnat * len);
+  /* Output [v] with flags [flags] to a memory buffer allocated with
+     malloc.  On return, [*buf] points to the buffer and [*len]
+     contains the number of bytes in buffer. */
+CAMLextern intnat caml_output_value_to_block(value v, value flags,
+                                             char * data, intnat len);
+  /* Output [v] with flags [flags] to a user-provided memory buffer.
+     [data] points to the start of this buffer, and [len] is its size
+     in bytes.  Return the number of bytes actually written in buffer.
+     Raise [Failure] if buffer is too short. */
+
+/* <private> */
+value caml_input_val (struct channel * chan);
+  /* Read a structured value from the channel [chan]. */
+/* </private> */
+
+CAMLextern value caml_input_val_from_string (value str, intnat ofs);
+  /* Read a structured value from the OCaml string [str], starting
+     at offset [ofs]. */
+CAMLextern value caml_input_value_from_malloc(char * data, intnat ofs);
+  /* Read a structured value from a malloced buffer.  [data] points
+     to the beginning of the buffer, and [ofs] is the offset of the
+     beginning of the externed data in this buffer.  The buffer is
+     deallocated with [free] on return, or if an exception is raised. */
+CAMLextern value caml_input_value_from_block(char * data, intnat len);
+  /* Read a structured value from a user-provided buffer.  [data] points
+     to the beginning of the externed data in this buffer,
+     and [len] is the length in bytes of valid data in this buffer.
+     The buffer is never deallocated by this routine. */
+
+/* Functions for writing user-defined marshallers */
+
+CAMLextern void caml_serialize_int_1(int i);
+CAMLextern void caml_serialize_int_2(int i);
+CAMLextern void caml_serialize_int_4(int32 i);
+CAMLextern void caml_serialize_int_8(int64 i);
+CAMLextern void caml_serialize_float_4(float f);
+CAMLextern void caml_serialize_float_8(double f);
+CAMLextern void caml_serialize_block_1(void * data, intnat len);
+CAMLextern void caml_serialize_block_2(void * data, intnat len);
+CAMLextern void caml_serialize_block_4(void * data, intnat len);
+CAMLextern void caml_serialize_block_8(void * data, intnat len);
+CAMLextern void caml_serialize_block_float_8(void * data, intnat len);
+
+CAMLextern int caml_deserialize_uint_1(void);
+CAMLextern int caml_deserialize_sint_1(void);
+CAMLextern int caml_deserialize_uint_2(void);
+CAMLextern int caml_deserialize_sint_2(void);
+CAMLextern uint32 caml_deserialize_uint_4(void);
+CAMLextern int32 caml_deserialize_sint_4(void);
+CAMLextern uint64 caml_deserialize_uint_8(void);
+CAMLextern int64 caml_deserialize_sint_8(void);
+CAMLextern float caml_deserialize_float_4(void);
+CAMLextern double caml_deserialize_float_8(void);
+CAMLextern void caml_deserialize_block_1(void * data, intnat len);
+CAMLextern void caml_deserialize_block_2(void * data, intnat len);
+CAMLextern void caml_deserialize_block_4(void * data, intnat len);
+CAMLextern void caml_deserialize_block_8(void * data, intnat len);
+CAMLextern void caml_deserialize_block_float_8(void * data, intnat len);
+CAMLextern void caml_deserialize_error(char * msg);
+
+/* <private> */
+
+/* Auxiliary stuff for sending code pointers */
+
+struct code_fragment {
+  char * code_start;
+  char * code_end;
+  unsigned char digest[16];
+  char digest_computed;
+};
+
+struct ext_table caml_code_fragments_table;
+
+/* </private> */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* CAML_INTEXT_H */
diff --git a/byterun/caml/io.h b/byterun/caml/io.h
new file mode 100644
index 0000000..8420d15
--- /dev/null
+++ b/byterun/caml/io.h
@@ -0,0 +1,124 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Buffered input/output */
+
+#ifndef CAML_IO_H
+#define CAML_IO_H
+
+#include "misc.h"
+#include "mlvalues.h"
+
+#ifndef IO_BUFFER_SIZE
+#define IO_BUFFER_SIZE 65536
+#endif
+
+#if defined(_WIN32)
+typedef __int64 file_offset;
+extern __int64 _lseeki64(int, __int64, int);
+#define lseek(fd,d,m) _lseeki64(fd,d,m)
+#elif defined(HAS_OFF_T)
+#include <sys/types.h>
+typedef off_t file_offset;
+#else
+typedef long file_offset;
+#endif
+
+struct channel {
+  int fd;                       /* Unix file descriptor */
+  file_offset offset;           /* Absolute position of fd in the file */
+  char * end;                   /* Physical end of the buffer */
+  char * curr;                  /* Current position in the buffer */
+  char * max;                   /* Logical end of the buffer (for input) */
+  void * mutex;                 /* Placeholder for mutex (for systhreads) */
+  struct channel * next, * prev;/* Double chaining of channels (flush_all) */
+  int revealed;                 /* For Cash only */
+  int old_revealed;             /* For Cash only */
+  int refcount;                 /* For flush_all and for Cash */
+  int flags;                    /* Bitfield */
+  char buff[IO_BUFFER_SIZE];    /* The buffer itself */
+};
+
+enum {
+  CHANNEL_FLAG_FROM_SOCKET = 1  /* For Windows */
+};
+
+/* For an output channel:
+     [offset] is the absolute position of the beginning of the buffer [buff].
+   For an input channel:
+     [offset] is the absolute position of the logical end of the buffer, [max].
+*/
+
+/* Functions and macros that can be called from C.  Take arguments of
+   type struct channel *.  No locking is performed. */
+
+#define putch(channel, ch) do{                                            \
+  if ((channel)->curr >= (channel)->end) caml_flush_partial(channel);     \
+  *((channel)->curr)++ = (ch);                                            \
+}while(0)
+
+#define getch(channel)                                                      \
+  ((channel)->curr >= (channel)->max                                        \
+   ? caml_refill(channel)                                                   \
+   : (unsigned char) *((channel)->curr)++)
+
+CAMLextern struct channel * caml_open_descriptor_in (int);
+CAMLextern struct channel * caml_open_descriptor_out (int);
+CAMLextern void caml_close_channel (struct channel *);
+CAMLextern int caml_channel_binary_mode (struct channel *);
+CAMLextern value caml_alloc_channel(struct channel *chan);
+
+CAMLextern int caml_flush_partial (struct channel *);
+CAMLextern void caml_flush (struct channel *);
+CAMLextern void caml_putword (struct channel *, uint32);
+CAMLextern int caml_putblock (struct channel *, char *, intnat);
+CAMLextern void caml_really_putblock (struct channel *, char *, intnat);
+
+CAMLextern unsigned char caml_refill (struct channel *);
+CAMLextern uint32 caml_getword (struct channel *);
+CAMLextern int caml_getblock (struct channel *, char *, intnat);
+CAMLextern int caml_really_getblock (struct channel *, char *, intnat);
+
+/* Extract a struct channel * from the heap object representing it */
+
+#define Channel(v) (*((struct channel **) (Data_custom_val(v))))
+
+/* The locking machinery */
+
+CAMLextern void (*caml_channel_mutex_free) (struct channel *);
+CAMLextern void (*caml_channel_mutex_lock) (struct channel *);
+CAMLextern void (*caml_channel_mutex_unlock) (struct channel *);
+CAMLextern void (*caml_channel_mutex_unlock_exn) (void);
+
+CAMLextern struct channel * caml_all_opened_channels;
+
+#define Lock(channel) \
+  if (caml_channel_mutex_lock != NULL) (*caml_channel_mutex_lock)(channel)
+#define Unlock(channel) \
+  if (caml_channel_mutex_unlock != NULL) (*caml_channel_mutex_unlock)(channel)
+#define Unlock_exn() \
+  if (caml_channel_mutex_unlock_exn != NULL) (*caml_channel_mutex_unlock_exn)()
+
+/* Conversion between file_offset and int64 */
+
+#ifdef ARCH_INT64_TYPE
+#define Val_file_offset(fofs) caml_copy_int64(fofs)
+#define File_offset_val(v) ((file_offset) Int64_val(v))
+#else
+CAMLextern value caml_Val_file_offset(file_offset fofs);
+CAMLextern file_offset caml_File_offset_val(value v);
+#define Val_file_offset caml_Val_file_offset
+#define File_offset_val caml_File_offset_val
+#endif
+
+#endif /* CAML_IO_H */
diff --git a/byterun/caml/major_gc.h b/byterun/caml/major_gc.h
new file mode 100644
index 0000000..f473df9
--- /dev/null
+++ b/byterun/caml/major_gc.h
@@ -0,0 +1,60 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_MAJOR_GC_H
+#define CAML_MAJOR_GC_H
+
+
+#include "freelist.h"
+#include "misc.h"
+
+typedef struct {
+  void *block;           /* address of the malloced block this chunk live in */
+  asize_t alloc;         /* in bytes, used for compaction */
+  asize_t size;          /* in bytes */
+  char *next;
+} heap_chunk_head;
+
+#define Chunk_size(c) (((heap_chunk_head *) (c)) [-1]).size
+#define Chunk_alloc(c) (((heap_chunk_head *) (c)) [-1]).alloc
+#define Chunk_next(c) (((heap_chunk_head *) (c)) [-1]).next
+#define Chunk_block(c) (((heap_chunk_head *) (c)) [-1]).block
+
+extern int caml_gc_phase;
+extern int caml_gc_subphase;
+extern uintnat caml_allocated_words;
+extern double caml_extra_heap_resources;
+extern uintnat caml_dependent_size, caml_dependent_allocated;
+extern uintnat caml_fl_size_at_phase_change;
+
+#define Phase_mark 0
+#define Phase_sweep 1
+#define Phase_idle 2
+#define Subphase_main 10
+#define Subphase_weak1 11
+#define Subphase_weak2 12
+#define Subphase_final 13
+
+CAMLextern char *caml_heap_start;
+extern uintnat total_heap_size;
+extern char *caml_gc_sweep_hp;
+
+void caml_init_major_heap (asize_t);           /* size in bytes */
+asize_t caml_round_heap_chunk_size (asize_t);  /* size in bytes */
+void caml_darken (value, value *);
+intnat caml_major_collection_slice (intnat);
+void major_collection (void);
+void caml_finish_major_cycle (void);
+
+
+#endif /* CAML_MAJOR_GC_H */
diff --git a/byterun/caml/md5.h b/byterun/caml/md5.h
new file mode 100644
index 0000000..d8aff09
--- /dev/null
+++ b/byterun/caml/md5.h
@@ -0,0 +1,41 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1999 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* MD5 message digest */
+
+#ifndef CAML_MD5_H
+#define CAML_MD5_H
+
+
+#include "mlvalues.h"
+#include "io.h"
+
+CAMLextern value caml_md5_string (value str, value ofs, value len);
+CAMLextern value caml_md5_chan (value vchan, value len);
+CAMLextern void caml_md5_block(unsigned char digest[16],
+                               void * data, uintnat len);
+
+struct MD5Context {
+        uint32 buf[4];
+        uint32 bits[2];
+        unsigned char in[64];
+};
+
+CAMLextern void caml_MD5Init (struct MD5Context *context);
+CAMLextern void caml_MD5Update (struct MD5Context *context, unsigned char *buf,
+                                uintnat len);
+CAMLextern void caml_MD5Final (unsigned char *digest, struct MD5Context *ctx);
+CAMLextern void caml_MD5Transform (uint32 *buf, uint32 *in);
+
+
+#endif /* CAML_MD5_H */
diff --git a/byterun/caml/memory.h b/byterun/caml/memory.h
new file mode 100644
index 0000000..94ec41b
--- /dev/null
+++ b/byterun/caml/memory.h
@@ -0,0 +1,466 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Allocation macros and functions */
+
+#ifndef CAML_MEMORY_H
+#define CAML_MEMORY_H
+
+#ifndef CAML_NAME_SPACE
+#include "compatibility.h"
+#endif
+#include "config.h"
+/* <private> */
+#include "gc.h"
+#include "major_gc.h"
+#include "minor_gc.h"
+/* </private> */
+#include "misc.h"
+#include "mlvalues.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+CAMLextern value caml_alloc_shr (mlsize_t, tag_t);
+CAMLextern void caml_adjust_gc_speed (mlsize_t, mlsize_t);
+CAMLextern void caml_alloc_dependent_memory (mlsize_t);
+CAMLextern void caml_free_dependent_memory (mlsize_t);
+CAMLextern void caml_modify (value *, value);
+CAMLextern void caml_initialize (value *, value);
+CAMLextern value caml_check_urgent_gc (value);
+CAMLextern void * caml_stat_alloc (asize_t);              /* Size in bytes. */
+CAMLextern void caml_stat_free (void *);
+CAMLextern void * caml_stat_resize (void *, asize_t);     /* Size in bytes. */
+char *caml_alloc_for_heap (asize_t request);   /* Size in bytes. */
+void caml_free_for_heap (char *mem);
+int caml_add_to_heap (char *mem);
+color_t caml_allocation_color (void *hp);
+
+/* void caml_shrink_heap (char *);        Only used in compact.c */
+
+/* <private> */
+
+#define Not_in_heap 0
+#define In_heap 1
+#define In_young 2
+#define In_static_data 4
+#define In_code_area 8
+
+#ifdef ARCH_SIXTYFOUR
+
+/* 64 bits: Represent page table as a sparse hash table */
+int caml_page_table_lookup(void * addr);
+#define Classify_addr(a) (caml_page_table_lookup((void *)(a)))
+
+#else
+
+/* 32 bits: Represent page table as a 2-level array */
+#define Pagetable2_log 11
+#define Pagetable2_size (1 << Pagetable2_log)
+#define Pagetable1_log (Page_log + Pagetable2_log)
+#define Pagetable1_size (1 << (32 - Pagetable1_log))
+CAMLextern unsigned char * caml_page_table[Pagetable1_size];
+
+#define Pagetable_index1(a) (((uintnat)(a)) >> Pagetable1_log)
+#define Pagetable_index2(a) \
+  ((((uintnat)(a)) >> Page_log) & (Pagetable2_size - 1))
+#define Classify_addr(a) \
+  caml_page_table[Pagetable_index1(a)][Pagetable_index2(a)]
+
+#endif
+
+#define Is_in_value_area(a) \
+  (Classify_addr(a) & (In_heap | In_young | In_static_data))
+#define Is_in_heap(a) (Classify_addr(a) & In_heap)
+#define Is_in_heap_or_young(a) (Classify_addr(a) & (In_heap | In_young))
+
+int caml_page_table_add(int kind, void * start, void * end);
+int caml_page_table_remove(int kind, void * start, void * end);
+int caml_page_table_initialize(mlsize_t bytesize);
+
+#ifdef DEBUG
+#define DEBUG_clear(result, wosize) do{ \
+  uintnat caml__DEBUG_i; \
+  for (caml__DEBUG_i = 0; caml__DEBUG_i < (wosize); ++ caml__DEBUG_i){ \
+    Field ((result), caml__DEBUG_i) = Debug_uninit_minor; \
+  } \
+}while(0)
+#else
+#define DEBUG_clear(result, wosize)
+#endif
+
+#define Alloc_small(result, wosize, tag) do{    CAMLassert ((wosize) >= 1); \
+                                          CAMLassert ((tag_t) (tag) < 256); \
+                                 CAMLassert ((wosize) <= Max_young_wosize); \
+  caml_young_ptr -= Bhsize_wosize (wosize);                                 \
+  if (caml_young_ptr < caml_young_start){                                   \
+    caml_young_ptr += Bhsize_wosize (wosize);                               \
+    Setup_for_gc;                                                           \
+    caml_minor_collection ();                                               \
+    Restore_after_gc;                                                       \
+    caml_young_ptr -= Bhsize_wosize (wosize);                               \
+  }                                                                         \
+  Hd_hp (caml_young_ptr) = Make_header ((wosize), (tag), Caml_black);       \
+  (result) = Val_hp (caml_young_ptr);                                       \
+  DEBUG_clear ((result), (wosize));                                         \
+}while(0)
+
+/* You must use [Modify] to change a field of an existing shared block,
+   unless you are sure the value being overwritten is not a shared block and
+   the value being written is not a young block. */
+/* [Modify] never calls the GC. */
+/* [Modify] can also be used to do assignment on data structures that are
+   not in the (major) heap.  In this case, it is a bit slower than
+   simple assignment.
+   In particular, you can use [Modify] when you don't know whether the
+   block being changed is in the minor heap or the major heap.
+*/
+
+#define Modify(fp, val) do{                                                 \
+  value _old_ = *(fp);                                                      \
+  *(fp) = (val);                                                            \
+  if (Is_in_heap (fp)){                                                     \
+    if (caml_gc_phase == Phase_mark) caml_darken (_old_, NULL);             \
+    if (Is_block (val) && Is_young (val)                                    \
+        && ! (Is_block (_old_) && Is_young (_old_))){                       \
+      if (caml_ref_table.ptr >= caml_ref_table.limit){                      \
+        CAMLassert (caml_ref_table.ptr == caml_ref_table.limit);            \
+        caml_realloc_ref_table (&caml_ref_table);                           \
+      }                                                                     \
+      *caml_ref_table.ptr++ = (fp);                                         \
+    }                                                                       \
+  }                                                                         \
+}while(0)
+
+/* </private> */
+
+struct caml__roots_block {
+  struct caml__roots_block *next;
+  intnat ntables;
+  intnat nitems;
+  value *tables [5];
+};
+
+CAMLextern struct caml__roots_block *caml_local_roots;  /* defined in roots.c */
+
+/* The following macros are used to declare C local variables and
+   function parameters of type [value].
+
+   The function body must start with one of the [CAMLparam] macros.
+   If the function has no parameter of type [value], use [CAMLparam0].
+   If the function has 1 to 5 [value] parameters, use the corresponding
+   [CAMLparam] with the parameters as arguments.
+   If the function has more than 5 [value] parameters, use [CAMLparam5]
+   for the first 5 parameters, and one or more calls to the [CAMLxparam]
+   macros for the others.
+   If the function takes an array of [value]s as argument, use
+   [CAMLparamN] to declare it (or [CAMLxparamN] if you already have a
+   call to [CAMLparam] for some other arguments).
+
+   If you need local variables of type [value], declare them with one
+   or more calls to the [CAMLlocal] macros at the beginning of the
+   function, after the call to CAMLparam.  Use [CAMLlocalN] (at the
+   beginning of the function) to declare an array of [value]s.
+
+   Your function may raise an exception or return a [value] with the
+   [CAMLreturn] macro.  Its argument is simply the [value] returned by
+   your function.  Do NOT directly return a [value] with the [return]
+   keyword.  If your function returns void, use [CAMLreturn0].
+
+   All the identifiers beginning with "caml__" are reserved by OCaml.
+   Do not use them for anything (local or global variables, struct or
+   union tags, macros, etc.)
+*/
+
+#define CAMLparam0() \
+  struct caml__roots_block *caml__frame = caml_local_roots
+
+#define CAMLparam1(x) \
+  CAMLparam0 (); \
+  CAMLxparam1 (x)
+
+#define CAMLparam2(x, y) \
+  CAMLparam0 (); \
+  CAMLxparam2 (x, y)
+
+#define CAMLparam3(x, y, z) \
+  CAMLparam0 (); \
+  CAMLxparam3 (x, y, z)
+
+#define CAMLparam4(x, y, z, t) \
+  CAMLparam0 (); \
+  CAMLxparam4 (x, y, z, t)
+
+#define CAMLparam5(x, y, z, t, u) \
+  CAMLparam0 (); \
+  CAMLxparam5 (x, y, z, t, u)
+
+#define CAMLparamN(x, size) \
+  CAMLparam0 (); \
+  CAMLxparamN (x, (size))
+
+
+#if defined (__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 7))
+  #define CAMLunused __attribute__ ((unused))
+#else
+  #define CAMLunused
+#endif
+
+#define CAMLxparam1(x) \
+  struct caml__roots_block caml__roots_##x; \
+  CAMLunused int caml__dummy_##x = ( \
+    (caml__roots_##x.next = caml_local_roots), \
+    (caml_local_roots = &caml__roots_##x), \
+    (caml__roots_##x.nitems = 1), \
+    (caml__roots_##x.ntables = 1), \
+    (caml__roots_##x.tables [0] = &x), \
+    0)
+
+#define CAMLxparam2(x, y) \
+  struct caml__roots_block caml__roots_##x; \
+  CAMLunused int caml__dummy_##x = ( \
+    (caml__roots_##x.next = caml_local_roots), \
+    (caml_local_roots = &caml__roots_##x), \
+    (caml__roots_##x.nitems = 1), \
+    (caml__roots_##x.ntables = 2), \
+    (caml__roots_##x.tables [0] = &x), \
+    (caml__roots_##x.tables [1] = &y), \
+    0)
+
+#define CAMLxparam3(x, y, z) \
+  struct caml__roots_block caml__roots_##x; \
+  CAMLunused int caml__dummy_##x = ( \
+    (caml__roots_##x.next = caml_local_roots), \
+    (caml_local_roots = &caml__roots_##x), \
+    (caml__roots_##x.nitems = 1), \
+    (caml__roots_##x.ntables = 3), \
+    (caml__roots_##x.tables [0] = &x), \
+    (caml__roots_##x.tables [1] = &y), \
+    (caml__roots_##x.tables [2] = &z), \
+    0)
+
+#define CAMLxparam4(x, y, z, t) \
+  struct caml__roots_block caml__roots_##x; \
+  CAMLunused int caml__dummy_##x = ( \
+    (caml__roots_##x.next = caml_local_roots), \
+    (caml_local_roots = &caml__roots_##x), \
+    (caml__roots_##x.nitems = 1), \
+    (caml__roots_##x.ntables = 4), \
+    (caml__roots_##x.tables [0] = &x), \
+    (caml__roots_##x.tables [1] = &y), \
+    (caml__roots_##x.tables [2] = &z), \
+    (caml__roots_##x.tables [3] = &t), \
+    0)
+
+#define CAMLxparam5(x, y, z, t, u) \
+  struct caml__roots_block caml__roots_##x; \
+  CAMLunused int caml__dummy_##x = ( \
+    (caml__roots_##x.next = caml_local_roots), \
+    (caml_local_roots = &caml__roots_##x), \
+    (caml__roots_##x.nitems = 1), \
+    (caml__roots_##x.ntables = 5), \
+    (caml__roots_##x.tables [0] = &x), \
+    (caml__roots_##x.tables [1] = &y), \
+    (caml__roots_##x.tables [2] = &z), \
+    (caml__roots_##x.tables [3] = &t), \
+    (caml__roots_##x.tables [4] = &u), \
+    0)
+
+#define CAMLxparamN(x, size) \
+  struct caml__roots_block caml__roots_##x; \
+  CAMLunused int caml__dummy_##x = ( \
+    (caml__roots_##x.next = caml_local_roots), \
+    (caml_local_roots = &caml__roots_##x), \
+    (caml__roots_##x.nitems = (size)), \
+    (caml__roots_##x.ntables = 1), \
+    (caml__roots_##x.tables[0] = &(x[0])), \
+    0)
+
+#define CAMLlocal1(x) \
+  value x = 0; \
+  CAMLxparam1 (x)
+
+#define CAMLlocal2(x, y) \
+  value x = 0, y = 0; \
+  CAMLxparam2 (x, y)
+
+#define CAMLlocal3(x, y, z) \
+  value x = 0, y = 0, z = 0; \
+  CAMLxparam3 (x, y, z)
+
+#define CAMLlocal4(x, y, z, t) \
+  value x = 0, y = 0, z = 0, t = 0; \
+  CAMLxparam4 (x, y, z, t)
+
+#define CAMLlocal5(x, y, z, t, u) \
+  value x = 0, y = 0, z = 0, t = 0, u = 0; \
+  CAMLxparam5 (x, y, z, t, u)
+
+#define CAMLlocalN(x, size) \
+  value x [(size)] = { 0, /* 0, 0, ... */ }; \
+  CAMLxparamN (x, (size))
+
+
+#define CAMLreturn0 do{ \
+  caml_local_roots = caml__frame; \
+  return; \
+}while (0)
+
+#define CAMLreturnT(type, result) do{ \
+  type caml__temp_result = (result); \
+  caml_local_roots = caml__frame; \
+  return (caml__temp_result); \
+}while(0)
+
+#define CAMLreturn(result) CAMLreturnT(value, result)
+
+#define CAMLnoreturn ((void) caml__frame)
+
+
+/* convenience macro */
+#define Store_field(block, offset, val) do{ \
+  mlsize_t caml__temp_offset = (offset); \
+  value caml__temp_val = (val); \
+  caml_modify (&Field ((block), caml__temp_offset), caml__temp_val); \
+}while(0)
+
+/*
+   NOTE: [Begin_roots] and [End_roots] are superseded by [CAMLparam]*,
+   [CAMLxparam]*, [CAMLlocal]*, [CAMLreturn].
+
+   [Begin_roots] and [End_roots] are used for C variables that are GC roots.
+   It must contain all values in C local variables and function parameters
+   at the time the minor GC is called.
+   Usage:
+   After initialising your local variables to legal OCaml values, but before
+   calling allocation functions, insert [Begin_roots_n(v1, ... vn)], where
+   v1 ... vn are your variables of type [value] that you want to be updated
+   across allocations.
+   At the end, insert [End_roots()].
+
+   Note that [Begin_roots] opens a new block, and [End_roots] closes it.
+   Thus they must occur in matching pairs at the same brace nesting level.
+
+   You can use [Val_unit] as a dummy initial value for your variables.
+*/
+
+#define Begin_root Begin_roots1
+
+#define Begin_roots1(r0) { \
+  struct caml__roots_block caml__roots_block; \
+  caml__roots_block.next = caml_local_roots; \
+  caml_local_roots = &caml__roots_block; \
+  caml__roots_block.nitems = 1; \
+  caml__roots_block.ntables = 1; \
+  caml__roots_block.tables[0] = &(r0);
+
+#define Begin_roots2(r0, r1) { \
+  struct caml__roots_block caml__roots_block; \
+  caml__roots_block.next = caml_local_roots; \
+  caml_local_roots = &caml__roots_block; \
+  caml__roots_block.nitems = 1; \
+  caml__roots_block.ntables = 2; \
+  caml__roots_block.tables[0] = &(r0); \
+  caml__roots_block.tables[1] = &(r1);
+
+#define Begin_roots3(r0, r1, r2) { \
+  struct caml__roots_block caml__roots_block; \
+  caml__roots_block.next = caml_local_roots; \
+  caml_local_roots = &caml__roots_block; \
+  caml__roots_block.nitems = 1; \
+  caml__roots_block.ntables = 3; \
+  caml__roots_block.tables[0] = &(r0); \
+  caml__roots_block.tables[1] = &(r1); \
+  caml__roots_block.tables[2] = &(r2);
+
+#define Begin_roots4(r0, r1, r2, r3) { \
+  struct caml__roots_block caml__roots_block; \
+  caml__roots_block.next = caml_local_roots; \
+  caml_local_roots = &caml__roots_block; \
+  caml__roots_block.nitems = 1; \
+  caml__roots_block.ntables = 4; \
+  caml__roots_block.tables[0] = &(r0); \
+  caml__roots_block.tables[1] = &(r1); \
+  caml__roots_block.tables[2] = &(r2); \
+  caml__roots_block.tables[3] = &(r3);
+
+#define Begin_roots5(r0, r1, r2, r3, r4) { \
+  struct caml__roots_block caml__roots_block; \
+  caml__roots_block.next = caml_local_roots; \
+  caml_local_roots = &caml__roots_block; \
+  caml__roots_block.nitems = 1; \
+  caml__roots_block.ntables = 5; \
+  caml__roots_block.tables[0] = &(r0); \
+  caml__roots_block.tables[1] = &(r1); \
+  caml__roots_block.tables[2] = &(r2); \
+  caml__roots_block.tables[3] = &(r3); \
+  caml__roots_block.tables[4] = &(r4);
+
+#define Begin_roots_block(table, size) { \
+  struct caml__roots_block caml__roots_block; \
+  caml__roots_block.next = caml_local_roots; \
+  caml_local_roots = &caml__roots_block; \
+  caml__roots_block.nitems = (size); \
+  caml__roots_block.ntables = 1; \
+  caml__roots_block.tables[0] = (table);
+
+#define End_roots() caml_local_roots = caml__roots_block.next; }
+
+
+/* [caml_register_global_root] registers a global C variable as a memory root
+   for the duration of the program, or until [caml_remove_global_root] is
+   called. */
+
+CAMLextern void caml_register_global_root (value *);
+
+/* [caml_remove_global_root] removes a memory root registered on a global C
+   variable with [caml_register_global_root]. */
+
+CAMLextern void caml_remove_global_root (value *);
+
+/* [caml_register_generational_global_root] registers a global C
+   variable as a memory root for the duration of the program, or until
+   [caml_remove_generational_global_root] is called.
+   The program guarantees that the value contained in this variable
+   will not be assigned directly.  If the program needs to change
+   the value of this variable, it must do so by calling
+   [caml_modify_generational_global_root].  The [value *] pointer
+   passed to [caml_register_generational_global_root] must contain
+   a valid OCaml value before the call.
+   In return for these constraints, scanning of memory roots during
+   minor collection is made more efficient. */
+
+CAMLextern void caml_register_generational_global_root (value *);
+
+/* [caml_remove_generational_global_root] removes a memory root
+   registered on a global C variable with
+   [caml_register_generational_global_root]. */
+
+CAMLextern void caml_remove_generational_global_root (value *);
+
+/* [caml_modify_generational_global_root(r, newval)]
+   modifies the value contained in [r], storing [newval] inside.
+   In other words, the assignment [*r = newval] is performed,
+   but in a way that is compatible with the optimized scanning of
+   generational global roots.  [r] must be a global memory root
+   previously registered with [caml_register_generational_global_root]. */
+
+CAMLextern void caml_modify_generational_global_root(value *r, value newval);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* CAML_MEMORY_H */
diff --git a/byterun/caml/minor_gc.h b/byterun/caml/minor_gc.h
new file mode 100644
index 0000000..0258f4f
--- /dev/null
+++ b/byterun/caml/minor_gc.h
@@ -0,0 +1,56 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_MINOR_GC_H
+#define CAML_MINOR_GC_H
+
+
+#include "misc.h"
+
+CAMLextern char *caml_young_start, *caml_young_ptr;
+CAMLextern char *caml_young_end, *caml_young_limit;
+extern asize_t caml_minor_heap_size;
+extern int caml_in_minor_collection;
+
+struct caml_ref_table {
+  value **base;
+  value **end;
+  value **threshold;
+  value **ptr;
+  value **limit;
+  asize_t size;
+  asize_t reserve;
+};
+CAMLextern struct caml_ref_table caml_ref_table, caml_weak_ref_table;
+
+#define Is_young(val) \
+  (Assert (Is_block (val)), \
+   (addr)(val) < (addr)caml_young_end && (addr)(val) > (addr)caml_young_start)
+
+extern void caml_set_minor_heap_size (asize_t);
+extern void caml_empty_minor_heap (void);
+CAMLextern void caml_minor_collection (void);
+CAMLextern void garbage_collection (void); /* def in asmrun/signals.c */
+extern void caml_realloc_ref_table (struct caml_ref_table *);
+extern void caml_alloc_table (struct caml_ref_table *, asize_t, asize_t);
+extern void caml_oldify_one (value, value *);
+extern void caml_oldify_mopup (void);
+
+#define Oldify(p) do{ \
+    value __oldify__v__ = *p; \
+    if (Is_block (__oldify__v__) && Is_young (__oldify__v__)){ \
+      caml_oldify_one (__oldify__v__, (p)); \
+    } \
+  }while(0)
+
+#endif /* CAML_MINOR_GC_H */
diff --git a/byterun/caml/misc.h b/byterun/caml/misc.h
new file mode 100644
index 0000000..2529bc6
--- /dev/null
+++ b/byterun/caml/misc.h
@@ -0,0 +1,135 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Miscellaneous macros and variables. */
+
+#ifndef CAML_MISC_H
+#define CAML_MISC_H
+
+#ifndef CAML_NAME_SPACE
+#include "compatibility.h"
+#endif
+#include "config.h"
+
+/* Standard definitions */
+
+#include <stddef.h>
+#include <stdlib.h>
+
+/* Basic types and constants */
+
+typedef size_t asize_t;
+
+#ifndef NULL
+#define NULL 0
+#endif
+
+/* <private> */
+typedef char * addr;
+/* </private> */
+
+#ifdef __GNUC__
+  /* Works only in GCC 2.5 and later */
+  #define Noreturn __attribute__ ((noreturn))
+#else
+  #define Noreturn
+#endif
+
+/* Export control (to mark primitives and to handle Windows DLL) */
+
+#define CAMLexport
+#define CAMLprim
+#define CAMLextern extern
+
+/* Assertions */
+
+/* <private> */
+
+#ifdef DEBUG
+#define CAMLassert(x) \
+  ((x) ? (void) 0 : caml_failed_assert ( #x , __FILE__, __LINE__))
+CAMLextern int caml_failed_assert (char *, char *, int);
+#else
+#define CAMLassert(x) ((void) 0)
+#endif
+
+CAMLextern void caml_fatal_error (char *msg) Noreturn;
+CAMLextern void caml_fatal_error_arg (char *fmt, char *arg) Noreturn;
+CAMLextern void caml_fatal_error_arg2 (char *fmt1, char *arg1,
+                                       char *fmt2, char *arg2) Noreturn;
+
+/* Data structures */
+
+struct ext_table {
+  int size;
+  int capacity;
+  void ** contents;
+};
+
+extern void caml_ext_table_init(struct ext_table * tbl, int init_capa);
+extern int caml_ext_table_add(struct ext_table * tbl, void * data);
+extern void caml_ext_table_free(struct ext_table * tbl, int free_entries);
+
+/* GC flags and messages */
+
+extern uintnat caml_verb_gc;
+void caml_gc_message (int, char *, uintnat);
+
+/* Memory routines */
+
+char *caml_aligned_malloc (asize_t, int, void **);
+
+#ifdef DEBUG
+#ifdef ARCH_SIXTYFOUR
+#define Debug_tag(x) (0xD700D7D7D700D6D7ul \
+                      | ((uintnat) (x) << 16) \
+                      | ((uintnat) (x) << 48))
+#else
+#define Debug_tag(x) (0xD700D6D7ul | ((uintnat) (x) << 16))
+#endif /* ARCH_SIXTYFOUR */
+
+/*
+  00 -> free words in minor heap
+  01 -> fields of free list blocks in major heap
+  03 -> heap chunks deallocated by heap shrinking
+  04 -> fields deallocated by [caml_obj_truncate]
+  10 -> uninitialised fields of minor objects
+  11 -> uninitialised fields of major objects
+  15 -> uninitialised words of [caml_aligned_malloc] blocks
+  85 -> filler bytes of [caml_aligned_malloc]
+
+  special case (byte by byte):
+  D7 -> uninitialised words of [caml_stat_alloc] blocks
+*/
+#define Debug_free_minor     Debug_tag (0x00)
+#define Debug_free_major     Debug_tag (0x01)
+#define Debug_free_shrink    Debug_tag (0x03)
+#define Debug_free_truncate  Debug_tag (0x04)
+#define Debug_uninit_minor   Debug_tag (0x10)
+#define Debug_uninit_major   Debug_tag (0x11)
+#define Debug_uninit_align   Debug_tag (0x15)
+#define Debug_filler_align   Debug_tag (0x85)
+
+#define Debug_uninit_stat    0xD7
+
+extern void caml_set_fields (char *, unsigned long, unsigned long);
+#endif /* DEBUG */
+
+
+#ifndef CAML_AVOID_CONFLICTS
+#define Assert CAMLassert
+#endif
+
+/* </private> */
+
+#endif /* CAML_MISC_H */
diff --git a/byterun/caml/mlvalues.h b/byterun/caml/mlvalues.h
new file mode 100644
index 0000000..cbb1c7b
--- /dev/null
+++ b/byterun/caml/mlvalues.h
@@ -0,0 +1,304 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_MLVALUES_H
+#define CAML_MLVALUES_H
+
+#ifndef CAML_NAME_SPACE
+#include "compatibility.h"
+#endif
+#include "config.h"
+#include "misc.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* Definitions
+
+  word: Four bytes on 32 and 16 bit architectures,
+        eight bytes on 64 bit architectures.
+  long: A C integer having the same number of bytes as a word.
+  val: The ML representation of something.  A long or a block or a pointer
+       outside the heap.  If it is a block, it is the (encoded) address
+       of an object.  If it is a long, it is encoded as well.
+  block: Something allocated.  It always has a header and some
+          fields or some number of bytes (a multiple of the word size).
+  field: A word-sized val which is part of a block.
+  bp: Pointer to the first byte of a block.  (a char *)
+  op: Pointer to the first field of a block.  (a value *)
+  hp: Pointer to the header of a block.  (a char *)
+  int32: Four bytes on all architectures.
+  int64: Eight bytes on all architectures.
+
+  Remark: A block size is always a multiple of the word size, and at least
+          one word plus the header.
+
+  bosize: Size (in bytes) of the "bytes" part.
+  wosize: Size (in words) of the "fields" part.
+  bhsize: Size (in bytes) of the block with its header.
+  whsize: Size (in words) of the block with its header.
+
+  hd: A header.
+  tag: The value of the tag field of the header.
+  color: The value of the color field of the header.
+         This is for use only by the GC.
+*/
+
+typedef intnat value;
+typedef uintnat header_t;
+typedef uintnat mlsize_t;
+typedef unsigned int tag_t;             /* Actually, an unsigned char */
+typedef uintnat color_t;
+typedef uintnat mark_t;
+
+/* Longs vs blocks. */
+#define Is_long(x)   (((x) & 1) != 0)
+#define Is_block(x)  (((x) & 1) == 0)
+
+/* Conversion macro names are always of the form  "to_from". */
+/* Example: Val_long as in "Val from long" or "Val of long". */
+#define Val_long(x)     (((intnat)(x) << 1) + 1)
+#define Long_val(x)     ((x) >> 1)
+#define Max_long (((intnat)1 << (8 * sizeof(value) - 2)) - 1)
+#define Min_long (-((intnat)1 << (8 * sizeof(value) - 2)))
+#define Val_int(x) Val_long(x)
+#define Int_val(x) ((int) Long_val(x))
+#define Unsigned_long_val(x) ((uintnat)(x) >> 1)
+#define Unsigned_int_val(x)  ((int) Unsigned_long_val(x))
+
+/* Structure of the header:
+
+For 16-bit and 32-bit architectures:
+     +--------+-------+-----+
+     | wosize | color | tag |
+     +--------+-------+-----+
+bits  31    10 9     8 7   0
+
+For 64-bit architectures:
+
+     +--------+-------+-----+
+     | wosize | color | tag |
+     +--------+-------+-----+
+bits  63    10 9     8 7   0
+
+*/
+
+#define Tag_hd(hd) ((tag_t) ((hd) & 0xFF))
+#define Wosize_hd(hd) ((mlsize_t) ((hd) >> 10))
+
+#define Hd_val(val) (((header_t *) (val)) [-1])        /* Also an l-value. */
+#define Hd_op(op) (Hd_val (op))                        /* Also an l-value. */
+#define Hd_bp(bp) (Hd_val (bp))                        /* Also an l-value. */
+#define Hd_hp(hp) (* ((header_t *) (hp)))              /* Also an l-value. */
+#define Hp_val(val) ((char *) (((header_t *) (val)) - 1))
+#define Hp_op(op) (Hp_val (op))
+#define Hp_bp(bp) (Hp_val (bp))
+#define Val_op(op) ((value) (op))
+#define Val_hp(hp) ((value) (((header_t *) (hp)) + 1))
+#define Op_hp(hp) ((value *) Val_hp (hp))
+#define Bp_hp(hp) ((char *) Val_hp (hp))
+
+#define Num_tags (1 << 8)
+#ifdef ARCH_SIXTYFOUR
+#define Max_wosize (((intnat)1 << 54) - 1)
+#else
+#define Max_wosize ((1 << 22) - 1)
+#endif
+
+#define Wosize_val(val) (Wosize_hd (Hd_val (val)))
+#define Wosize_op(op) (Wosize_val (op))
+#define Wosize_bp(bp) (Wosize_val (bp))
+#define Wosize_hp(hp) (Wosize_hd (Hd_hp (hp)))
+#define Whsize_wosize(sz) ((sz) + 1)
+#define Wosize_whsize(sz) ((sz) - 1)
+#define Wosize_bhsize(sz) ((sz) / sizeof (value) - 1)
+#define Bsize_wsize(sz) ((sz) * sizeof (value))
+#define Wsize_bsize(sz) ((sz) / sizeof (value))
+#define Bhsize_wosize(sz) (Bsize_wsize (Whsize_wosize (sz)))
+#define Bhsize_bosize(sz) ((sz) + sizeof (header_t))
+#define Bosize_val(val) (Bsize_wsize (Wosize_val (val)))
+#define Bosize_op(op) (Bosize_val (Val_op (op)))
+#define Bosize_bp(bp) (Bosize_val (Val_bp (bp)))
+#define Bosize_hd(hd) (Bsize_wsize (Wosize_hd (hd)))
+#define Whsize_hp(hp) (Whsize_wosize (Wosize_hp (hp)))
+#define Whsize_val(val) (Whsize_hp (Hp_val (val)))
+#define Whsize_bp(bp) (Whsize_val (Val_bp (bp)))
+#define Whsize_hd(hd) (Whsize_wosize (Wosize_hd (hd)))
+#define Bhsize_hp(hp) (Bsize_wsize (Whsize_hp (hp)))
+#define Bhsize_hd(hd) (Bsize_wsize (Whsize_hd (hd)))
+
+#ifdef ARCH_BIG_ENDIAN
+#define Tag_val(val) (((unsigned char *) (val)) [-1])
+                                                 /* Also an l-value. */
+#define Tag_hp(hp) (((unsigned char *) (hp)) [sizeof(value)-1])
+                                                 /* Also an l-value. */
+#else
+#define Tag_val(val) (((unsigned char *) (val)) [-sizeof(value)])
+                                                 /* Also an l-value. */
+#define Tag_hp(hp) (((unsigned char *) (hp)) [0])
+                                                 /* Also an l-value. */
+#endif
+
+/* The lowest tag for blocks containing no value. */
+#define No_scan_tag 251
+
+
+/* 1- If tag < No_scan_tag : a tuple of fields.  */
+
+/* Pointer to the first field. */
+#define Op_val(x) ((value *) (x))
+/* Fields are numbered from 0. */
+#define Field(x, i) (((value *)(x)) [i])           /* Also an l-value. */
+
+typedef int32 opcode_t;
+typedef opcode_t * code_t;
+
+/* NOTE: [Forward_tag] and [Infix_tag] must be just under
+   [No_scan_tag], with [Infix_tag] the lower one.
+   See [caml_oldify_one] in minor_gc.c for more details.
+
+   NOTE: Update stdlib/obj.ml whenever you change the tags.
+ */
+
+/* Forward_tag: forwarding pointer that the GC may silently shortcut.
+   See stdlib/lazy.ml. */
+#define Forward_tag 250
+#define Forward_val(v) Field(v, 0)
+
+/* If tag == Infix_tag : an infix header inside a closure */
+/* Infix_tag must be odd so that the infix header is scanned as an integer */
+/* Infix_tag must be 1 modulo 4 and infix headers can only occur in blocks
+   with tag Closure_tag (see compact.c). */
+
+#define Infix_tag 249
+#define Infix_offset_hd(hd) (Bosize_hd(hd))
+#define Infix_offset_val(v) Infix_offset_hd(Hd_val(v))
+
+/* Another special case: objects */
+#define Object_tag 248
+#define Class_val(val) Field((val), 0)
+#define Oid_val(val) Long_val(Field((val), 1))
+CAMLextern value caml_get_public_method (value obj, value tag);
+/* Called as:
+   caml_callback(caml_get_public_method(obj, caml_hash_variant(name)), obj) */
+/* caml_get_public_method returns 0 if tag not in the table.
+   Note however that tags being hashed, same tag does not necessarily mean
+   same method name. */
+
+/* Special case of tuples of fields: closures */
+#define Closure_tag 247
+#define Code_val(val) (((code_t *) (val)) [0])     /* Also an l-value. */
+
+/* This tag is used (with Forward_tag) to implement lazy values.
+   See major_gc.c and stdlib/lazy.ml. */
+#define Lazy_tag 246
+
+/* Another special case: variants */
+CAMLextern value caml_hash_variant(char const * tag);
+
+/* 2- If tag >= No_scan_tag : a sequence of bytes. */
+
+/* Pointer to the first byte */
+#define Bp_val(v) ((char *) (v))
+#define Val_bp(p) ((value) (p))
+/* Bytes are numbered from 0. */
+#define Byte(x, i) (((char *) (x)) [i])            /* Also an l-value. */
+#define Byte_u(x, i) (((unsigned char *) (x)) [i]) /* Also an l-value. */
+
+/* Abstract things.  Their contents is not traced by the GC; therefore they
+   must not contain any [value].
+*/
+#define Abstract_tag 251
+
+/* Strings. */
+#define String_tag 252
+#define String_val(x) ((char *) Bp_val(x))
+CAMLextern mlsize_t caml_string_length (value);   /* size in bytes */
+
+/* Floating-point numbers. */
+#define Double_tag 253
+#define Double_wosize ((sizeof(double) / sizeof(value)))
+#ifndef ARCH_ALIGN_DOUBLE
+#define Double_val(v) (* (double *)(v))
+#define Store_double_val(v,d) (* (double *)(v) = (d))
+#else
+CAMLextern double caml_Double_val (value);
+CAMLextern void caml_Store_double_val (value,double);
+#define Double_val(v) caml_Double_val(v)
+#define Store_double_val(v,d) caml_Store_double_val(v,d)
+#endif
+
+/* Arrays of floating-point numbers. */
+#define Double_array_tag 254
+#define Double_field(v,i) Double_val((value)((double *)(v) + (i)))
+#define Store_double_field(v,i,d) do{ \
+  mlsize_t caml__temp_i = (i); \
+  double caml__temp_d = (d); \
+  Store_double_val((value)((double *) (v) + caml__temp_i), caml__temp_d); \
+}while(0)
+CAMLextern mlsize_t caml_array_length (value);   /* size in items */
+CAMLextern int caml_is_double_array (value);   /* 0 is false, 1 is true */
+
+
+/* Custom blocks.  They contain a pointer to a "method suite"
+   of functions (for finalization, comparison, hashing, etc)
+   followed by raw data.  The contents of custom blocks is not traced by
+   the GC; therefore, they must not contain any [value].
+   See [custom.h] for operations on method suites. */
+#define Custom_tag 255
+#define Data_custom_val(v) ((void *) &Field((v), 1))
+struct custom_operations;       /* defined in [custom.h] */
+
+/* Int32.t, Int64.t and Nativeint.t are represented as custom blocks. */
+
+#define Int32_val(v) (*((int32 *) Data_custom_val(v)))
+#define Nativeint_val(v) (*((intnat *) Data_custom_val(v)))
+#ifndef ARCH_ALIGN_INT64
+#define Int64_val(v) (*((int64 *) Data_custom_val(v)))
+#else
+CAMLextern int64 caml_Int64_val(value v);
+#define Int64_val(v) caml_Int64_val(v)
+#endif
+
+/* 3- Atoms are 0-tuples.  They are statically allocated once and for all. */
+
+CAMLextern header_t caml_atom_table[];
+#define Atom(tag) (Val_hp (&(caml_atom_table [(tag)])))
+
+/* Booleans are integers 0 or 1 */
+
+#define Val_bool(x) Val_int((x) != 0)
+#define Bool_val(x) Int_val(x)
+#define Val_false Val_int(0)
+#define Val_true Val_int(1)
+#define Val_not(x) (Val_false + Val_true - (x))
+
+/* The unit value is 0 (tagged) */
+
+#define Val_unit Val_int(0)
+
+/* List constructors */
+#define Val_emptylist Val_int(0)
+#define Tag_cons 0
+
+/* The table of global identifiers */
+
+extern value caml_global_data;
+
+#ifdef __cplusplus
+}
+#endif
+
+
+#endif /* CAML_MLVALUES_H */
diff --git a/byterun/caml/osdeps.h b/byterun/caml/osdeps.h
new file mode 100644
index 0000000..8123d49
--- /dev/null
+++ b/byterun/caml/osdeps.h
@@ -0,0 +1,69 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*           Xavier Leroy, projet Cristal, INRIA Rocquencourt          */
+/*                                                                     */
+/*  Copyright 2001 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Operating system - specific stuff */
+
+#ifndef CAML_OSDEPS_H
+#define CAML_OSDEPS_H
+
+#include "misc.h"
+
+/* Decompose the given path into a list of directories, and add them
+   to the given table.  Return the block to be freed later. */
+extern char * caml_decompose_path(struct ext_table * tbl, char * path);
+
+/* Search the given file in the given list of directories.
+   If not found, return a copy of [name].  Result is allocated with
+   [caml_stat_alloc]. */
+extern char * caml_search_in_path(struct ext_table * path, char * name);
+
+/* Same, but search an executable name in the system path for executables. */
+CAMLextern char * caml_search_exe_in_path(char * name);
+
+/* Same, but search a shared library in the given path. */
+extern char * caml_search_dll_in_path(struct ext_table * path, char * name);
+
+/* Open a shared library and return a handle on it.
+   If [for_execution] is true, perform full symbol resolution and
+   execute initialization code so that functions from the shared library
+   can be called.  If [for_execution] is false, functions from this
+   shared library will not be called, but just checked for presence,
+   so symbol resolution can be skipped.
+   If [global] is true, symbols from the shared library can be used
+   to resolve for other libraries to be opened later on.
+   Return [NULL] on error. */
+extern void * caml_dlopen(char * libname, int for_execution, int global);
+
+/* Close a shared library handle */
+extern void caml_dlclose(void * handle);
+
+/* Look up the given symbol in the given shared library.
+   Return [NULL] if not found, or symbol value if found. */
+extern void * caml_dlsym(void * handle, char * name);
+
+extern void * caml_globalsym(char * name);
+
+/* Return an error message describing the most recent dynlink failure. */
+extern char * caml_dlerror(void);
+
+/* Add to [contents] the (short) names of the files contained in
+   the directory named [dirname].  No entries are added for [.] and [..].
+   Return 0 on success, -1 on error; set errno in the case of error. */
+extern int caml_read_directory(char * dirname, struct ext_table * contents);
+
+#ifdef __linux__
+/* Recover executable name from /proc/self/exe if possible */
+extern int caml_executable_name(char * name, int name_len);
+#endif
+
+#endif /* CAML_OSDEPS_H */
diff --git a/byterun/caml/prims.h b/byterun/caml/prims.h
new file mode 100644
index 0000000..7a99678
--- /dev/null
+++ b/byterun/caml/prims.h
@@ -0,0 +1,34 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Interface with C primitives. */
+
+#ifndef CAML_PRIMS_H
+#define CAML_PRIMS_H
+
+typedef value (*c_primitive)();
+
+extern c_primitive caml_builtin_cprim[];
+extern char * caml_names_of_builtin_cprim[];
+
+extern struct ext_table caml_prim_table;
+#ifdef DEBUG
+extern struct ext_table caml_prim_name_table;
+#endif
+
+#define Primitive(n) ((c_primitive)(caml_prim_table.contents[n]))
+
+extern char * caml_section_table;
+extern asize_t caml_section_table_size;
+
+#endif /* CAML_PRIMS_H */
diff --git a/byterun/caml/printexc.h b/byterun/caml/printexc.h
new file mode 100644
index 0000000..748faa9
--- /dev/null
+++ b/byterun/caml/printexc.h
@@ -0,0 +1,33 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2001 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_PRINTEXC_H
+#define CAML_PRINTEXC_H
+
+
+#include "misc.h"
+#include "mlvalues.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+CAMLextern char * caml_format_exception (value);
+void caml_fatal_uncaught_exception (value) Noreturn;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* CAML_PRINTEXC_H */
diff --git a/byterun/caml/reverse.h b/byterun/caml/reverse.h
new file mode 100644
index 0000000..09d34a5
--- /dev/null
+++ b/byterun/caml/reverse.h
@@ -0,0 +1,86 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Swap byte-order in 16, 32, and 64-bit integers or floats */
+
+#ifndef CAML_REVERSE_H
+#define CAML_REVERSE_H
+
+#define Reverse_16(dst,src) {                                               \
+  char * _p, * _q;                                                          \
+  char _a;                                                                  \
+  _p = (char *) (src);                                                      \
+  _q = (char *) (dst);                                                      \
+  _a = _p[0];                                                               \
+  _q[0] = _p[1];                                                            \
+  _q[1] = _a;                                                               \
+}
+
+#define Reverse_32(dst,src) {                                               \
+  char * _p, * _q;                                                          \
+  char _a, _b;                                                              \
+  _p = (char *) (src);                                                      \
+  _q = (char *) (dst);                                                      \
+  _a = _p[0];                                                               \
+  _b = _p[1];                                                               \
+  _q[0] = _p[3];                                                            \
+  _q[1] = _p[2];                                                            \
+  _q[3] = _a;                                                               \
+  _q[2] = _b;                                                               \
+}
+
+#define Reverse_64(dst,src) {                                               \
+  char * _p, * _q;                                                          \
+  char _a, _b;                                                              \
+  _p = (char *) (src);                                                      \
+  _q = (char *) (dst);                                                      \
+  _a = _p[0];                                                               \
+  _b = _p[1];                                                               \
+  _q[0] = _p[7];                                                            \
+  _q[1] = _p[6];                                                            \
+  _q[7] = _a;                                                               \
+  _q[6] = _b;                                                               \
+  _a = _p[2];                                                               \
+  _b = _p[3];                                                               \
+  _q[2] = _p[5];                                                            \
+  _q[3] = _p[4];                                                            \
+  _q[5] = _a;                                                               \
+  _q[4] = _b;                                                               \
+}
+
+#define Perm_index(perm,i) ((perm >> (i * 4)) & 0xF)
+
+#define Permute_64(dst,perm_dst,src,perm_src) {                             \
+  char * _p;                                                                \
+  char _a, _b, _c, _d, _e, _f, _g, _h;                                      \
+  _p = (char *) (src);                                                      \
+  _a = _p[Perm_index(perm_src, 0)];                                         \
+  _b = _p[Perm_index(perm_src, 1)];                                         \
+  _c = _p[Perm_index(perm_src, 2)];                                         \
+  _d = _p[Perm_index(perm_src, 3)];                                         \
+  _e = _p[Perm_index(perm_src, 4)];                                         \
+  _f = _p[Perm_index(perm_src, 5)];                                         \
+  _g = _p[Perm_index(perm_src, 6)];                                         \
+  _h = _p[Perm_index(perm_src, 7)];                                         \
+  _p = (char *) (dst);                                                      \
+  _p[Perm_index(perm_dst, 0)] = _a;                                         \
+  _p[Perm_index(perm_dst, 1)] = _b;                                         \
+  _p[Perm_index(perm_dst, 2)] = _c;                                         \
+  _p[Perm_index(perm_dst, 3)] = _d;                                         \
+  _p[Perm_index(perm_dst, 4)] = _e;                                         \
+  _p[Perm_index(perm_dst, 5)] = _f;                                         \
+  _p[Perm_index(perm_dst, 6)] = _g;                                         \
+  _p[Perm_index(perm_dst, 7)] = _h;                                         \
+}
+
+#endif /* CAML_REVERSE_H */
diff --git a/byterun/caml/roots.h b/byterun/caml/roots.h
new file mode 100644
index 0000000..ca6a5d2
--- /dev/null
+++ b/byterun/caml/roots.h
@@ -0,0 +1,36 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_ROOTS_H
+#define CAML_ROOTS_H
+
+#include "misc.h"
+#include "memory.h"
+
+typedef void (*scanning_action) (value, value *);
+
+void caml_oldify_local_roots (void);
+void caml_darken_all_roots (void);
+void caml_do_roots (scanning_action);
+#ifndef NATIVE_CODE
+CAMLextern void caml_do_local_roots (scanning_action, value *, value *,
+                                     struct caml__roots_block *);
+#else
+CAMLextern void caml_do_local_roots(scanning_action f, char * bottom_of_stack,
+                                    uintnat last_retaddr, value * gc_regs,
+                                    struct caml__roots_block * local_roots);
+#endif
+
+CAMLextern void (*caml_scan_roots_hook) (scanning_action);
+
+#endif /* CAML_ROOTS_H */
diff --git a/byterun/caml/signals.h b/byterun/caml/signals.h
new file mode 100644
index 0000000..5845166
--- /dev/null
+++ b/byterun/caml/signals.h
@@ -0,0 +1,57 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_SIGNALS_H
+#define CAML_SIGNALS_H
+
+#ifndef CAML_NAME_SPACE
+#include "compatibility.h"
+#endif
+#include "misc.h"
+#include "mlvalues.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* <private> */
+CAMLextern intnat volatile caml_signals_are_pending;
+CAMLextern intnat volatile caml_pending_signals[];
+CAMLextern int volatile caml_something_to_do;
+extern int volatile caml_force_major_slice;
+/* </private> */
+
+CAMLextern void caml_enter_blocking_section (void);
+CAMLextern void caml_leave_blocking_section (void);
+
+/* <private> */
+void caml_urge_major_slice (void);
+CAMLextern int caml_convert_signal_number (int);
+CAMLextern int caml_rev_convert_signal_number (int);
+void caml_execute_signal(int signal_number, int in_signal_handler);
+void caml_record_signal(int signal_number);
+void caml_process_pending_signals(void);
+void caml_process_event(void);
+int caml_set_signal_action(int signo, int action);
+
+CAMLextern void (*caml_enter_blocking_section_hook)(void);
+CAMLextern void (*caml_leave_blocking_section_hook)(void);
+CAMLextern int (*caml_try_leave_blocking_section_hook)(void);
+CAMLextern void (* volatile caml_async_action_hook)(void);
+/* </private> */
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* CAML_SIGNALS_H */
diff --git a/byterun/caml/signals_machdep.h b/byterun/caml/signals_machdep.h
new file mode 100644
index 0000000..4987e2f
--- /dev/null
+++ b/byterun/caml/signals_machdep.h
@@ -0,0 +1,60 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Processor-specific operation: atomic "read and clear" */
+
+#ifndef CAML_SIGNALS_MACHDEP_H
+#define CAML_SIGNALS_MACHDEP_H
+
+#if defined(__GNUC__) && defined(__i386__)
+
+#define Read_and_clear(dst,src) \
+  asm("xorl %0, %0; xchgl %0, %1" \
+      : "=r" (dst), "=m" (src) \
+      : "m" (src))
+
+#elif defined(__GNUC__) && defined(__x86_64__)
+
+#define Read_and_clear(dst,src) \
+  asm("xorq %0, %0; xchgq %0, %1" \
+      : "=r" (dst), "=m" (src) \
+      : "m" (src))
+
+#elif defined(__GNUC__) && defined(__ppc__)
+
+#define Read_and_clear(dst,src) \
+  asm("0: lwarx %0, 0, %1\n\t" \
+      "stwcx. %2, 0, %1\n\t" \
+      "bne- 0b" \
+      : "=&r" (dst) \
+      : "r" (&(src)), "r" (0) \
+      : "cr0", "memory")
+
+#elif defined(__GNUC__) && defined(__ppc64__)
+
+#define Read_and_clear(dst,src) \
+  asm("0: ldarx %0, 0, %1\n\t" \
+      "stdcx. %2, 0, %1\n\t" \
+      "bne- 0b" \
+      : "=&r" (dst) \
+      : "r" (&(src)), "r" (0) \
+      : "cr0", "memory")
+
+#else
+
+/* Default, non-atomic implementation */
+#define Read_and_clear(dst,src) ((dst) = (src), (src) = 0)
+
+#endif
+
+#endif /* CAML_SIGNALS_MACHDEP_H */
diff --git a/byterun/caml/stacks.h b/byterun/caml/stacks.h
new file mode 100644
index 0000000..c596f25
--- /dev/null
+++ b/byterun/caml/stacks.h
@@ -0,0 +1,41 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* structure of the stacks */
+
+#ifndef CAML_STACKS_H
+#define CAML_STACKS_H
+
+
+#include "misc.h"
+#include "mlvalues.h"
+#include "memory.h"
+
+CAMLextern value * caml_stack_low;
+CAMLextern value * caml_stack_high;
+CAMLextern value * caml_stack_threshold;
+CAMLextern value * caml_extern_sp;
+CAMLextern value * caml_trapsp;
+CAMLextern value * caml_trap_barrier;
+
+#define Trap_pc(tp) (((code_t *)(tp))[0])
+#define Trap_link(tp) (((value **)(tp))[1])
+
+void caml_init_stack (uintnat init_max_size);
+void caml_realloc_stack (asize_t required_size);
+void caml_change_max_stack_size (uintnat new_max_size);
+uintnat caml_stack_usage (void);
+
+CAMLextern uintnat (*caml_stack_usage_hook)(void);
+
+#endif /* CAML_STACKS_H */
diff --git a/byterun/caml/startup.h b/byterun/caml/startup.h
new file mode 100644
index 0000000..3dda64b
--- /dev/null
+++ b/byterun/caml/startup.h
@@ -0,0 +1,38 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 2001 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_STARTUP_H
+#define CAML_STARTUP_H
+
+#include "mlvalues.h"
+#include "exec.h"
+
+CAMLextern void caml_main(char **argv);
+
+CAMLextern void caml_startup_code(
+           code_t code, asize_t code_size,
+           char *data, asize_t data_size,
+           char *section_table, asize_t section_table_size,
+           char **argv);
+
+enum { FILE_NOT_FOUND = -1, BAD_BYTECODE  = -2 };
+
+extern int caml_attempt_open(char **name, struct exec_trailer *trail,
+                             int do_open_script);
+extern void caml_read_section_descriptors(int fd, struct exec_trailer *trail);
+extern int32 caml_seek_optional_section(int fd, struct exec_trailer *trail,
+                                        char *name);
+extern int32 caml_seek_section(int fd, struct exec_trailer *trail, char *name);
+
+
+#endif /* CAML_STARTUP_H */
diff --git a/byterun/caml/sys.h b/byterun/caml/sys.h
new file mode 100644
index 0000000..5eb18fc
--- /dev/null
+++ b/byterun/caml/sys.h
@@ -0,0 +1,28 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+#ifndef CAML_SYS_H
+#define CAML_SYS_H
+
+#include "misc.h"
+
+#define NO_ARG Val_int(0)
+
+CAMLextern void caml_sys_error (value);
+CAMLextern void caml_sys_io_error (value);
+extern void caml_sys_init (char * exe_name, char ** argv);
+CAMLextern value caml_sys_exit (value);
+
+extern char * caml_exe_name;
+
+#endif /* CAML_SYS_H */
diff --git a/byterun/caml/ui.h b/byterun/caml/ui.h
new file mode 100644
index 0000000..2958465
--- /dev/null
+++ b/byterun/caml/ui.h
@@ -0,0 +1,26 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Damien Doligez, projet Para, INRIA Rocquencourt          */
+/*                                                                     */
+/*  Copyright 1996 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Function declarations for non-Unix user interfaces */
+
+#ifndef CAML_UI_H
+#define CAML_UI_H
+
+#include "config.h"
+
+void ui_exit (int return_code);
+int ui_read (int file_desc, char *buf, unsigned int length);
+int ui_write (int file_desc, char *buf, unsigned int length);
+void ui_print_stderr (char *format, void *arg);
+
+#endif /* CAML_UI_H */
diff --git a/byterun/caml/weak.h b/byterun/caml/weak.h
new file mode 100644
index 0000000..0cf4b8b
--- /dev/null
+++ b/byterun/caml/weak.h
@@ -0,0 +1,24 @@
+/***********************************************************************/
+/*                                                                     */
+/*                                OCaml                                */
+/*                                                                     */
+/*            Damien Doligez, projet Para, INRIA Rocquencourt          */
+/*                                                                     */
+/*  Copyright 1997 Institut National de Recherche en Informatique et   */
+/*  en Automatique.  All rights reserved.  This file is distributed    */
+/*  under the terms of the GNU Library General Public License, with    */
+/*  the special exception on linking described in file ../LICENSE.     */
+/*                                                                     */
+/***********************************************************************/
+
+/* Operations on weak arrays */
+
+#ifndef CAML_WEAK_H
+#define CAML_WEAK_H
+
+#include "mlvalues.h"
+
+extern value caml_weak_list_head;
+extern value caml_weak_none;
+
+#endif /* CAML_WEAK_H */
diff --git a/byterun/compact.c b/byterun/compact.c
index bf80301..ac96e7b 100644
--- a/byterun/compact.c
+++ b/byterun/compact.c
@@ -13,16 +13,16 @@
 
 #include <string.h>
 
-#include "config.h"
-#include "finalise.h"
-#include "freelist.h"
-#include "gc.h"
-#include "gc_ctrl.h"
-#include "major_gc.h"
-#include "memory.h"
-#include "mlvalues.h"
-#include "roots.h"
-#include "weak.h"
+#include "caml/config.h"
+#include "caml/finalise.h"
+#include "caml/freelist.h"
+#include "caml/gc.h"
+#include "caml/gc_ctrl.h"
+#include "caml/major_gc.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
+#include "caml/roots.h"
+#include "caml/weak.h"
 
 extern uintnat caml_percent_free;                   /* major_gc.c */
 extern void caml_shrink_heap (char *);              /* memory.c */
diff --git a/byterun/compact.h b/byterun/compact.h
deleted file mode 100644
index 2abac16..0000000
--- a/byterun/compact.h
+++ /dev/null
@@ -1,25 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_COMPACT_H
-#define CAML_COMPACT_H
-
-
-#include "config.h"
-#include "misc.h"
-
-extern void caml_compact_heap (void);
-extern void caml_compact_heap_maybe (void);
-
-
-#endif /* CAML_COMPACT_H */
diff --git a/byterun/compare.c b/byterun/compare.c
index 6593ed9..4e8d25a 100644
--- a/byterun/compare.c
+++ b/byterun/compare.c
@@ -13,11 +13,11 @@
 
 #include <string.h>
 #include <stdlib.h>
-#include "custom.h"
-#include "fail.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
+#include "caml/custom.h"
+#include "caml/fail.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
 
 /* Structural comparison on trees. */
 
diff --git a/byterun/compare.h b/byterun/compare.h
deleted file mode 100644
index 41d6a0c..0000000
--- a/byterun/compare.h
+++ /dev/null
@@ -1,19 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*          Damien Doligez, Projet Moscova, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2003 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_COMPARE_H
-#define CAML_COMPARE_H
-
-CAMLextern int caml_compare_unordered;
-
-#endif /* CAML_COMPARE_H */
diff --git a/byterun/compatibility.h b/byterun/compatibility.h
deleted file mode 100644
index 58bf283..0000000
--- a/byterun/compatibility.h
+++ /dev/null
@@ -1,370 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*          Damien Doligez, projet Moscova, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2003 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* definitions for compatibility with old identifiers */
-
-#ifndef CAML_COMPATIBILITY_H
-#define CAML_COMPATIBILITY_H
-
-#ifndef CAML_NAME_SPACE
-
-/*
-   #define --> CAMLextern  (defined with CAMLexport or CAMLprim)
-   (rien)  --> CAMLprim
-   g       --> global C identifier
-   x       --> special case
-
-   SP* signals the special cases:
-   - when the identifier was not simply prefixed with [caml_]
-   - when the [caml_] version was already used for something else, and
-     was renamed out of the way (watch out for [caml_alloc] and
-     [caml_array_bound_error] in *.s)
-*/
-
-/* a faire:
-   - ui_*   (reverifier que win32.c n'en depend pas)
-*/
-
-
-/* **** alloc.c */
-#define alloc caml_alloc /*SP*/
-#define alloc_small caml_alloc_small
-#define alloc_tuple caml_alloc_tuple
-#define alloc_string caml_alloc_string
-#define alloc_final caml_alloc_final
-#define copy_string caml_copy_string
-#define alloc_array caml_alloc_array
-#define copy_string_array caml_copy_string_array
-#define convert_flag_list caml_convert_flag_list
-
-/* **** array.c */
-
-/* **** backtrace.c */
-#define backtrace_active caml_backtrace_active
-#define backtrace_pos caml_backtrace_pos
-#define backtrace_buffer caml_backtrace_buffer
-#define backtrace_last_exn caml_backtrace_last_exn
-#define print_exception_backtrace caml_print_exception_backtrace
-
-/* **** callback.c */
-#define callback_depth caml_callback_depth
-#define callbackN_exn caml_callbackN_exn
-#define callback_exn caml_callback_exn
-#define callback2_exn caml_callback2_exn
-#define callback3_exn caml_callback3_exn
-#define callback caml_callback
-#define callback2 caml_callback2
-#define callback3 caml_callback3
-#define callbackN caml_callbackN
-
-/* **** compact.c */
-
-/* **** compare.c */
-#define compare_unordered caml_compare_unordered
-
-/* **** custom.c */
-#define alloc_custom caml_alloc_custom
-#define register_custom_operations caml_register_custom_operations
-
-/* **** debugger.c */
-
-/* **** dynlink.c */
-
-/* **** extern.c */
-#define output_val caml_output_val
-#define output_value_to_malloc caml_output_value_to_malloc
-#define output_value_to_block caml_output_value_to_block
-#define serialize_int_1 caml_serialize_int_1
-#define serialize_int_2 caml_serialize_int_2
-#define serialize_int_4 caml_serialize_int_4
-#define serialize_int_8 caml_serialize_int_8
-#define serialize_float_4 caml_serialize_float_4
-#define serialize_float_8 caml_serialize_float_8
-#define serialize_block_1 caml_serialize_block_1
-#define serialize_block_2 caml_serialize_block_2
-#define serialize_block_4 caml_serialize_block_4
-#define serialize_block_8 caml_serialize_block_8
-#define serialize_block_float_8 caml_serialize_block_float_8
-
-/* **** fail.c */
-#define external_raise caml_external_raise
-#define mlraise caml_raise /*SP*/
-#define raise_constant caml_raise_constant
-#define raise_with_arg caml_raise_with_arg
-#define raise_with_string caml_raise_with_string
-#define failwith caml_failwith
-#define invalid_argument caml_invalid_argument
-#define array_bound_error caml_array_bound_error /*SP*/
-#define raise_out_of_memory caml_raise_out_of_memory
-#define raise_stack_overflow caml_raise_stack_overflow
-#define raise_sys_error caml_raise_sys_error
-#define raise_end_of_file caml_raise_end_of_file
-#define raise_zero_divide caml_raise_zero_divide
-#define raise_not_found caml_raise_not_found
-#define raise_sys_blocked_io caml_raise_sys_blocked_io
-#define init_exceptions caml_init_exceptions
-/* **** asmrun/fail.c */
-/* **** asmrun/<arch>.s */
-
-/* **** finalise.c */
-
-/* **** fix_code.c */
-
-/* **** floats.c */
-/*#define Double_val caml_Double_val             done in mlvalues.h as needed */
-/*#define Store_double_val caml_Store_double_val done in mlvalues.h as needed */
-#define copy_double caml_copy_double
-
-/* **** freelist.c */
-
-/* **** gc_ctrl.c */
-
-/* **** globroots.c */
-#define register_global_root caml_register_global_root
-#define remove_global_root caml_remove_global_root
-
-/* **** hash.c */
-#define hash_variant caml_hash_variant
-
-/* **** instrtrace.c */
-
-/* **** intern.c */
-#define input_val caml_input_val
-#define input_val_from_string caml_input_val_from_string
-#define input_value_from_malloc caml_input_value_from_malloc
-#define input_value_from_block caml_input_value_from_block
-#define deserialize_uint_1 caml_deserialize_uint_1
-#define deserialize_sint_1 caml_deserialize_sint_1
-#define deserialize_uint_2 caml_deserialize_uint_2
-#define deserialize_sint_2 caml_deserialize_sint_2
-#define deserialize_uint_4 caml_deserialize_uint_4
-#define deserialize_sint_4 caml_deserialize_sint_4
-#define deserialize_uint_8 caml_deserialize_uint_8
-#define deserialize_sint_8 caml_deserialize_sint_8
-#define deserialize_float_4 caml_deserialize_float_4
-#define deserialize_float_8 caml_deserialize_float_8
-#define deserialize_block_1 caml_deserialize_block_1
-#define deserialize_block_2 caml_deserialize_block_2
-#define deserialize_block_4 caml_deserialize_block_4
-#define deserialize_block_8 caml_deserialize_block_8
-#define deserialize_block_float_8 caml_deserialize_block_float_8
-#define deserialize_error caml_deserialize_error
-
-/* **** interp.c */
-
-/* **** ints.c */
-#define int32_ops caml_int32_ops
-#define copy_int32 caml_copy_int32
-/*#define Int64_val caml_Int64_val   *** done in mlvalues.h as needed */
-#define int64_ops caml_int64_ops
-#define copy_int64 caml_copy_int64
-#define nativeint_ops caml_nativeint_ops
-#define copy_nativeint caml_copy_nativeint
-
-/* **** io.c */
-#define channel_mutex_free caml_channel_mutex_free
-#define channel_mutex_lock caml_channel_mutex_lock
-#define channel_mutex_unlock caml_channel_mutex_unlock
-#define channel_mutex_unlock_exn caml_channel_mutex_unlock_exn
-#define all_opened_channels caml_all_opened_channels
-#define open_descriptor_in caml_open_descriptor_in /*SP*/
-#define open_descriptor_out caml_open_descriptor_out /*SP*/
-#define close_channel caml_close_channel /*SP*/
-#define channel_size caml_channel_size /*SP*/
-#define channel_binary_mode caml_channel_binary_mode
-#define flush_partial caml_flush_partial /*SP*/
-#define flush caml_flush /*SP*/
-#define putword caml_putword
-#define putblock caml_putblock
-#define really_putblock caml_really_putblock
-#define seek_out caml_seek_out /*SP*/
-#define pos_out caml_pos_out /*SP*/
-#define do_read caml_do_read
-#define refill caml_refill
-#define getword caml_getword
-#define getblock caml_getblock
-#define really_getblock caml_really_getblock
-#define seek_in caml_seek_in /*SP*/
-#define pos_in caml_pos_in /*SP*/
-#define input_scan_line caml_input_scan_line /*SP*/
-#define finalize_channel caml_finalize_channel
-#define alloc_channel caml_alloc_channel
-/*#define Val_file_offset caml_Val_file_offset   *** done in io.h as needed */
-/*#define File_offset_val caml_File_offset_val   *** done in io.h as needed */
-
-/* **** lexing.c */
-
-/* **** main.c */
-/* *** no change */
-
-/* **** major_gc.c */
-#define heap_start caml_heap_start
-#define page_table caml_page_table
-
-/* **** md5.c */
-#define md5_string caml_md5_string
-#define md5_chan caml_md5_chan
-#define MD5Init caml_MD5Init
-#define MD5Update caml_MD5Update
-#define MD5Final caml_MD5Final
-#define MD5Transform caml_MD5Transform
-
-/* **** memory.c */
-#define alloc_shr caml_alloc_shr
-#define initialize caml_initialize
-#define modify caml_modify
-#define stat_alloc caml_stat_alloc
-#define stat_free caml_stat_free
-#define stat_resize caml_stat_resize
-
-/* **** meta.c */
-
-/* **** minor_gc.c */
-#define young_start caml_young_start
-#define young_end caml_young_end
-#define young_ptr caml_young_ptr
-#define young_limit caml_young_limit
-#define ref_table caml_ref_table
-#define minor_collection caml_minor_collection
-#define check_urgent_gc caml_check_urgent_gc
-
-/* **** misc.c */
-
-/* **** obj.c */
-
-/* **** parsing.c */
-
-/* **** prims.c */
-
-/* **** printexc.c */
-#define format_caml_exception caml_format_exception /*SP*/
-
-/* **** roots.c */
-#define local_roots caml_local_roots
-#define scan_roots_hook caml_scan_roots_hook
-#define do_local_roots caml_do_local_roots
-
-/* **** signals.c */
-#define pending_signals caml_pending_signals
-#define something_to_do caml_something_to_do
-#define enter_blocking_section_hook caml_enter_blocking_section_hook
-#define leave_blocking_section_hook caml_leave_blocking_section_hook
-#define try_leave_blocking_section_hook caml_try_leave_blocking_section_hook
-#define async_action_hook caml_async_action_hook
-#define enter_blocking_section caml_enter_blocking_section
-#define leave_blocking_section caml_leave_blocking_section
-#define convert_signal_number caml_convert_signal_number
-/* **** asmrun/signals.c */
-#define garbage_collection caml_garbage_collection
-
-/* **** stacks.c */
-#define stack_low caml_stack_low
-#define stack_high caml_stack_high
-#define stack_threshold caml_stack_threshold
-#define extern_sp caml_extern_sp
-#define trapsp caml_trapsp
-#define trap_barrier caml_trap_barrier
-
-/* **** startup.c */
-#define atom_table caml_atom_table
-/* **** asmrun/startup.c */
-#define static_data_start caml_static_data_start
-#define static_data_end caml_static_data_end
-
-/* **** str.c */
-#define string_length caml_string_length
-
-/* **** sys.c */
-#define sys_error caml_sys_error
-#define sys_exit caml_sys_exit
-
-/* **** terminfo.c */
-
-/* **** unix.c  &  win32.c */
-#define search_exe_in_path caml_search_exe_in_path
-
-/* **** weak.c */
-
-/* **** asmcomp/asmlink.ml */
-
-/* **** asmcomp/cmmgen.ml */
-
-/* **** asmcomp/asmlink.ml, asmcomp/cmmgen.ml, asmcomp/compilenv.ml */
-
-/* ************************************************************* */
-
-/* **** otherlibs/bigarray */
-#define int8 caml_ba_int8
-#define uint8 caml_ba_uint8
-#define int16 caml_ba_int16
-#define uint16 caml_ba_uint16
-#define MAX_NUM_DIMS CAML_BA_MAX_NUM_DIMS
-#define caml_bigarray_kind caml_ba_kind
-#define BIGARRAY_FLOAT32 CAML_BA_FLOAT32
-#define BIGARRAY_FLOAT64 CAML_BA_FLOAT64
-#define BIGARRAY_SINT8 CAML_BA_SINT8
-#define BIGARRAY_UINT8 CAML_BA_UINT8
-#define BIGARRAY_SINT16 CAML_BA_SINT16
-#define BIGARRAY_UINT16 CAML_BA_UINT16
-#define BIGARRAY_INT32 CAML_BA_INT32
-#define BIGARRAY_INT64 CAML_BA_INT64
-#define BIGARRAY_CAML_INT CAML_BA_CAML_INT
-#define BIGARRAY_NATIVE_INT CAML_BA_NATIVE_INT
-#define BIGARRAY_COMPLEX32 CAML_BA_COMPLEX32
-#define BIGARRAY_COMPLEX64 CAML_BA_COMPLEX64
-#define BIGARRAY_KIND_MASK CAML_BA_KIND_MASK
-#define caml_bigarray_layout caml_ba_layout
-#define BIGARRAY_C_LAYOUT CAML_BA_C_LAYOUT
-#define BIGARRAY_FORTRAN_LAYOUT CAML_BA_FORTRAN_LAYOUT
-#define BIGARRAY_LAYOUT_MASK CAML_BA_LAYOUT_MASK
-#define caml_bigarray_managed caml_ba_managed
-#define BIGARRAY_EXTERNAL CAML_BA_EXTERNAL
-#define BIGARRAY_MANAGED CAML_BA_MANAGED
-#define BIGARRAY_MAPPED_FILE CAML_BA_MAPPED_FILE
-#define BIGARRAY_MANAGED_MASK CAML_BA_MANAGED_MASK
-#define caml_bigarray_proxy caml_ba_proxy
-#define caml_bigarray caml_ba_array
-#define Bigarray_val Caml_ba_array_val
-#define Data_bigarray_val Caml_ba_data_val
-#define alloc_bigarray caml_ba_alloc
-#define alloc_bigarray_dims caml_ba_alloc_dims
-#define bigarray_map_file caml_ba_map_file
-#define bigarray_unmap_file caml_ba_unmap_file
-#define bigarray_element_size caml_ba_element_size
-#define bigarray_byte_size caml_ba_byte_size
-#define bigarray_deserialize caml_ba_deserialize
-#define MAX_BIGARRAY_MEMORY CAML_BA_MAX_MEMORY
-#define bigarray_create caml_ba_create
-#define bigarray_get_N caml_ba_get_N
-#define bigarray_get_1 caml_ba_get_1
-#define bigarray_get_2 caml_ba_get_2
-#define bigarray_get_3 caml_ba_get_3
-#define bigarray_get_generic caml_ba_get_generic
-#define bigarray_set_1 caml_ba_set_1
-#define bigarray_set_2 caml_ba_set_2
-#define bigarray_set_3 caml_ba_set_3
-#define bigarray_set_N caml_ba_set_N
-#define bigarray_set_generic caml_ba_set_generic
-#define bigarray_num_dims caml_ba_num_dims
-#define bigarray_dim caml_ba_dim
-#define bigarray_kind caml_ba_kind
-#define bigarray_layout caml_ba_layout
-#define bigarray_slice caml_ba_slice
-#define bigarray_sub caml_ba_sub
-#define bigarray_blit caml_ba_blit
-#define bigarray_fill caml_ba_fill
-#define bigarray_reshape caml_ba_reshape
-#define bigarray_init caml_ba_init
-
-#endif /* CAML_NAME_SPACE */
-#endif /* CAML_COMPATIBILITY_H */
diff --git a/byterun/config.h b/byterun/config.h
deleted file mode 100644
index 7109bb0..0000000
--- a/byterun/config.h
+++ /dev/null
@@ -1,166 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_CONFIG_H
-#define CAML_CONFIG_H
-
-/* <include ../config/m.h> */
-/* <include ../config/s.h> */
-/* <private> */
-#include "../config/m.h"
-#include "../config/s.h"
-/* </private> */
-
-#ifndef CAML_NAME_SPACE
-#include "compatibility.h"
-#endif
-
-/* Types for signed chars, 32-bit integers, 64-bit integers,
-   native integers (as wide as a pointer type) */
-
-typedef signed char schar;
-
-#if SIZEOF_PTR == SIZEOF_LONG
-/* Standard models: ILP32 or I32LP64 */
-typedef long intnat;
-typedef unsigned long uintnat;
-#define ARCH_INTNAT_PRINTF_FORMAT "l"
-#elif SIZEOF_PTR == SIZEOF_INT
-/* Hypothetical IP32L64 model */
-typedef int intnat;
-typedef unsigned int uintnat;
-#define ARCH_INTNAT_PRINTF_FORMAT ""
-#elif SIZEOF_PTR == 8 && defined(ARCH_INT64_TYPE)
-/* Win64 model: IL32LLP64 */
-typedef ARCH_INT64_TYPE intnat;
-typedef ARCH_UINT64_TYPE uintnat;
-#define ARCH_INTNAT_PRINTF_FORMAT ARCH_INT64_PRINTF_FORMAT
-#else
-#error "No integer type available to represent pointers"
-#endif
-
-#if SIZEOF_INT == 4
-typedef int int32;
-typedef unsigned int uint32;
-#define ARCH_INT32_PRINTF_FORMAT ""
-#elif SIZEOF_LONG == 4
-typedef long int32;
-typedef unsigned long uint32;
-#define ARCH_INT32_PRINTF_FORMAT "l"
-#elif SIZEOF_SHORT == 4
-typedef short int32;
-typedef unsigned short uint32;
-#define ARCH_INT32_PRINTF_FORMAT ""
-#else
-#error "No 32-bit integer type available"
-#endif
-
-#if defined(ARCH_INT64_TYPE)
-typedef ARCH_INT64_TYPE int64;
-typedef ARCH_UINT64_TYPE uint64;
-#else
-#  ifdef ARCH_BIG_ENDIAN
-typedef struct { uint32 h, l; } uint64, int64;
-#  else
-typedef struct { uint32 l, h; } uint64, int64;
-#  endif
-#endif
-
-/* Endianness of floats */
-
-/* ARCH_FLOAT_ENDIANNESS encodes the byte order of doubles as follows:
-   the value [0xabcdefgh] means that the least significant byte of the
-   float is at byte offset [a], the next lsb at [b], ..., and the
-   most significant byte at [h]. */
-
-#if defined(__arm__) && !defined(__ARM_EABI__)
-#define ARCH_FLOAT_ENDIANNESS 0x45670123
-#elif defined(ARCH_BIG_ENDIAN)
-#define ARCH_FLOAT_ENDIANNESS 0x76543210
-#else
-#define ARCH_FLOAT_ENDIANNESS 0x01234567
-#endif
-
-/* We use threaded code interpretation if the compiler provides labels
-   as first-class values (GCC 2.x). */
-
-#if defined(__GNUC__) && __GNUC__ >= 2 && !defined(DEBUG) && !defined (SHRINKED_GNUC) && !defined(CAML_JIT)
-#define THREADED_CODE
-#endif
-
-
-/* Do not change this definition. */
-#define Page_size (1 << Page_log)
-
-/* Memory model parameters */
-
-/* The size of a page for memory management (in bytes) is [1 << Page_log].
-   It must be a multiple of [sizeof (value)] and >= 8 and <= 20. */
-#define Page_log 12             /* A page is 4 kilobytes. */
-
-/* Initial size of stack (bytes). */
-#define Stack_size (4096 * sizeof(value))
-
-/* Minimum free size of stack (bytes); below that, it is reallocated. */
-#define Stack_threshold (256 * sizeof(value))
-
-/* Default maximum size of the stack (words). */
-#define Max_stack_def (1024 * 1024)
-
-
-/* Maximum size of a block allocated in the young generation (words). */
-/* Must be > 4 */
-#define Max_young_wosize 256
-
-
-/* Minimum size of the minor zone (words).
-   This must be at least [Max_young_wosize + 1]. */
-#define Minor_heap_min 4096
-
-/* Maximum size of the minor zone (words).
-   Must be greater than or equal to [Minor_heap_min].
-*/
-#define Minor_heap_max (1 << 28)
-
-/* Default size of the minor zone. (words)  */
-#define Minor_heap_def 262144
-
-
-/* Minimum size increment when growing the heap (words).
-   Must be a multiple of [Page_size / sizeof (value)]. */
-#define Heap_chunk_min (2 * Page_size / sizeof (value))
-
-/* Default size increment when growing the heap. (words)
-   Must be a multiple of [Page_size / sizeof (value)].
-   (Approx 512 Kb for a 32-bit platform, 1 Mb for a 64-bit platform.) */
-#define Heap_chunk_def (31 * Page_size)
-
-/* Default initial size of the major heap (words);
-   same constraints as for Heap_chunk_def. */
-#define Init_heap_def (31 * Page_size)
-
-
-/* Default speed setting for the major GC.  The heap will grow until
-   the dead objects and the free list represent this percentage of the
-   total size of live objects. */
-#define Percent_free_def 80
-
-/* Default setting for the compacter: 500%
-   (i.e. trigger the compacter when 5/6 of the heap is free or garbage)
-   This can be set quite high because the overhead is over-estimated
-   when fragmentation occurs.
- */
-#define Max_percent_free_def 500
-
-
-#endif /* CAML_CONFIG_H */
diff --git a/byterun/custom.c b/byterun/custom.c
index e4f9eaf..eeb976d 100644
--- a/byterun/custom.c
+++ b/byterun/custom.c
@@ -13,11 +13,11 @@
 
 #include <string.h>
 
-#include "alloc.h"
-#include "custom.h"
-#include "fail.h"
-#include "memory.h"
-#include "mlvalues.h"
+#include "caml/alloc.h"
+#include "caml/custom.h"
+#include "caml/fail.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
 
 CAMLexport value caml_alloc_custom(struct custom_operations * ops,
                                    uintnat size,
diff --git a/byterun/custom.h b/byterun/custom.h
deleted file mode 100644
index ff3cd89..0000000
--- a/byterun/custom.h
+++ /dev/null
@@ -1,71 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*         Manuel Serrano and Xavier Leroy, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2000 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_CUSTOM_H
-#define CAML_CUSTOM_H
-
-
-#ifndef CAML_NAME_SPACE
-#include "compatibility.h"
-#endif
-#include "mlvalues.h"
-
-struct custom_operations {
-  char *identifier;
-  void (*finalize)(value v);
-  int (*compare)(value v1, value v2);
-  intnat (*hash)(value v);
-  void (*serialize)(value v,
-                    /*out*/ uintnat * wsize_32 /*size in bytes*/,
-                    /*out*/ uintnat * wsize_64 /*size in bytes*/);
-  uintnat (*deserialize)(void * dst);
-  int (*compare_ext)(value v1, value v2);
-};
-
-#define custom_finalize_default NULL
-#define custom_compare_default NULL
-#define custom_hash_default NULL
-#define custom_serialize_default NULL
-#define custom_deserialize_default NULL
-#define custom_compare_ext_default NULL
-
-#define Custom_ops_val(v) (*((struct custom_operations **) (v)))
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-
-CAMLextern value caml_alloc_custom(struct custom_operations * ops,
-                                   uintnat size, /*size in bytes*/
-                                   mlsize_t mem, /*resources consumed*/
-                                   mlsize_t max  /*max resources*/);
-
-CAMLextern void caml_register_custom_operations(struct custom_operations * ops);
-
-CAMLextern int caml_compare_unordered;
-  /* Used by custom comparison to report unordered NaN-like cases. */
-
-/* <private> */
-extern struct custom_operations * caml_find_custom_operations(char * ident);
-extern struct custom_operations *
-          caml_final_custom_operations(void (*fn)(value));
-
-extern void caml_init_custom_operations(void);
-/* </private> */
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* CAML_CUSTOM_H */
diff --git a/byterun/debugger.c b/byterun/debugger.c
index d64583f..d3d5a18 100644
--- a/byterun/debugger.c
+++ b/byterun/debugger.c
@@ -19,10 +19,10 @@
 
 #include <string.h>
 
-#include "alloc.h"
-#include "config.h"
-#include "debugger.h"
-#include "misc.h"
+#include "caml/alloc.h"
+#include "caml/config.h"
+#include "caml/debugger.h"
+#include "caml/misc.h"
 
 int caml_debugger_in_use = 0;
 uintnat caml_event_count;
@@ -64,14 +64,14 @@ void caml_debugger_cleanup_fork(void)
 #include <process.h>
 #endif
 
-#include "fail.h"
-#include "fix_code.h"
-#include "instruct.h"
-#include "intext.h"
-#include "io.h"
-#include "mlvalues.h"
-#include "stacks.h"
-#include "sys.h"
+#include "caml/fail.h"
+#include "caml/fix_code.h"
+#include "caml/instruct.h"
+#include "caml/intext.h"
+#include "caml/io.h"
+#include "caml/mlvalues.h"
+#include "caml/stacks.h"
+#include "caml/sys.h"
 
 static int sock_domain;         /* Socket domain for the debugger */
 static union {                  /* Socket address for the debugger */
diff --git a/byterun/debugger.h b/byterun/debugger.h
deleted file mode 100644
index b5079eb..0000000
--- a/byterun/debugger.h
+++ /dev/null
@@ -1,111 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Interface with the debugger */
-
-#ifndef CAML_DEBUGGER_H
-#define CAML_DEBUGGER_H
-
-#include "misc.h"
-#include "mlvalues.h"
-
-CAMLextern int caml_debugger_in_use;
-CAMLextern int caml_debugger_fork_mode; /* non-zero for parent */
-extern uintnat caml_event_count;
-
-enum event_kind {
-  EVENT_COUNT, BREAKPOINT, PROGRAM_START, PROGRAM_EXIT,
-  TRAP_BARRIER, UNCAUGHT_EXC
-};
-
-void caml_debugger_init (void);
-void caml_debugger (enum event_kind event);
-void caml_debugger_cleanup_fork (void);
-
-/* Communication protocol */
-
-/* Requests from the debugger to the runtime system */
-
-enum debugger_request {
-  REQ_SET_EVENT = 'e',          /* uint32 pos */
-  /* Set an event on the instruction at position pos */
-  REQ_SET_BREAKPOINT = 'B',     /* uint32 pos, (char k) */
-  /* Set a breakpoint at position pos */
-  /* In profiling mode, the breakpoint kind is set to k */
-  REQ_RESET_INSTR = 'i',        /* uint32 pos */
-  /* Clear an event or breapoint at position pos, restores initial instr. */
-  REQ_CHECKPOINT = 'c',         /* no args */
-  /* Checkpoint the runtime system by forking a child process.
-     Reply is pid of child process or -1 if checkpoint failed. */
-  REQ_GO = 'g',                 /* uint32 n */
-  /* Run the program for n events.
-     Reply is one of debugger_reply described below. */
-  REQ_STOP = 's',               /* no args */
-  /* Terminate the runtime system */
-  REQ_WAIT = 'w',               /* no args */
-  /* Reap one dead child (a discarded checkpoint). */
-  REQ_INITIAL_FRAME = '0',      /* no args */
-  /* Set current frame to bottom frame (the one currently executing).
-     Reply is stack offset and current pc. */
-  REQ_GET_FRAME = 'f',          /* no args */
-  /* Return current frame location (stack offset + current pc). */
-  REQ_SET_FRAME = 'S',          /* uint32 stack_offset */
-  /* Set current frame to given stack offset. No reply. */
-  REQ_UP_FRAME = 'U',           /* uint32 n */
-  /* Move one frame up. Argument n is size of current frame (in words).
-     Reply is stack offset and current pc, or -1 if top of stack reached. */
-  REQ_SET_TRAP_BARRIER = 'b',   /* uint32 offset */
-  /* Set the trap barrier at the given offset. */
-  REQ_GET_LOCAL = 'L',          /* uint32 slot_number */
-  /* Return the local variable at the given slot in the current frame.
-     Reply is one value. */
-  REQ_GET_ENVIRONMENT = 'E',    /* uint32 slot_number */
-  /* Return the local variable at the given slot in the heap environment
-     of the current frame. Reply is one value. */
-  REQ_GET_GLOBAL = 'G',         /* uint32 global_number */
-  /* Return the specified global variable. Reply is one value. */
-  REQ_GET_ACCU = 'A',           /* no args */
-  /* Return the current contents of the accumulator. Reply is one value. */
-  REQ_GET_HEADER = 'H',         /* mlvalue v */
-  /* As REQ_GET_OBJ, but sends only the header. */
-  REQ_GET_FIELD = 'F',          /* mlvalue v, uint32 fieldnum */
-  /* As REQ_GET_OBJ, but sends only one field. */
-  REQ_MARSHAL_OBJ = 'M',        /* mlvalue v */
-  /* Send a copy of the data structure rooted at v, using the same
-     format as [caml_output_value]. */
-  REQ_GET_CLOSURE_CODE = 'C',   /* mlvalue v */
-  /* Send the code address of the given closure.
-     Reply is one uint32. */
-  REQ_SET_FORK_MODE = 'K'       /* uint32 m */
-  /* Set whether to follow the child (m=0) or the parent on fork. */
-};
-
-/* Replies to a REQ_GO request. All replies are followed by three uint32:
-   - the value of the event counter
-   - the position of the stack
-   - the current pc. */
-
-enum debugger_reply {
-  REP_EVENT = 'e',
-  /* Event counter reached 0. */
-  REP_BREAKPOINT = 'b',
-  /* Breakpoint hit. */
-  REP_EXITED = 'x',
-  /* Program exited by calling exit or reaching the end of the source. */
-  REP_TRAP = 's',
-  /* Trap barrier crossed. */
-  REP_UNCAUGHT_EXC = 'u'
-  /* Program exited due to a stray exception. */
-};
-
-#endif /* CAML_DEBUGGER_H */
diff --git a/byterun/dynlink.c b/byterun/dynlink.c
index 77f8b21..c6b9aac 100644
--- a/byterun/dynlink.c
+++ b/byterun/dynlink.c
@@ -18,18 +18,18 @@
 #include <string.h>
 #include <fcntl.h>
 #include <sys/stat.h>
-#include "config.h"
+#include "caml/config.h"
 #ifdef HAS_UNISTD
 #include <unistd.h>
 #endif
-#include "alloc.h"
-#include "dynlink.h"
-#include "fail.h"
-#include "mlvalues.h"
-#include "memory.h"
-#include "misc.h"
-#include "osdeps.h"
-#include "prims.h"
+#include "caml/alloc.h"
+#include "caml/dynlink.h"
+#include "caml/fail.h"
+#include "caml/mlvalues.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/osdeps.h"
+#include "caml/prims.h"
 
 #ifndef NATIVE_CODE
 
diff --git a/byterun/dynlink.h b/byterun/dynlink.h
deleted file mode 100644
index 74cfdb6..0000000
--- a/byterun/dynlink.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2000 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Dynamic loading of C primitives. */
-
-#ifndef CAML_DYNLINK_H
-#define CAML_DYNLINK_H
-
-#include "misc.h"
-
-/* Build the table of primitives, given a search path, a list
-   of shared libraries, and a list of primitive names
-   (all three 0-separated in char arrays).
-   Abort the runtime system on error. */
-extern void caml_build_primitive_table(char * lib_path,
-                                       char * libs,
-                                       char * req_prims);
-
-/* The search path for shared libraries */
-extern struct ext_table caml_shared_libs_path;
-
-/* Build the table of primitives as a copy of the builtin primitive table.
-   Used for executables generated by ocamlc -output-obj. */
-extern void caml_build_primitive_table_builtin(void);
-
-#endif /* CAML_DYNLINK_H */
diff --git a/byterun/exec.h b/byterun/exec.h
deleted file mode 100644
index 8b50484..0000000
--- a/byterun/exec.h
+++ /dev/null
@@ -1,60 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* exec.h : format of executable bytecode files */
-
-#ifndef CAML_EXEC_H
-#define CAML_EXEC_H
-
-/* Executable bytecode files are composed of a number of sections,
-   identified by 4-character names.  A table of contents at the
-   end of the file lists the section names along with their sizes,
-   in the order in which they appear in the file:
-
-   offset 0 --->  initial junk
-                  data for section 1
-                  data for section 2
-                  ...
-                  data for section N
-                  table of contents:
-                    descriptor for section 1
-                    ...
-                    descriptor for section N
-                  trailer
- end of file --->
-*/
-
-/* Structure of t.o.c. entries
-   Numerical quantities are 32-bit unsigned integers, big endian */
-
-struct section_descriptor {
-  char name[4];                 /* Section name */
-  uint32 len;                   /* Length of data in bytes */
-};
-
-/* Structure of the trailer. */
-
-struct exec_trailer {
-  uint32 num_sections;          /* Number of sections */
-  char magic[12];               /* The magic number */
-  struct section_descriptor * section; /* Not part of file */
-};
-
-#define TRAILER_SIZE (4+12)
-
-/* Magic number for this release */
-
-#define EXEC_MAGIC "Caml1999X008"
-
-
-#endif /* CAML_EXEC_H */
diff --git a/byterun/extern.c b/byterun/extern.c
index ea12806..de33cb2 100644
--- a/byterun/extern.c
+++ b/byterun/extern.c
@@ -13,20 +13,20 @@
 
 /* Structured output */
 
-/* The interface of this file is "intext.h" */
+/* The interface of this file is "caml/intext.h" */
 
 #include <string.h>
-#include "alloc.h"
-#include "custom.h"
-#include "fail.h"
-#include "gc.h"
-#include "intext.h"
-#include "io.h"
-#include "md5.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "reverse.h"
+#include "caml/alloc.h"
+#include "caml/custom.h"
+#include "caml/fail.h"
+#include "caml/gc.h"
+#include "caml/intext.h"
+#include "caml/io.h"
+#include "caml/md5.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/reverse.h"
 
 static uintnat obj_counter;  /* Number of objects emitted so far */
 static uintnat size_32;  /* Size in words of 32-bit block for struct. */
diff --git a/byterun/fail.c b/byterun/fail.c
index d721d5c..1d327fc 100644
--- a/byterun/fail.c
+++ b/byterun/fail.c
@@ -15,16 +15,16 @@
 
 #include <stdio.h>
 #include <stdlib.h>
-#include "alloc.h"
-#include "fail.h"
-#include "io.h"
-#include "gc.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "printexc.h"
-#include "signals.h"
-#include "stacks.h"
+#include "caml/alloc.h"
+#include "caml/fail.h"
+#include "caml/io.h"
+#include "caml/gc.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/printexc.h"
+#include "caml/signals.h"
+#include "caml/stacks.h"
 
 CAMLexport struct longjmp_buffer * caml_external_raise = NULL;
 value caml_exn_bucket;
diff --git a/byterun/fail.h b/byterun/fail.h
deleted file mode 100644
index 775b011..0000000
--- a/byterun/fail.h
+++ /dev/null
@@ -1,84 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_FAIL_H
-#define CAML_FAIL_H
-
-/* <private> */
-#include <setjmp.h>
-/* </private> */
-
-#ifndef CAML_NAME_SPACE
-#include "compatibility.h"
-#endif
-#include "misc.h"
-#include "mlvalues.h"
-
-/* <private> */
-#define OUT_OF_MEMORY_EXN 0     /* "Out_of_memory" */
-#define SYS_ERROR_EXN 1         /* "Sys_error" */
-#define FAILURE_EXN 2           /* "Failure" */
-#define INVALID_EXN 3           /* "Invalid_argument" */
-#define END_OF_FILE_EXN 4       /* "End_of_file" */
-#define ZERO_DIVIDE_EXN 5       /* "Division_by_zero" */
-#define NOT_FOUND_EXN 6         /* "Not_found" */
-#define MATCH_FAILURE_EXN 7     /* "Match_failure" */
-#define STACK_OVERFLOW_EXN 8    /* "Stack_overflow" */
-#define SYS_BLOCKED_IO 9        /* "Sys_blocked_io" */
-#define ASSERT_FAILURE_EXN 10   /* "Assert_failure" */
-#define UNDEFINED_RECURSIVE_MODULE_EXN 11 /* "Undefined_recursive_module" */
-
-#ifdef POSIX_SIGNALS
-struct longjmp_buffer {
-  sigjmp_buf buf;
-};
-#else
-struct longjmp_buffer {
-  jmp_buf buf;
-};
-#define sigsetjmp(buf,save) setjmp(buf)
-#define siglongjmp(buf,val) longjmp(buf,val)
-#endif
-
-CAMLextern struct longjmp_buffer * caml_external_raise;
-extern value caml_exn_bucket;
-int caml_is_special_exception(value exn);
-
-/* </private> */
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-CAMLextern void caml_raise (value bucket) Noreturn;
-CAMLextern void caml_raise_constant (value tag) Noreturn;
-CAMLextern void caml_raise_with_arg (value tag, value arg) Noreturn;
-CAMLextern void caml_raise_with_args (value tag, int nargs, value arg[]) Noreturn;
-CAMLextern void caml_raise_with_string (value tag, char const * msg) Noreturn;
-CAMLextern void caml_failwith (char const *) Noreturn;
-CAMLextern void caml_invalid_argument (char const *) Noreturn;
-CAMLextern void caml_raise_out_of_memory (void) Noreturn;
-CAMLextern void caml_raise_stack_overflow (void) Noreturn;
-CAMLextern void caml_raise_sys_error (value) Noreturn;
-CAMLextern void caml_raise_end_of_file (void) Noreturn;
-CAMLextern void caml_raise_zero_divide (void) Noreturn;
-CAMLextern void caml_raise_not_found (void) Noreturn;
-CAMLextern void caml_init_exceptions (void);
-CAMLextern void caml_array_bound_error (void) Noreturn;
-CAMLextern void caml_raise_sys_blocked_io (void) Noreturn;
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* CAML_FAIL_H */
diff --git a/byterun/finalise.c b/byterun/finalise.c
index 15b7a75..b9ce1b1 100644
--- a/byterun/finalise.c
+++ b/byterun/finalise.c
@@ -13,11 +13,11 @@
 
 /* Handling of finalised values. */
 
-#include "callback.h"
-#include "fail.h"
-#include "mlvalues.h"
-#include "roots.h"
-#include "signals.h"
+#include "caml/callback.h"
+#include "caml/fail.h"
+#include "caml/mlvalues.h"
+#include "caml/roots.h"
+#include "caml/signals.h"
 
 struct final {
   value fun;
diff --git a/byterun/finalise.h b/byterun/finalise.h
deleted file mode 100644
index 96853f5..0000000
--- a/byterun/finalise.h
+++ /dev/null
@@ -1,27 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*          Damien Doligez, projet Moscova, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2000 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_FINALISE_H
-#define CAML_FINALISE_H
-
-#include "roots.h"
-
-void caml_final_update (void);
-void caml_final_do_calls (void);
-void caml_final_do_strong_roots (scanning_action f);
-void caml_final_do_weak_roots (scanning_action f);
-void caml_final_do_young_roots (scanning_action f);
-void caml_final_empty_young (void);
-value caml_final_register (value f, value v);
-
-#endif /* CAML_FINALISE_H */
diff --git a/byterun/fix_code.c b/byterun/fix_code.c
index 746f8b7..f0c7d66 100644
--- a/byterun/fix_code.c
+++ b/byterun/fix_code.c
@@ -13,21 +13,21 @@
 
 /* Handling of blocks of bytecode (endianness switch, threading). */
 
-#include "config.h"
+#include "caml/config.h"
 
 #ifdef HAS_UNISTD
 #include <unistd.h>
 #endif
 
-#include "debugger.h"
-#include "fix_code.h"
-#include "instruct.h"
-#include "intext.h"
-#include "md5.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "reverse.h"
+#include "caml/debugger.h"
+#include "caml/fix_code.h"
+#include "caml/instruct.h"
+#include "caml/intext.h"
+#include "caml/md5.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/reverse.h"
 
 code_t caml_start_code;
 asize_t caml_code_size;
diff --git a/byterun/fix_code.h b/byterun/fix_code.h
deleted file mode 100644
index 419ad32..0000000
--- a/byterun/fix_code.h
+++ /dev/null
@@ -1,40 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Handling of blocks of bytecode (endianness switch, threading). */
-
-#ifndef CAML_FIX_CODE_H
-#define CAML_FIX_CODE_H
-
-
-#include "config.h"
-#include "misc.h"
-#include "mlvalues.h"
-
-extern code_t caml_start_code;
-extern asize_t caml_code_size;
-extern unsigned char * caml_saved_code;
-
-void caml_init_code_fragments();
-void caml_load_code (int fd, asize_t len);
-void caml_fixup_endianness (code_t code, asize_t len);
-void caml_set_instruction (code_t pos, opcode_t instr);
-int caml_is_instruction (opcode_t instr1, opcode_t instr2);
-
-#ifdef THREADED_CODE
-extern char ** caml_instr_table;
-extern char * caml_instr_base;
-void caml_thread_code (code_t code, asize_t len);
-#endif
-
-#endif /* CAML_FIX_CODE_H */
diff --git a/byterun/floats.c b/byterun/floats.c
index 9071106..e53cba5 100644
--- a/byterun/floats.c
+++ b/byterun/floats.c
@@ -11,20 +11,20 @@
 /*                                                                     */
 /***********************************************************************/
 
-/* The interface of this file is in "mlvalues.h" and "alloc.h" */
+/* The interface of this file is in "caml/mlvalues.h" and "caml/alloc.h" */
 
 #include <math.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 
-#include "alloc.h"
-#include "fail.h"
-#include "memory.h"
-#include "mlvalues.h"
-#include "misc.h"
-#include "reverse.h"
-#include "stacks.h"
+#include "caml/alloc.h"
+#include "caml/fail.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
+#include "caml/misc.h"
+#include "caml/reverse.h"
+#include "caml/stacks.h"
 
 #ifdef _MSC_VER
 #include <float.h>
diff --git a/byterun/freelist.c b/byterun/freelist.c
index 63e122c..81c66a1 100644
--- a/byterun/freelist.c
+++ b/byterun/freelist.c
@@ -18,14 +18,14 @@
 
 #include <string.h>
 
-#include "config.h"
-#include "freelist.h"
-#include "gc.h"
-#include "gc_ctrl.h"
-#include "memory.h"
-#include "major_gc.h"
-#include "misc.h"
-#include "mlvalues.h"
+#include "caml/config.h"
+#include "caml/freelist.h"
+#include "caml/gc.h"
+#include "caml/gc_ctrl.h"
+#include "caml/memory.h"
+#include "caml/major_gc.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
 
 /* The free-list is kept sorted by increasing addresses.
    This makes the merging of adjacent free blocks possible.
diff --git a/byterun/freelist.h b/byterun/freelist.h
deleted file mode 100644
index 146961f..0000000
--- a/byterun/freelist.h
+++ /dev/null
@@ -1,34 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Free lists of heap blocks. */
-
-#ifndef CAML_FREELIST_H
-#define CAML_FREELIST_H
-
-
-#include "misc.h"
-#include "mlvalues.h"
-
-extern asize_t caml_fl_cur_size;     /* size in words */
-
-char *caml_fl_allocate (mlsize_t);
-void caml_fl_init_merge (void);
-void caml_fl_reset (void);
-char *caml_fl_merge_block (char *);
-void caml_fl_add_blocks (char *);
-void caml_make_free_blocks (value *, mlsize_t, int, int);
-void caml_set_allocation_policy (uintnat);
-
-
-#endif /* CAML_FREELIST_H */
diff --git a/byterun/gc.h b/byterun/gc.h
deleted file mode 100644
index 3cbf08a..0000000
--- a/byterun/gc.h
+++ /dev/null
@@ -1,56 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_GC_H
-#define CAML_GC_H
-
-
-#include "mlvalues.h"
-
-#define Caml_white (0 << 8)
-#define Caml_gray  (1 << 8)
-#define Caml_blue  (2 << 8)
-#define Caml_black (3 << 8)
-
-#define Color_hd(hd) ((color_t) ((hd) & Caml_black))
-#define Color_hp(hp) (Color_hd (Hd_hp (hp)))
-#define Color_val(val) (Color_hd (Hd_val (val)))
-
-#define Is_white_hd(hd) (Color_hd (hd) == Caml_white)
-#define Is_gray_hd(hd) (Color_hd (hd) == Caml_gray)
-#define Is_blue_hd(hd) (Color_hd (hd) == Caml_blue)
-#define Is_black_hd(hd) (Color_hd (hd) == Caml_black)
-
-#define Whitehd_hd(hd) (((hd)  & ~Caml_black)/*| Caml_white*/)
-#define Grayhd_hd(hd)  (((hd)  & ~Caml_black)  | Caml_gray)
-#define Blackhd_hd(hd) (((hd)/*& ~Caml_black*/)| Caml_black)
-#define Bluehd_hd(hd)  (((hd)  & ~Caml_black)  | Caml_blue)
-
-/* This depends on the layout of the header.  See [mlvalues.h]. */
-#define Make_header(wosize, tag, color)                                       \
-      (/*Assert ((wosize) <= Max_wosize),*/                                   \
-       ((header_t) (((header_t) (wosize) << 10)                               \
-                    + (color)                                                 \
-                    + (tag_t) (tag)))                                         \
-      )
-
-#define Is_white_val(val) (Color_val(val) == Caml_white)
-#define Is_gray_val(val) (Color_val(val) == Caml_gray)
-#define Is_blue_val(val) (Color_val(val) == Caml_blue)
-#define Is_black_val(val) (Color_val(val) == Caml_black)
-
-/* For extern.c */
-#define Colornum_hd(hd) ((color_t) (((hd) >> 8) & 3))
-#define Coloredhd_hd(hd,colnum) (((hd) & ~Caml_black) | ((colnum) << 8))
-
-#endif /* CAML_GC_H */
diff --git a/byterun/gc_ctrl.c b/byterun/gc_ctrl.c
index 07cfc26..255ed17 100644
--- a/byterun/gc_ctrl.c
+++ b/byterun/gc_ctrl.c
@@ -11,21 +11,21 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include "alloc.h"
-#include "compact.h"
-#include "custom.h"
-#include "finalise.h"
-#include "freelist.h"
-#include "gc.h"
-#include "gc_ctrl.h"
-#include "major_gc.h"
-#include "minor_gc.h"
-#include "misc.h"
-#include "mlvalues.h"
+#include "caml/alloc.h"
+#include "caml/compact.h"
+#include "caml/custom.h"
+#include "caml/finalise.h"
+#include "caml/freelist.h"
+#include "caml/gc.h"
+#include "caml/gc_ctrl.h"
+#include "caml/major_gc.h"
+#include "caml/minor_gc.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
 #ifdef NATIVE_CODE
 #include "stack.h"
 #else
-#include "stacks.h"
+#include "caml/stacks.h"
 #endif
 
 #ifndef NATIVE_CODE
diff --git a/byterun/gc_ctrl.h b/byterun/gc_ctrl.h
deleted file mode 100644
index 5f9d873..0000000
--- a/byterun/gc_ctrl.h
+++ /dev/null
@@ -1,40 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_GC_CTRL_H
-#define CAML_GC_CTRL_H
-
-#include "misc.h"
-
-extern double
-     caml_stat_minor_words,
-     caml_stat_promoted_words,
-     caml_stat_major_words;
-
-extern intnat
-     caml_stat_minor_collections,
-     caml_stat_major_collections,
-     caml_stat_heap_size,
-     caml_stat_top_heap_size,
-     caml_stat_compactions,
-     caml_stat_heap_chunks;
-
-void caml_init_gc (uintnat, uintnat, uintnat,
-                   uintnat, uintnat);
-
-
-#ifdef DEBUG
-void caml_heap_check (void);
-#endif
-
-#endif /* CAML_GC_CTRL_H */
diff --git a/byterun/globroots.c b/byterun/globroots.c
index ded393e..d3dd925 100644
--- a/byterun/globroots.c
+++ b/byterun/globroots.c
@@ -13,11 +13,11 @@
 
 /* Registration of global memory roots */
 
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "roots.h"
-#include "globroots.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/roots.h"
+#include "caml/globroots.h"
 
 /* The sets of global memory roots are represented as skip lists
    (see William Pugh, "Skip lists: a probabilistic alternative to
diff --git a/byterun/globroots.h b/byterun/globroots.h
deleted file mode 100644
index 1c3ebab..0000000
--- a/byterun/globroots.h
+++ /dev/null
@@ -1,25 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*           Xavier Leroy, projet Cristal, INRIA Rocquencourt          */
-/*                                                                     */
-/*  Copyright 2001 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Registration of global memory roots */
-
-#ifndef CAML_GLOBROOTS_H
-#define CAML_GLOBROOTS_H
-
-#include "mlvalues.h"
-#include "roots.h"
-
-void caml_scan_global_roots(scanning_action f);
-void caml_scan_global_young_roots(scanning_action f);
-
-#endif /* CAML_GLOBROOTS_H */
diff --git a/byterun/hash.c b/byterun/hash.c
index 61bee20..23f8486 100644
--- a/byterun/hash.c
+++ b/byterun/hash.c
@@ -13,18 +13,18 @@
 
 /* The generic hashing primitive */
 
-/* The interface of this file is in "mlvalues.h" (for [caml_hash_variant])
-   and in "hash.h" (for the other exported functions). */
+/* The interface of this file is in "caml/mlvalues.h" (for [caml_hash_variant])
+   and in "caml/hash.h" (for the other exported functions). */
 
-#include "mlvalues.h"
-#include "custom.h"
-#include "memory.h"
-#include "hash.h"
+#include "caml/mlvalues.h"
+#include "caml/custom.h"
+#include "caml/memory.h"
+#include "caml/hash.h"
 
 #ifdef ARCH_INT64_TYPE
-#include "int64_native.h"
+#include "caml/int64_native.h"
 #else
-#include "int64_emul.h"
+#include "caml/int64_emul.h"
 #endif
 
 /* The new implementation, based on MurmurHash 3,
diff --git a/byterun/hash.h b/byterun/hash.h
deleted file mode 100644
index 436a8bb..0000000
--- a/byterun/hash.h
+++ /dev/null
@@ -1,29 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Gallium, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2011 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Auxiliary functions for custom hash functions */
-
-#ifndef CAML_HASH_H
-#define CAML_HASH_H
-
-#include "mlvalues.h"
-
-CAMLextern uint32 caml_hash_mix_uint32(uint32 h, uint32 d);
-CAMLextern uint32 caml_hash_mix_intnat(uint32 h, intnat d);
-CAMLextern uint32 caml_hash_mix_int64(uint32 h, int64 d);
-CAMLextern uint32 caml_hash_mix_double(uint32 h, double d);
-CAMLextern uint32 caml_hash_mix_float(uint32 h, float d);
-CAMLextern uint32 caml_hash_mix_string(uint32 h, value s);
-
-
-#endif
diff --git a/byterun/instrtrace.c b/byterun/instrtrace.c
index d35948f..3855e5a 100644
--- a/byterun/instrtrace.c
+++ b/byterun/instrtrace.c
@@ -19,12 +19,12 @@
 #include <string.h>
 #include <ctype.h>
 
-#include "instruct.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "opnames.h"
-#include "prims.h"
-#include "stacks.h"
+#include "caml/instruct.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/opnames.h"
+#include "caml/prims.h"
+#include "caml/stacks.h"
 
 extern code_t caml_start_code;
 
diff --git a/byterun/instrtrace.h b/byterun/instrtrace.h
deleted file mode 100644
index 1e62ac4..0000000
--- a/byterun/instrtrace.h
+++ /dev/null
@@ -1,29 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Trace the instructions executed */
-
-#ifndef _instrtrace_
-#define _instrtrace_
-
-
-#include "mlvalues.h"
-#include "misc.h"
-
-extern int caml_trace_flag;
-extern intnat caml_icount;
-void caml_stop_here (void);
-void caml_disasm_instr (code_t pc);
-void caml_trace_value_file (value v, code_t prog, int proglen, FILE * f);
-void caml_trace_accu_sp_file(value accu, value * sp, code_t prog, int proglen, FILE * f);
-#endif
diff --git a/byterun/instruct.h b/byterun/instruct.h
deleted file mode 100644
index 5686050..0000000
--- a/byterun/instruct.h
+++ /dev/null
@@ -1,59 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* The instruction set. */
-
-#ifndef CAML_INSTRUCT_H
-#define CAML_INSTRUCT_H
-
-enum instructions {
-  ACC0, ACC1, ACC2, ACC3, ACC4, ACC5, ACC6, ACC7,
-  ACC, PUSH,
-  PUSHACC0, PUSHACC1, PUSHACC2, PUSHACC3,
-  PUSHACC4, PUSHACC5, PUSHACC6, PUSHACC7,
-  PUSHACC, POP, ASSIGN,
-  ENVACC1, ENVACC2, ENVACC3, ENVACC4, ENVACC,
-  PUSHENVACC1, PUSHENVACC2, PUSHENVACC3, PUSHENVACC4, PUSHENVACC,
-  PUSH_RETADDR, APPLY, APPLY1, APPLY2, APPLY3,
-  APPTERM, APPTERM1, APPTERM2, APPTERM3,
-  RETURN, RESTART, GRAB,
-  CLOSURE, CLOSUREREC,
-  OFFSETCLOSUREM2, OFFSETCLOSURE0, OFFSETCLOSURE2, OFFSETCLOSURE,
-  PUSHOFFSETCLOSUREM2, PUSHOFFSETCLOSURE0,
-  PUSHOFFSETCLOSURE2, PUSHOFFSETCLOSURE,
-  GETGLOBAL, PUSHGETGLOBAL, GETGLOBALFIELD, PUSHGETGLOBALFIELD, SETGLOBAL,
-  ATOM0, ATOM, PUSHATOM0, PUSHATOM,
-  MAKEBLOCK, MAKEBLOCK1, MAKEBLOCK2, MAKEBLOCK3, MAKEFLOATBLOCK,
-  GETFIELD0, GETFIELD1, GETFIELD2, GETFIELD3, GETFIELD, GETFLOATFIELD,
-  SETFIELD0, SETFIELD1, SETFIELD2, SETFIELD3, SETFIELD, SETFLOATFIELD,
-  VECTLENGTH, GETVECTITEM, SETVECTITEM,
-  GETSTRINGCHAR, SETSTRINGCHAR,
-  BRANCH, BRANCHIF, BRANCHIFNOT, SWITCH, BOOLNOT,
-  PUSHTRAP, POPTRAP, RAISE, CHECK_SIGNALS,
-  C_CALL1, C_CALL2, C_CALL3, C_CALL4, C_CALL5, C_CALLN,
-  CONST0, CONST1, CONST2, CONST3, CONSTINT,
-  PUSHCONST0, PUSHCONST1, PUSHCONST2, PUSHCONST3, PUSHCONSTINT,
-  NEGINT, ADDINT, SUBINT, MULINT, DIVINT, MODINT,
-  ANDINT, ORINT, XORINT, LSLINT, LSRINT, ASRINT,
-  EQ, NEQ, LTINT, LEINT, GTINT, GEINT,
-  OFFSETINT, OFFSETREF, ISINT,
-  GETMETHOD,
-  BEQ, BNEQ,  BLTINT, BLEINT, BGTINT, BGEINT,
-  ULTINT, UGEINT,
-  BULTINT, BUGEINT,
-  GETPUBMET, GETDYNMET,
-  STOP,
-  EVENT, BREAK
-};
-
-#endif /* CAML_INSTRUCT_H */
diff --git a/byterun/int64_emul.h b/byterun/int64_emul.h
deleted file mode 100644
index ba7904a..0000000
--- a/byterun/int64_emul.h
+++ /dev/null
@@ -1,287 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2002 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Software emulation of 64-bit integer arithmetic, for C compilers
-   that do not support it.  */
-
-#ifndef CAML_INT64_EMUL_H
-#define CAML_INT64_EMUL_H
-
-#include <math.h>
-
-#ifdef ARCH_BIG_ENDIAN
-#define I64_literal(hi,lo) { hi, lo }
-#else
-#define I64_literal(hi,lo) { lo, hi }
-#endif
-
-#define I64_split(x,hi,lo) (hi = (x).h, lo = (x).l)
-
-/* Unsigned comparison */
-static int I64_ucompare(uint64 x, uint64 y)
-{
-  if (x.h > y.h) return 1;
-  if (x.h < y.h) return -1;
-  if (x.l > y.l) return 1;
-  if (x.l < y.l) return -1;
-  return 0;
-}
-
-#define I64_ult(x, y) (I64_ucompare(x, y) < 0)
-
-/* Signed comparison */
-static int I64_compare(int64 x, int64 y)
-{
-  if ((int32)x.h > (int32)y.h) return 1;
-  if ((int32)x.h < (int32)y.h) return -1;
-  if (x.l > y.l) return 1;
-  if (x.l < y.l) return -1;
-  return 0;
-}
-
-/* Negation */
-static int64 I64_neg(int64 x)
-{
-  int64 res;
-  res.l = -x.l;
-  res.h = ~x.h;
-  if (res.l == 0) res.h++;
-  return res;
-}
-
-/* Addition */
-static int64 I64_add(int64 x, int64 y)
-{
-  int64 res;
-  res.l = x.l + y.l;
-  res.h = x.h + y.h;
-  if (res.l < x.l) res.h++;
-  return res;
-}
-
-/* Subtraction */
-static int64 I64_sub(int64 x, int64 y)
-{
-  int64 res;
-  res.l = x.l - y.l;
-  res.h = x.h - y.h;
-  if (x.l < y.l) res.h--;
-  return res;
-}
-
-/* Multiplication */
-static int64 I64_mul(int64 x, int64 y)
-{
-  int64 res;
-  uint32 prod00 = (x.l & 0xFFFF) * (y.l & 0xFFFF);
-  uint32 prod10 = (x.l >> 16) * (y.l & 0xFFFF);
-  uint32 prod01 = (x.l & 0xFFFF) * (y.l >> 16);
-  uint32 prod11 = (x.l >> 16) * (y.l >> 16);
-  res.l = prod00;
-  res.h = prod11 + (prod01 >> 16) + (prod10 >> 16);
-  prod01 = prod01 << 16; res.l += prod01; if (res.l < prod01) res.h++;
-  prod10 = prod10 << 16; res.l += prod10; if (res.l < prod10) res.h++;
-  res.h += x.l * y.h + x.h * y.l;
-  return res;
-}
-
-#define I64_is_zero(x) (((x).l | (x).h) == 0)
-#define I64_is_negative(x) ((int32) (x).h < 0)
-#define I64_is_min_int(x) ((x).l == 0 && (x).h == 0x80000000U)
-#define I64_is_minus_one(x) (((x).l & (x).h) == 0xFFFFFFFFU)
-
-/* Bitwise operations */
-static int64 I64_and(int64 x, int64 y)
-{
-  int64 res;
-  res.l = x.l & y.l;
-  res.h = x.h & y.h;
-  return res;
-}
-
-static int64 I64_or(int64 x, int64 y)
-{
-  int64 res;
-  res.l = x.l | y.l;
-  res.h = x.h | y.h;
-  return res;
-}
-
-static int64 I64_xor(int64 x, int64 y)
-{
-  int64 res;
-  res.l = x.l ^ y.l;
-  res.h = x.h ^ y.h;
-  return res;
-}
-
-/* Shifts */
-static int64 I64_lsl(int64 x, int s)
-{
-  int64 res;
-  s = s & 63;
-  if (s == 0) return x;
-  if (s < 32) {
-    res.l = x.l << s;
-    res.h = (x.h << s) | (x.l >> (32 - s));
-  } else {
-    res.l = 0;
-    res.h = x.l << (s - 32);
-  }
-  return res;
-}
-
-static int64 I64_lsr(int64 x, int s)
-{
-  int64 res;
-  s = s & 63;
-  if (s == 0) return x;
-  if (s < 32) {
-    res.l = (x.l >> s) | (x.h << (32 - s));
-    res.h = x.h >> s;
-  } else {
-    res.l = x.h >> (s - 32);
-    res.h = 0;
-  }
-  return res;
-}
-
-static int64 I64_asr(int64 x, int s)
-{
-  int64 res;
-  s = s & 63;
-  if (s == 0) return x;
-  if (s < 32) {
-    res.l = (x.l >> s) | (x.h << (32 - s));
-    res.h = (int32) x.h >> s;
-  } else {
-    res.l = (int32) x.h >> (s - 32);
-    res.h = (int32) x.h >> 31;
-  }
-  return res;
-}
-
-/* Division and modulus */
-
-#define I64_SHL1(x) x.h = (x.h << 1) | (x.l >> 31); x.l <<= 1
-#define I64_SHR1(x) x.l = (x.l >> 1) | (x.h << 31); x.h >>= 1
-
-static void I64_udivmod(uint64 modulus, uint64 divisor,
-                        uint64 * quo, uint64 * mod)
-{
-  int64 quotient, mask;
-  int cmp;
-
-  quotient.h = 0; quotient.l = 0;
-  mask.h = 0; mask.l = 1;
-  while ((int32) divisor.h >= 0) {
-    cmp = I64_ucompare(divisor, modulus);
-    I64_SHL1(divisor);
-    I64_SHL1(mask);
-    if (cmp >= 0) break;
-  }
-  while (mask.l | mask.h) {
-    if (I64_ucompare(modulus, divisor) >= 0) {
-      quotient.h |= mask.h; quotient.l |= mask.l;
-      modulus = I64_sub(modulus, divisor);
-    }
-    I64_SHR1(mask);
-    I64_SHR1(divisor);
-  }
-  *quo = quotient;
-  *mod = modulus;
-}
-
-static int64 I64_div(int64 x, int64 y)
-{
-  int64 q, r;
-  int32 sign;
-
-  sign = x.h ^ y.h;
-  if ((int32) x.h < 0) x = I64_neg(x);
-  if ((int32) y.h < 0) y = I64_neg(y);
-  I64_udivmod(x, y, &q, &r);
-  if (sign < 0) q = I64_neg(q);
-  return q;
-}
-
-static int64 I64_mod(int64 x, int64 y)
-{
-  int64 q, r;
-  int32 sign;
-
-  sign = x.h;
-  if ((int32) x.h < 0) x = I64_neg(x);
-  if ((int32) y.h < 0) y = I64_neg(y);
-  I64_udivmod(x, y, &q, &r);
-  if (sign < 0) r = I64_neg(r);
-  return r;
-}
-
-/* Coercions */
-
-static int64 I64_of_int32(int32 x)
-{
-  int64 res;
-  res.l = x;
-  res.h = x >> 31;
-  return res;
-}
-
-#define I64_to_int32(x) ((int32) (x).l)
-
-/* Note: we assume sizeof(intnat) = 4 here, which is true otherwise
-   autoconfiguration would have selected native 64-bit integers */
-#define I64_of_intnat I64_of_int32
-#define I64_to_intnat I64_to_int32
-
-static double I64_to_double(int64 x)
-{
-  double res;
-  int32 sign = x.h;
-  if (sign < 0) x = I64_neg(x);
-  res = ldexp((double) x.h, 32) + x.l;
-  if (sign < 0) res = -res;
-  return res;
-}
-
-static int64 I64_of_double(double f)
-{
-  int64 res;
-  double frac, integ;
-  int neg;
-
-  neg = (f < 0);
-  f = fabs(f);
-  frac = modf(ldexp(f, -32), &integ);
-  res.h = (uint32) integ;
-  res.l = (uint32) ldexp(frac, 32);
-  if (neg) res = I64_neg(res);
-  return res;
-}
-
-static int64 I64_bswap(int64 x)
-{
-  int64 res;
-  res.h = (((x.l & 0x000000FF) << 24) |
-           ((x.l & 0x0000FF00) << 8) |
-           ((x.l & 0x00FF0000) >> 8) |
-           ((x.l & 0xFF000000) >> 24));
-  res.l = (((x.h & 0x000000FF) << 24) |
-           ((x.h & 0x0000FF00) << 8) |
-           ((x.h & 0x00FF0000) >> 8) |
-           ((x.h & 0xFF000000) >> 24));
-  return res;
-}
-
-#endif /* CAML_INT64_EMUL_H */
diff --git a/byterun/int64_format.h b/byterun/int64_format.h
deleted file mode 100644
index b0de527..0000000
--- a/byterun/int64_format.h
+++ /dev/null
@@ -1,105 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2002 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* printf-like formatting of 64-bit integers, in case the C library
-   printf() function does not support them. */
-
-#ifndef CAML_INT64_FORMAT_H
-#define CAML_INT64_FORMAT_H
-
-static void I64_format(char * buffer, char * fmt, int64 x)
-{
-  static char conv_lower[] = "0123456789abcdef";
-  static char conv_upper[] = "0123456789ABCDEF";
-  char rawbuffer[24];
-  char justify, signstyle, filler, alternate, signedconv;
-  int base, width, sign, i, rawlen;
-  char * cvtbl;
-  char * p, * r;
-  int64 wbase, digit;
-
-  /* Parsing of format */
-  justify = '+';
-  signstyle = '-';
-  filler = ' ';
-  alternate = 0;
-  base = 0;
-  signedconv = 0;
-  width = 0;
-  cvtbl = conv_lower;
-  for (p = fmt; *p != 0; p++) {
-    switch (*p) {
-    case '-':
-      justify = '-'; break;
-    case '+': case ' ':
-      signstyle = *p; break;
-    case '0':
-      filler = '0'; break;
-    case '#':
-      alternate = 1; break;
-    case '1': case '2': case '3': case '4': case '5':
-    case '6': case '7': case '8': case '9':
-      width = atoi(p);
-      while (p[1] >= '0' && p[1] <= '9') p++;
-      break;
-    case 'd': case 'i':
-      signedconv = 1; /* fallthrough */
-    case 'u':
-      base = 10; break;
-    case 'x':
-      base = 16; break;
-    case 'X':
-      base = 16; cvtbl = conv_upper; break;
-    case 'o':
-      base = 8; break;
-    }
-  }
-  if (base == 0) { buffer[0] = 0; return; }
-  /* Do the conversion */
-  sign = 1;
-  if (signedconv && I64_is_negative(x)) { sign = -1; x = I64_neg(x); }
-  r = rawbuffer + sizeof(rawbuffer);
-  wbase = I64_of_int32(base);
-  do {
-    I64_udivmod(x, wbase, &x, &digit);
-    *--r = cvtbl[I64_to_int32(digit)];
-  } while (! I64_is_zero(x));
-  rawlen = rawbuffer + sizeof(rawbuffer) - r;
-  /* Adjust rawlen to reflect additional chars (sign, etc) */
-  if (signedconv && (sign < 0 || signstyle != '-')) rawlen++;
-  if (alternate) {
-    if (base == 8) rawlen += 1;
-    if (base == 16) rawlen += 2;
-  }
-  /* Do the formatting */
-  p = buffer;
-  if (justify == '+' && filler == ' ') {
-    for (i = rawlen; i < width; i++) *p++ = ' ';
-  }
-  if (signedconv) {
-    if (sign < 0) *p++ = '-';
-    else if (signstyle != '-') *p++ = signstyle;
-  }
-  if (alternate && base == 8) *p++ = '0';
-  if (alternate && base == 16) { *p++ = '0'; *p++ = 'x'; }
-  if (justify == '+' && filler == '0') {
-    for (i = rawlen; i < width; i++) *p++ = '0';
-  }
-  while (r < rawbuffer + sizeof(rawbuffer)) *p++ = *r++;
-  if (justify == '-') {
-    for (i = rawlen; i < width; i++) *p++ = ' ';
-  }
-  *p = 0;
-}
-
-#endif /* CAML_INT64_FORMAT_H */
diff --git a/byterun/int64_native.h b/byterun/int64_native.h
deleted file mode 100644
index 09b5d65..0000000
--- a/byterun/int64_native.h
+++ /dev/null
@@ -1,61 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2002 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Wrapper macros around native 64-bit integer arithmetic,
-   so that it has the same interface as the software emulation
-   provided in int64_emul.h */
-
-#ifndef CAML_INT64_NATIVE_H
-#define CAML_INT64_NATIVE_H
-
-#define I64_literal(hi,lo) ((int64)(hi) << 32 | (lo))
-#define I64_split(x,hi,lo) (hi = (uint32)((x)>>32), lo = (uint32)(x))
-#define I64_compare(x,y) (((x) > (y)) - ((x) < (y)))
-#define I64_ult(x,y) ((uint64)(x) < (uint64)(y))
-#define I64_neg(x) (-(x))
-#define I64_add(x,y) ((x) + (y))
-#define I64_sub(x,y) ((x) - (y))
-#define I64_mul(x,y) ((x) * (y))
-#define I64_is_zero(x) ((x) == 0)
-#define I64_is_negative(x) ((x) < 0)
-#define I64_is_min_int(x) ((x) == ((int64)1 << 63))
-#define I64_is_minus_one(x) ((x) == -1)
-
-#define I64_div(x,y) ((x) / (y))
-#define I64_mod(x,y) ((x) % (y))
-#define I64_udivmod(x,y,quo,rem) \
-  (*(rem) = (uint64)(x) % (uint64)(y), \
-   *(quo) = (uint64)(x) / (uint64)(y))
-#define I64_and(x,y) ((x) & (y))
-#define I64_or(x,y) ((x) | (y))
-#define I64_xor(x,y) ((x) ^ (y))
-#define I64_lsl(x,y) ((x) << (y))
-#define I64_asr(x,y) ((x) >> (y))
-#define I64_lsr(x,y) ((uint64)(x) >> (y))
-#define I64_to_intnat(x) ((intnat) (x))
-#define I64_of_intnat(x) ((intnat) (x))
-#define I64_to_int32(x) ((int32) (x))
-#define I64_of_int32(x) ((int64) (x))
-#define I64_to_double(x) ((double)(x))
-#define I64_of_double(x) ((int64)(x))
-
-#define I64_bswap(x) ((((x) & 0x00000000000000FF) << 56) | \
-                      (((x) & 0x000000000000FF00) << 40) | \
-                      (((x) & 0x0000000000FF0000) << 24) | \
-                      (((x) & 0x00000000FF000000) << 8) |  \
-                      (((x) & 0x000000FF00000000) >> 8) |  \
-                      (((x) & 0x0000FF0000000000) >> 24) | \
-                      (((x) & 0x00FF000000000000) >> 40) | \
-                      (((x) & 0xFF00000000000000) >> 56))
-
-#endif /* CAML_INT64_NATIVE_H */
diff --git a/byterun/intern.c b/byterun/intern.c
index f45a2c1..5399ea8 100644
--- a/byterun/intern.c
+++ b/byterun/intern.c
@@ -13,22 +13,22 @@
 
 /* Structured input, compact format */
 
-/* The interface of this file is "intext.h" */
+/* The interface of this file is "caml/intext.h" */
 
 #include <string.h>
 #include <stdio.h>
-#include "alloc.h"
-#include "callback.h"
-#include "custom.h"
-#include "fail.h"
-#include "gc.h"
-#include "intext.h"
-#include "io.h"
-#include "md5.h"
-#include "memory.h"
-#include "mlvalues.h"
-#include "misc.h"
-#include "reverse.h"
+#include "caml/alloc.h"
+#include "caml/callback.h"
+#include "caml/custom.h"
+#include "caml/fail.h"
+#include "caml/gc.h"
+#include "caml/intext.h"
+#include "caml/io.h"
+#include "caml/md5.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
+#include "caml/misc.h"
+#include "caml/reverse.h"
 
 static unsigned char * intern_src;
 /* Reading pointer in block holding input data. */
diff --git a/byterun/interp.c b/byterun/interp.c
index 59c88e1..3ac567f 100644
--- a/byterun/interp.c
+++ b/byterun/interp.c
@@ -13,22 +13,22 @@
 
 /* The bytecode interpreter */
 #include <stdio.h>
-#include "alloc.h"
-#include "backtrace.h"
-#include "callback.h"
-#include "debugger.h"
-#include "fail.h"
-#include "fix_code.h"
-#include "instrtrace.h"
-#include "instruct.h"
-#include "interp.h"
-#include "major_gc.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "prims.h"
-#include "signals.h"
-#include "stacks.h"
+#include "caml/alloc.h"
+#include "caml/backtrace.h"
+#include "caml/callback.h"
+#include "caml/debugger.h"
+#include "caml/fail.h"
+#include "caml/fix_code.h"
+#include "caml/instrtrace.h"
+#include "caml/instruct.h"
+#include "caml/interp.h"
+#include "caml/major_gc.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/prims.h"
+#include "caml/signals.h"
+#include "caml/stacks.h"
 
 /* Registers for the abstract machine:
         pc         the code pointer
@@ -222,7 +222,7 @@ value caml_interprete(code_t prog, asize_t prog_size)
 
 #ifdef THREADED_CODE
   static void * jumptable[] = {
-#    include "jumptbl.h"
+#    include "caml/jumptbl.h"
   };
 #endif
 
diff --git a/byterun/interp.h b/byterun/interp.h
deleted file mode 100644
index c8e2f89..0000000
--- a/byterun/interp.h
+++ /dev/null
@@ -1,31 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* The bytecode interpreter */
-
-#ifndef CAML_INTERP_H
-#define CAML_INTERP_H
-
-#include "misc.h"
-#include "mlvalues.h"
-
-/* interpret a bytecode */
-value caml_interprete (code_t prog, asize_t prog_size);
-
-/* tell the runtime that a bytecode program might be needed */
-void caml_prepare_bytecode(code_t prog, asize_t prog_size);
-
-/* tell the runtime that a bytecode program is no more needed */
-void caml_release_bytecode(code_t prog, asize_t prog_size);
-
-#endif /* CAML_INTERP_H */
diff --git a/byterun/intext.h b/byterun/intext.h
deleted file mode 100644
index f7aa655..0000000
--- a/byterun/intext.h
+++ /dev/null
@@ -1,168 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Structured input/output */
-
-#ifndef CAML_INTEXT_H
-#define CAML_INTEXT_H
-
-#ifndef CAML_NAME_SPACE
-#include "compatibility.h"
-#endif
-#include "misc.h"
-#include "mlvalues.h"
-
-/* <private> */
-#include "io.h"
-
-/* Magic number */
-
-#define Intext_magic_number 0x8495A6BE
-
-/* Codes for the compact format */
-
-#define PREFIX_SMALL_BLOCK 0x80
-#define PREFIX_SMALL_INT 0x40
-#define PREFIX_SMALL_STRING 0x20
-#define CODE_INT8 0x0
-#define CODE_INT16 0x1
-#define CODE_INT32 0x2
-#define CODE_INT64 0x3
-#define CODE_SHARED8 0x4
-#define CODE_SHARED16 0x5
-#define CODE_SHARED32 0x6
-#define CODE_BLOCK32 0x8
-#define CODE_BLOCK64 0x13
-#define CODE_STRING8 0x9
-#define CODE_STRING32 0xA
-#define CODE_DOUBLE_BIG 0xB
-#define CODE_DOUBLE_LITTLE 0xC
-#define CODE_DOUBLE_ARRAY8_BIG 0xD
-#define CODE_DOUBLE_ARRAY8_LITTLE 0xE
-#define CODE_DOUBLE_ARRAY32_BIG 0xF
-#define CODE_DOUBLE_ARRAY32_LITTLE 0x7
-#define CODE_CODEPOINTER 0x10
-#define CODE_INFIXPOINTER 0x11
-#define CODE_CUSTOM 0x12
-
-#if ARCH_FLOAT_ENDIANNESS == 0x76543210
-#define CODE_DOUBLE_NATIVE CODE_DOUBLE_BIG
-#define CODE_DOUBLE_ARRAY8_NATIVE CODE_DOUBLE_ARRAY8_BIG
-#define CODE_DOUBLE_ARRAY32_NATIVE CODE_DOUBLE_ARRAY32_BIG
-#else
-#define CODE_DOUBLE_NATIVE CODE_DOUBLE_LITTLE
-#define CODE_DOUBLE_ARRAY8_NATIVE CODE_DOUBLE_ARRAY8_LITTLE
-#define CODE_DOUBLE_ARRAY32_NATIVE CODE_DOUBLE_ARRAY32_LITTLE
-#endif
-
-/* Size-ing data structures for extern.  Chosen so that
-   sizeof(struct trail_block) and sizeof(struct output_block)
-   are slightly below 8Kb. */
-
-#define ENTRIES_PER_TRAIL_BLOCK  1025
-#define SIZE_EXTERN_OUTPUT_BLOCK 8100
-
-/* The entry points */
-
-void caml_output_val (struct channel * chan, value v, value flags);
-  /* Output [v] with flags [flags] on the channel [chan]. */
-
-/* </private> */
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-CAMLextern void caml_output_value_to_malloc(value v, value flags,
-                                            /*out*/ char ** buf,
-                                            /*out*/ intnat * len);
-  /* Output [v] with flags [flags] to a memory buffer allocated with
-     malloc.  On return, [*buf] points to the buffer and [*len]
-     contains the number of bytes in buffer. */
-CAMLextern intnat caml_output_value_to_block(value v, value flags,
-                                             char * data, intnat len);
-  /* Output [v] with flags [flags] to a user-provided memory buffer.
-     [data] points to the start of this buffer, and [len] is its size
-     in bytes.  Return the number of bytes actually written in buffer.
-     Raise [Failure] if buffer is too short. */
-
-/* <private> */
-value caml_input_val (struct channel * chan);
-  /* Read a structured value from the channel [chan]. */
-/* </private> */
-
-CAMLextern value caml_input_val_from_string (value str, intnat ofs);
-  /* Read a structured value from the OCaml string [str], starting
-     at offset [ofs]. */
-CAMLextern value caml_input_value_from_malloc(char * data, intnat ofs);
-  /* Read a structured value from a malloced buffer.  [data] points
-     to the beginning of the buffer, and [ofs] is the offset of the
-     beginning of the externed data in this buffer.  The buffer is
-     deallocated with [free] on return, or if an exception is raised. */
-CAMLextern value caml_input_value_from_block(char * data, intnat len);
-  /* Read a structured value from a user-provided buffer.  [data] points
-     to the beginning of the externed data in this buffer,
-     and [len] is the length in bytes of valid data in this buffer.
-     The buffer is never deallocated by this routine. */
-
-/* Functions for writing user-defined marshallers */
-
-CAMLextern void caml_serialize_int_1(int i);
-CAMLextern void caml_serialize_int_2(int i);
-CAMLextern void caml_serialize_int_4(int32 i);
-CAMLextern void caml_serialize_int_8(int64 i);
-CAMLextern void caml_serialize_float_4(float f);
-CAMLextern void caml_serialize_float_8(double f);
-CAMLextern void caml_serialize_block_1(void * data, intnat len);
-CAMLextern void caml_serialize_block_2(void * data, intnat len);
-CAMLextern void caml_serialize_block_4(void * data, intnat len);
-CAMLextern void caml_serialize_block_8(void * data, intnat len);
-CAMLextern void caml_serialize_block_float_8(void * data, intnat len);
-
-CAMLextern int caml_deserialize_uint_1(void);
-CAMLextern int caml_deserialize_sint_1(void);
-CAMLextern int caml_deserialize_uint_2(void);
-CAMLextern int caml_deserialize_sint_2(void);
-CAMLextern uint32 caml_deserialize_uint_4(void);
-CAMLextern int32 caml_deserialize_sint_4(void);
-CAMLextern uint64 caml_deserialize_uint_8(void);
-CAMLextern int64 caml_deserialize_sint_8(void);
-CAMLextern float caml_deserialize_float_4(void);
-CAMLextern double caml_deserialize_float_8(void);
-CAMLextern void caml_deserialize_block_1(void * data, intnat len);
-CAMLextern void caml_deserialize_block_2(void * data, intnat len);
-CAMLextern void caml_deserialize_block_4(void * data, intnat len);
-CAMLextern void caml_deserialize_block_8(void * data, intnat len);
-CAMLextern void caml_deserialize_block_float_8(void * data, intnat len);
-CAMLextern void caml_deserialize_error(char * msg);
-
-/* <private> */
-
-/* Auxiliary stuff for sending code pointers */
-
-struct code_fragment {
-  char * code_start;
-  char * code_end;
-  unsigned char digest[16];
-  char digest_computed;
-};
-
-struct ext_table caml_code_fragments_table;
-
-/* </private> */
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* CAML_INTEXT_H */
diff --git a/byterun/ints.c b/byterun/ints.c
index 4ba7e82..1e1ebe2 100644
--- a/byterun/ints.c
+++ b/byterun/ints.c
@@ -13,13 +13,13 @@
 
 #include <stdio.h>
 #include <string.h>
-#include "alloc.h"
-#include "custom.h"
-#include "fail.h"
-#include "intext.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
+#include "caml/alloc.h"
+#include "caml/custom.h"
+#include "caml/fail.h"
+#include "caml/intext.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
 
 static char * parse_sign_and_base(char * p,
                                   /*out*/ int * base,
@@ -381,9 +381,9 @@ CAMLprim value caml_int32_float_of_bits(value vi)
 /* 64-bit integers */
 
 #ifdef ARCH_INT64_TYPE
-#include "int64_native.h"
+#include "caml/int64_native.h"
 #else
-#include "int64_emul.h"
+#include "caml/int64_emul.h"
 #endif
 
 #ifdef ARCH_ALIGN_INT64
@@ -570,7 +570,7 @@ CAMLprim value caml_int64_compare(value v1, value v2)
 #ifdef ARCH_INT64_PRINTF_FORMAT
 #define I64_format(buf,fmt,x) sprintf(buf,fmt,x)
 #else
-#include "int64_format.h"
+#include "caml/int64_format.h"
 #define ARCH_INT64_PRINTF_FORMAT ""
 #endif
 
diff --git a/byterun/io.c b/byterun/io.c
index 676cb5b..f9b49c8 100644
--- a/byterun/io.c
+++ b/byterun/io.c
@@ -18,19 +18,19 @@
 #include <limits.h>
 #include <string.h>
 #include <sys/types.h>
-#include "config.h"
+#include "caml/config.h"
 #ifdef HAS_UNISTD
 #include <unistd.h>
 #endif
-#include "alloc.h"
-#include "custom.h"
-#include "fail.h"
-#include "io.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "signals.h"
-#include "sys.h"
+#include "caml/alloc.h"
+#include "caml/custom.h"
+#include "caml/fail.h"
+#include "caml/io.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/signals.h"
+#include "caml/sys.h"
 
 #ifndef SEEK_SET
 #define SEEK_SET 0
diff --git a/byterun/io.h b/byterun/io.h
deleted file mode 100644
index 8420d15..0000000
--- a/byterun/io.h
+++ /dev/null
@@ -1,124 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Buffered input/output */
-
-#ifndef CAML_IO_H
-#define CAML_IO_H
-
-#include "misc.h"
-#include "mlvalues.h"
-
-#ifndef IO_BUFFER_SIZE
-#define IO_BUFFER_SIZE 65536
-#endif
-
-#if defined(_WIN32)
-typedef __int64 file_offset;
-extern __int64 _lseeki64(int, __int64, int);
-#define lseek(fd,d,m) _lseeki64(fd,d,m)
-#elif defined(HAS_OFF_T)
-#include <sys/types.h>
-typedef off_t file_offset;
-#else
-typedef long file_offset;
-#endif
-
-struct channel {
-  int fd;                       /* Unix file descriptor */
-  file_offset offset;           /* Absolute position of fd in the file */
-  char * end;                   /* Physical end of the buffer */
-  char * curr;                  /* Current position in the buffer */
-  char * max;                   /* Logical end of the buffer (for input) */
-  void * mutex;                 /* Placeholder for mutex (for systhreads) */
-  struct channel * next, * prev;/* Double chaining of channels (flush_all) */
-  int revealed;                 /* For Cash only */
-  int old_revealed;             /* For Cash only */
-  int refcount;                 /* For flush_all and for Cash */
-  int flags;                    /* Bitfield */
-  char buff[IO_BUFFER_SIZE];    /* The buffer itself */
-};
-
-enum {
-  CHANNEL_FLAG_FROM_SOCKET = 1  /* For Windows */
-};
-
-/* For an output channel:
-     [offset] is the absolute position of the beginning of the buffer [buff].
-   For an input channel:
-     [offset] is the absolute position of the logical end of the buffer, [max].
-*/
-
-/* Functions and macros that can be called from C.  Take arguments of
-   type struct channel *.  No locking is performed. */
-
-#define putch(channel, ch) do{                                            \
-  if ((channel)->curr >= (channel)->end) caml_flush_partial(channel);     \
-  *((channel)->curr)++ = (ch);                                            \
-}while(0)
-
-#define getch(channel)                                                      \
-  ((channel)->curr >= (channel)->max                                        \
-   ? caml_refill(channel)                                                   \
-   : (unsigned char) *((channel)->curr)++)
-
-CAMLextern struct channel * caml_open_descriptor_in (int);
-CAMLextern struct channel * caml_open_descriptor_out (int);
-CAMLextern void caml_close_channel (struct channel *);
-CAMLextern int caml_channel_binary_mode (struct channel *);
-CAMLextern value caml_alloc_channel(struct channel *chan);
-
-CAMLextern int caml_flush_partial (struct channel *);
-CAMLextern void caml_flush (struct channel *);
-CAMLextern void caml_putword (struct channel *, uint32);
-CAMLextern int caml_putblock (struct channel *, char *, intnat);
-CAMLextern void caml_really_putblock (struct channel *, char *, intnat);
-
-CAMLextern unsigned char caml_refill (struct channel *);
-CAMLextern uint32 caml_getword (struct channel *);
-CAMLextern int caml_getblock (struct channel *, char *, intnat);
-CAMLextern int caml_really_getblock (struct channel *, char *, intnat);
-
-/* Extract a struct channel * from the heap object representing it */
-
-#define Channel(v) (*((struct channel **) (Data_custom_val(v))))
-
-/* The locking machinery */
-
-CAMLextern void (*caml_channel_mutex_free) (struct channel *);
-CAMLextern void (*caml_channel_mutex_lock) (struct channel *);
-CAMLextern void (*caml_channel_mutex_unlock) (struct channel *);
-CAMLextern void (*caml_channel_mutex_unlock_exn) (void);
-
-CAMLextern struct channel * caml_all_opened_channels;
-
-#define Lock(channel) \
-  if (caml_channel_mutex_lock != NULL) (*caml_channel_mutex_lock)(channel)
-#define Unlock(channel) \
-  if (caml_channel_mutex_unlock != NULL) (*caml_channel_mutex_unlock)(channel)
-#define Unlock_exn() \
-  if (caml_channel_mutex_unlock_exn != NULL) (*caml_channel_mutex_unlock_exn)()
-
-/* Conversion between file_offset and int64 */
-
-#ifdef ARCH_INT64_TYPE
-#define Val_file_offset(fofs) caml_copy_int64(fofs)
-#define File_offset_val(v) ((file_offset) Int64_val(v))
-#else
-CAMLextern value caml_Val_file_offset(file_offset fofs);
-CAMLextern file_offset caml_File_offset_val(value v);
-#define Val_file_offset caml_Val_file_offset
-#define File_offset_val caml_File_offset_val
-#endif
-
-#endif /* CAML_IO_H */
diff --git a/byterun/lexing.c b/byterun/lexing.c
index d9550af..87cfc0a 100644
--- a/byterun/lexing.c
+++ b/byterun/lexing.c
@@ -13,9 +13,9 @@
 
 /* The table-driven automaton for lexers generated by camllex. */
 
-#include "fail.h"
-#include "mlvalues.h"
-#include "stacks.h"
+#include "caml/fail.h"
+#include "caml/mlvalues.h"
+#include "caml/stacks.h"
 
 struct lexer_buffer {
   value refill_buff;
diff --git a/byterun/main.c b/byterun/main.c
index b51c31c..1ad2028 100644
--- a/byterun/main.c
+++ b/byterun/main.c
@@ -14,9 +14,9 @@
 /* Main entry point (can be overridden by a user-provided main()
    function that calls caml_main() later). */
 
-#include "misc.h"
-#include "mlvalues.h"
-#include "sys.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/sys.h"
 
 CAMLextern void caml_main (char **);
 
diff --git a/byterun/major_gc.c b/byterun/major_gc.c
index 43d8708..0a580a8 100644
--- a/byterun/major_gc.c
+++ b/byterun/major_gc.c
@@ -13,19 +13,19 @@
 
 #include <limits.h>
 
-#include "compact.h"
-#include "custom.h"
-#include "config.h"
-#include "fail.h"
-#include "finalise.h"
-#include "freelist.h"
-#include "gc.h"
-#include "gc_ctrl.h"
-#include "major_gc.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "roots.h"
-#include "weak.h"
+#include "caml/compact.h"
+#include "caml/custom.h"
+#include "caml/config.h"
+#include "caml/fail.h"
+#include "caml/finalise.h"
+#include "caml/freelist.h"
+#include "caml/gc.h"
+#include "caml/gc_ctrl.h"
+#include "caml/major_gc.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/roots.h"
+#include "caml/weak.h"
 
 uintnat caml_percent_free;
 uintnat caml_major_heap_increment;
diff --git a/byterun/major_gc.h b/byterun/major_gc.h
deleted file mode 100644
index f473df9..0000000
--- a/byterun/major_gc.h
+++ /dev/null
@@ -1,60 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_MAJOR_GC_H
-#define CAML_MAJOR_GC_H
-
-
-#include "freelist.h"
-#include "misc.h"
-
-typedef struct {
-  void *block;           /* address of the malloced block this chunk live in */
-  asize_t alloc;         /* in bytes, used for compaction */
-  asize_t size;          /* in bytes */
-  char *next;
-} heap_chunk_head;
-
-#define Chunk_size(c) (((heap_chunk_head *) (c)) [-1]).size
-#define Chunk_alloc(c) (((heap_chunk_head *) (c)) [-1]).alloc
-#define Chunk_next(c) (((heap_chunk_head *) (c)) [-1]).next
-#define Chunk_block(c) (((heap_chunk_head *) (c)) [-1]).block
-
-extern int caml_gc_phase;
-extern int caml_gc_subphase;
-extern uintnat caml_allocated_words;
-extern double caml_extra_heap_resources;
-extern uintnat caml_dependent_size, caml_dependent_allocated;
-extern uintnat caml_fl_size_at_phase_change;
-
-#define Phase_mark 0
-#define Phase_sweep 1
-#define Phase_idle 2
-#define Subphase_main 10
-#define Subphase_weak1 11
-#define Subphase_weak2 12
-#define Subphase_final 13
-
-CAMLextern char *caml_heap_start;
-extern uintnat total_heap_size;
-extern char *caml_gc_sweep_hp;
-
-void caml_init_major_heap (asize_t);           /* size in bytes */
-asize_t caml_round_heap_chunk_size (asize_t);  /* size in bytes */
-void caml_darken (value, value *);
-intnat caml_major_collection_slice (intnat);
-void major_collection (void);
-void caml_finish_major_cycle (void);
-
-
-#endif /* CAML_MAJOR_GC_H */
diff --git a/byterun/md5.c b/byterun/md5.c
index 10ac76a..7ef54b8 100644
--- a/byterun/md5.c
+++ b/byterun/md5.c
@@ -12,13 +12,13 @@
 /***********************************************************************/
 
 #include <string.h>
-#include "alloc.h"
-#include "fail.h"
-#include "md5.h"
-#include "memory.h"
-#include "mlvalues.h"
-#include "io.h"
-#include "reverse.h"
+#include "caml/alloc.h"
+#include "caml/fail.h"
+#include "caml/md5.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
+#include "caml/io.h"
+#include "caml/reverse.h"
 
 /* MD5 message digest */
 
diff --git a/byterun/md5.h b/byterun/md5.h
deleted file mode 100644
index d8aff09..0000000
--- a/byterun/md5.h
+++ /dev/null
@@ -1,41 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1999 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* MD5 message digest */
-
-#ifndef CAML_MD5_H
-#define CAML_MD5_H
-
-
-#include "mlvalues.h"
-#include "io.h"
-
-CAMLextern value caml_md5_string (value str, value ofs, value len);
-CAMLextern value caml_md5_chan (value vchan, value len);
-CAMLextern void caml_md5_block(unsigned char digest[16],
-                               void * data, uintnat len);
-
-struct MD5Context {
-        uint32 buf[4];
-        uint32 bits[2];
-        unsigned char in[64];
-};
-
-CAMLextern void caml_MD5Init (struct MD5Context *context);
-CAMLextern void caml_MD5Update (struct MD5Context *context, unsigned char *buf,
-                                uintnat len);
-CAMLextern void caml_MD5Final (unsigned char *digest, struct MD5Context *ctx);
-CAMLextern void caml_MD5Transform (uint32 *buf, uint32 *in);
-
-
-#endif /* CAML_MD5_H */
diff --git a/byterun/memory.c b/byterun/memory.c
index ba63b32..be9ea47 100644
--- a/byterun/memory.c
+++ b/byterun/memory.c
@@ -13,17 +13,17 @@
 
 #include <stdlib.h>
 #include <string.h>
-#include "fail.h"
-#include "freelist.h"
-#include "gc.h"
-#include "gc_ctrl.h"
-#include "major_gc.h"
-#include "memory.h"
-#include "major_gc.h"
-#include "minor_gc.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "signals.h"
+#include "caml/fail.h"
+#include "caml/freelist.h"
+#include "caml/gc.h"
+#include "caml/gc_ctrl.h"
+#include "caml/major_gc.h"
+#include "caml/memory.h"
+#include "caml/major_gc.h"
+#include "caml/minor_gc.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/signals.h"
 
 extern uintnat caml_percent_free;                   /* major_gc.c */
 
diff --git a/byterun/memory.h b/byterun/memory.h
deleted file mode 100644
index 94ec41b..0000000
--- a/byterun/memory.h
+++ /dev/null
@@ -1,466 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Allocation macros and functions */
-
-#ifndef CAML_MEMORY_H
-#define CAML_MEMORY_H
-
-#ifndef CAML_NAME_SPACE
-#include "compatibility.h"
-#endif
-#include "config.h"
-/* <private> */
-#include "gc.h"
-#include "major_gc.h"
-#include "minor_gc.h"
-/* </private> */
-#include "misc.h"
-#include "mlvalues.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-
-CAMLextern value caml_alloc_shr (mlsize_t, tag_t);
-CAMLextern void caml_adjust_gc_speed (mlsize_t, mlsize_t);
-CAMLextern void caml_alloc_dependent_memory (mlsize_t);
-CAMLextern void caml_free_dependent_memory (mlsize_t);
-CAMLextern void caml_modify (value *, value);
-CAMLextern void caml_initialize (value *, value);
-CAMLextern value caml_check_urgent_gc (value);
-CAMLextern void * caml_stat_alloc (asize_t);              /* Size in bytes. */
-CAMLextern void caml_stat_free (void *);
-CAMLextern void * caml_stat_resize (void *, asize_t);     /* Size in bytes. */
-char *caml_alloc_for_heap (asize_t request);   /* Size in bytes. */
-void caml_free_for_heap (char *mem);
-int caml_add_to_heap (char *mem);
-color_t caml_allocation_color (void *hp);
-
-/* void caml_shrink_heap (char *);        Only used in compact.c */
-
-/* <private> */
-
-#define Not_in_heap 0
-#define In_heap 1
-#define In_young 2
-#define In_static_data 4
-#define In_code_area 8
-
-#ifdef ARCH_SIXTYFOUR
-
-/* 64 bits: Represent page table as a sparse hash table */
-int caml_page_table_lookup(void * addr);
-#define Classify_addr(a) (caml_page_table_lookup((void *)(a)))
-
-#else
-
-/* 32 bits: Represent page table as a 2-level array */
-#define Pagetable2_log 11
-#define Pagetable2_size (1 << Pagetable2_log)
-#define Pagetable1_log (Page_log + Pagetable2_log)
-#define Pagetable1_size (1 << (32 - Pagetable1_log))
-CAMLextern unsigned char * caml_page_table[Pagetable1_size];
-
-#define Pagetable_index1(a) (((uintnat)(a)) >> Pagetable1_log)
-#define Pagetable_index2(a) \
-  ((((uintnat)(a)) >> Page_log) & (Pagetable2_size - 1))
-#define Classify_addr(a) \
-  caml_page_table[Pagetable_index1(a)][Pagetable_index2(a)]
-
-#endif
-
-#define Is_in_value_area(a) \
-  (Classify_addr(a) & (In_heap | In_young | In_static_data))
-#define Is_in_heap(a) (Classify_addr(a) & In_heap)
-#define Is_in_heap_or_young(a) (Classify_addr(a) & (In_heap | In_young))
-
-int caml_page_table_add(int kind, void * start, void * end);
-int caml_page_table_remove(int kind, void * start, void * end);
-int caml_page_table_initialize(mlsize_t bytesize);
-
-#ifdef DEBUG
-#define DEBUG_clear(result, wosize) do{ \
-  uintnat caml__DEBUG_i; \
-  for (caml__DEBUG_i = 0; caml__DEBUG_i < (wosize); ++ caml__DEBUG_i){ \
-    Field ((result), caml__DEBUG_i) = Debug_uninit_minor; \
-  } \
-}while(0)
-#else
-#define DEBUG_clear(result, wosize)
-#endif
-
-#define Alloc_small(result, wosize, tag) do{    CAMLassert ((wosize) >= 1); \
-                                          CAMLassert ((tag_t) (tag) < 256); \
-                                 CAMLassert ((wosize) <= Max_young_wosize); \
-  caml_young_ptr -= Bhsize_wosize (wosize);                                 \
-  if (caml_young_ptr < caml_young_start){                                   \
-    caml_young_ptr += Bhsize_wosize (wosize);                               \
-    Setup_for_gc;                                                           \
-    caml_minor_collection ();                                               \
-    Restore_after_gc;                                                       \
-    caml_young_ptr -= Bhsize_wosize (wosize);                               \
-  }                                                                         \
-  Hd_hp (caml_young_ptr) = Make_header ((wosize), (tag), Caml_black);       \
-  (result) = Val_hp (caml_young_ptr);                                       \
-  DEBUG_clear ((result), (wosize));                                         \
-}while(0)
-
-/* You must use [Modify] to change a field of an existing shared block,
-   unless you are sure the value being overwritten is not a shared block and
-   the value being written is not a young block. */
-/* [Modify] never calls the GC. */
-/* [Modify] can also be used to do assignment on data structures that are
-   not in the (major) heap.  In this case, it is a bit slower than
-   simple assignment.
-   In particular, you can use [Modify] when you don't know whether the
-   block being changed is in the minor heap or the major heap.
-*/
-
-#define Modify(fp, val) do{                                                 \
-  value _old_ = *(fp);                                                      \
-  *(fp) = (val);                                                            \
-  if (Is_in_heap (fp)){                                                     \
-    if (caml_gc_phase == Phase_mark) caml_darken (_old_, NULL);             \
-    if (Is_block (val) && Is_young (val)                                    \
-        && ! (Is_block (_old_) && Is_young (_old_))){                       \
-      if (caml_ref_table.ptr >= caml_ref_table.limit){                      \
-        CAMLassert (caml_ref_table.ptr == caml_ref_table.limit);            \
-        caml_realloc_ref_table (&caml_ref_table);                           \
-      }                                                                     \
-      *caml_ref_table.ptr++ = (fp);                                         \
-    }                                                                       \
-  }                                                                         \
-}while(0)
-
-/* </private> */
-
-struct caml__roots_block {
-  struct caml__roots_block *next;
-  intnat ntables;
-  intnat nitems;
-  value *tables [5];
-};
-
-CAMLextern struct caml__roots_block *caml_local_roots;  /* defined in roots.c */
-
-/* The following macros are used to declare C local variables and
-   function parameters of type [value].
-
-   The function body must start with one of the [CAMLparam] macros.
-   If the function has no parameter of type [value], use [CAMLparam0].
-   If the function has 1 to 5 [value] parameters, use the corresponding
-   [CAMLparam] with the parameters as arguments.
-   If the function has more than 5 [value] parameters, use [CAMLparam5]
-   for the first 5 parameters, and one or more calls to the [CAMLxparam]
-   macros for the others.
-   If the function takes an array of [value]s as argument, use
-   [CAMLparamN] to declare it (or [CAMLxparamN] if you already have a
-   call to [CAMLparam] for some other arguments).
-
-   If you need local variables of type [value], declare them with one
-   or more calls to the [CAMLlocal] macros at the beginning of the
-   function, after the call to CAMLparam.  Use [CAMLlocalN] (at the
-   beginning of the function) to declare an array of [value]s.
-
-   Your function may raise an exception or return a [value] with the
-   [CAMLreturn] macro.  Its argument is simply the [value] returned by
-   your function.  Do NOT directly return a [value] with the [return]
-   keyword.  If your function returns void, use [CAMLreturn0].
-
-   All the identifiers beginning with "caml__" are reserved by OCaml.
-   Do not use them for anything (local or global variables, struct or
-   union tags, macros, etc.)
-*/
-
-#define CAMLparam0() \
-  struct caml__roots_block *caml__frame = caml_local_roots
-
-#define CAMLparam1(x) \
-  CAMLparam0 (); \
-  CAMLxparam1 (x)
-
-#define CAMLparam2(x, y) \
-  CAMLparam0 (); \
-  CAMLxparam2 (x, y)
-
-#define CAMLparam3(x, y, z) \
-  CAMLparam0 (); \
-  CAMLxparam3 (x, y, z)
-
-#define CAMLparam4(x, y, z, t) \
-  CAMLparam0 (); \
-  CAMLxparam4 (x, y, z, t)
-
-#define CAMLparam5(x, y, z, t, u) \
-  CAMLparam0 (); \
-  CAMLxparam5 (x, y, z, t, u)
-
-#define CAMLparamN(x, size) \
-  CAMLparam0 (); \
-  CAMLxparamN (x, (size))
-
-
-#if defined (__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 7))
-  #define CAMLunused __attribute__ ((unused))
-#else
-  #define CAMLunused
-#endif
-
-#define CAMLxparam1(x) \
-  struct caml__roots_block caml__roots_##x; \
-  CAMLunused int caml__dummy_##x = ( \
-    (caml__roots_##x.next = caml_local_roots), \
-    (caml_local_roots = &caml__roots_##x), \
-    (caml__roots_##x.nitems = 1), \
-    (caml__roots_##x.ntables = 1), \
-    (caml__roots_##x.tables [0] = &x), \
-    0)
-
-#define CAMLxparam2(x, y) \
-  struct caml__roots_block caml__roots_##x; \
-  CAMLunused int caml__dummy_##x = ( \
-    (caml__roots_##x.next = caml_local_roots), \
-    (caml_local_roots = &caml__roots_##x), \
-    (caml__roots_##x.nitems = 1), \
-    (caml__roots_##x.ntables = 2), \
-    (caml__roots_##x.tables [0] = &x), \
-    (caml__roots_##x.tables [1] = &y), \
-    0)
-
-#define CAMLxparam3(x, y, z) \
-  struct caml__roots_block caml__roots_##x; \
-  CAMLunused int caml__dummy_##x = ( \
-    (caml__roots_##x.next = caml_local_roots), \
-    (caml_local_roots = &caml__roots_##x), \
-    (caml__roots_##x.nitems = 1), \
-    (caml__roots_##x.ntables = 3), \
-    (caml__roots_##x.tables [0] = &x), \
-    (caml__roots_##x.tables [1] = &y), \
-    (caml__roots_##x.tables [2] = &z), \
-    0)
-
-#define CAMLxparam4(x, y, z, t) \
-  struct caml__roots_block caml__roots_##x; \
-  CAMLunused int caml__dummy_##x = ( \
-    (caml__roots_##x.next = caml_local_roots), \
-    (caml_local_roots = &caml__roots_##x), \
-    (caml__roots_##x.nitems = 1), \
-    (caml__roots_##x.ntables = 4), \
-    (caml__roots_##x.tables [0] = &x), \
-    (caml__roots_##x.tables [1] = &y), \
-    (caml__roots_##x.tables [2] = &z), \
-    (caml__roots_##x.tables [3] = &t), \
-    0)
-
-#define CAMLxparam5(x, y, z, t, u) \
-  struct caml__roots_block caml__roots_##x; \
-  CAMLunused int caml__dummy_##x = ( \
-    (caml__roots_##x.next = caml_local_roots), \
-    (caml_local_roots = &caml__roots_##x), \
-    (caml__roots_##x.nitems = 1), \
-    (caml__roots_##x.ntables = 5), \
-    (caml__roots_##x.tables [0] = &x), \
-    (caml__roots_##x.tables [1] = &y), \
-    (caml__roots_##x.tables [2] = &z), \
-    (caml__roots_##x.tables [3] = &t), \
-    (caml__roots_##x.tables [4] = &u), \
-    0)
-
-#define CAMLxparamN(x, size) \
-  struct caml__roots_block caml__roots_##x; \
-  CAMLunused int caml__dummy_##x = ( \
-    (caml__roots_##x.next = caml_local_roots), \
-    (caml_local_roots = &caml__roots_##x), \
-    (caml__roots_##x.nitems = (size)), \
-    (caml__roots_##x.ntables = 1), \
-    (caml__roots_##x.tables[0] = &(x[0])), \
-    0)
-
-#define CAMLlocal1(x) \
-  value x = 0; \
-  CAMLxparam1 (x)
-
-#define CAMLlocal2(x, y) \
-  value x = 0, y = 0; \
-  CAMLxparam2 (x, y)
-
-#define CAMLlocal3(x, y, z) \
-  value x = 0, y = 0, z = 0; \
-  CAMLxparam3 (x, y, z)
-
-#define CAMLlocal4(x, y, z, t) \
-  value x = 0, y = 0, z = 0, t = 0; \
-  CAMLxparam4 (x, y, z, t)
-
-#define CAMLlocal5(x, y, z, t, u) \
-  value x = 0, y = 0, z = 0, t = 0, u = 0; \
-  CAMLxparam5 (x, y, z, t, u)
-
-#define CAMLlocalN(x, size) \
-  value x [(size)] = { 0, /* 0, 0, ... */ }; \
-  CAMLxparamN (x, (size))
-
-
-#define CAMLreturn0 do{ \
-  caml_local_roots = caml__frame; \
-  return; \
-}while (0)
-
-#define CAMLreturnT(type, result) do{ \
-  type caml__temp_result = (result); \
-  caml_local_roots = caml__frame; \
-  return (caml__temp_result); \
-}while(0)
-
-#define CAMLreturn(result) CAMLreturnT(value, result)
-
-#define CAMLnoreturn ((void) caml__frame)
-
-
-/* convenience macro */
-#define Store_field(block, offset, val) do{ \
-  mlsize_t caml__temp_offset = (offset); \
-  value caml__temp_val = (val); \
-  caml_modify (&Field ((block), caml__temp_offset), caml__temp_val); \
-}while(0)
-
-/*
-   NOTE: [Begin_roots] and [End_roots] are superseded by [CAMLparam]*,
-   [CAMLxparam]*, [CAMLlocal]*, [CAMLreturn].
-
-   [Begin_roots] and [End_roots] are used for C variables that are GC roots.
-   It must contain all values in C local variables and function parameters
-   at the time the minor GC is called.
-   Usage:
-   After initialising your local variables to legal OCaml values, but before
-   calling allocation functions, insert [Begin_roots_n(v1, ... vn)], where
-   v1 ... vn are your variables of type [value] that you want to be updated
-   across allocations.
-   At the end, insert [End_roots()].
-
-   Note that [Begin_roots] opens a new block, and [End_roots] closes it.
-   Thus they must occur in matching pairs at the same brace nesting level.
-
-   You can use [Val_unit] as a dummy initial value for your variables.
-*/
-
-#define Begin_root Begin_roots1
-
-#define Begin_roots1(r0) { \
-  struct caml__roots_block caml__roots_block; \
-  caml__roots_block.next = caml_local_roots; \
-  caml_local_roots = &caml__roots_block; \
-  caml__roots_block.nitems = 1; \
-  caml__roots_block.ntables = 1; \
-  caml__roots_block.tables[0] = &(r0);
-
-#define Begin_roots2(r0, r1) { \
-  struct caml__roots_block caml__roots_block; \
-  caml__roots_block.next = caml_local_roots; \
-  caml_local_roots = &caml__roots_block; \
-  caml__roots_block.nitems = 1; \
-  caml__roots_block.ntables = 2; \
-  caml__roots_block.tables[0] = &(r0); \
-  caml__roots_block.tables[1] = &(r1);
-
-#define Begin_roots3(r0, r1, r2) { \
-  struct caml__roots_block caml__roots_block; \
-  caml__roots_block.next = caml_local_roots; \
-  caml_local_roots = &caml__roots_block; \
-  caml__roots_block.nitems = 1; \
-  caml__roots_block.ntables = 3; \
-  caml__roots_block.tables[0] = &(r0); \
-  caml__roots_block.tables[1] = &(r1); \
-  caml__roots_block.tables[2] = &(r2);
-
-#define Begin_roots4(r0, r1, r2, r3) { \
-  struct caml__roots_block caml__roots_block; \
-  caml__roots_block.next = caml_local_roots; \
-  caml_local_roots = &caml__roots_block; \
-  caml__roots_block.nitems = 1; \
-  caml__roots_block.ntables = 4; \
-  caml__roots_block.tables[0] = &(r0); \
-  caml__roots_block.tables[1] = &(r1); \
-  caml__roots_block.tables[2] = &(r2); \
-  caml__roots_block.tables[3] = &(r3);
-
-#define Begin_roots5(r0, r1, r2, r3, r4) { \
-  struct caml__roots_block caml__roots_block; \
-  caml__roots_block.next = caml_local_roots; \
-  caml_local_roots = &caml__roots_block; \
-  caml__roots_block.nitems = 1; \
-  caml__roots_block.ntables = 5; \
-  caml__roots_block.tables[0] = &(r0); \
-  caml__roots_block.tables[1] = &(r1); \
-  caml__roots_block.tables[2] = &(r2); \
-  caml__roots_block.tables[3] = &(r3); \
-  caml__roots_block.tables[4] = &(r4);
-
-#define Begin_roots_block(table, size) { \
-  struct caml__roots_block caml__roots_block; \
-  caml__roots_block.next = caml_local_roots; \
-  caml_local_roots = &caml__roots_block; \
-  caml__roots_block.nitems = (size); \
-  caml__roots_block.ntables = 1; \
-  caml__roots_block.tables[0] = (table);
-
-#define End_roots() caml_local_roots = caml__roots_block.next; }
-
-
-/* [caml_register_global_root] registers a global C variable as a memory root
-   for the duration of the program, or until [caml_remove_global_root] is
-   called. */
-
-CAMLextern void caml_register_global_root (value *);
-
-/* [caml_remove_global_root] removes a memory root registered on a global C
-   variable with [caml_register_global_root]. */
-
-CAMLextern void caml_remove_global_root (value *);
-
-/* [caml_register_generational_global_root] registers a global C
-   variable as a memory root for the duration of the program, or until
-   [caml_remove_generational_global_root] is called.
-   The program guarantees that the value contained in this variable
-   will not be assigned directly.  If the program needs to change
-   the value of this variable, it must do so by calling
-   [caml_modify_generational_global_root].  The [value *] pointer
-   passed to [caml_register_generational_global_root] must contain
-   a valid OCaml value before the call.
-   In return for these constraints, scanning of memory roots during
-   minor collection is made more efficient. */
-
-CAMLextern void caml_register_generational_global_root (value *);
-
-/* [caml_remove_generational_global_root] removes a memory root
-   registered on a global C variable with
-   [caml_register_generational_global_root]. */
-
-CAMLextern void caml_remove_generational_global_root (value *);
-
-/* [caml_modify_generational_global_root(r, newval)]
-   modifies the value contained in [r], storing [newval] inside.
-   In other words, the assignment [*r = newval] is performed,
-   but in a way that is compatible with the optimized scanning of
-   generational global roots.  [r] must be a global memory root
-   previously registered with [caml_register_generational_global_root]. */
-
-CAMLextern void caml_modify_generational_global_root(value *r, value newval);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* CAML_MEMORY_H */
diff --git a/byterun/meta.c b/byterun/meta.c
index e5c6f94..edec407 100644
--- a/byterun/meta.c
+++ b/byterun/meta.c
@@ -14,19 +14,19 @@
 /* Primitives for the toplevel */
 
 #include <string.h>
-#include "alloc.h"
-#include "config.h"
-#include "fail.h"
-#include "fix_code.h"
-#include "interp.h"
-#include "intext.h"
-#include "major_gc.h"
-#include "memory.h"
-#include "minor_gc.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "prims.h"
-#include "stacks.h"
+#include "caml/alloc.h"
+#include "caml/config.h"
+#include "caml/fail.h"
+#include "caml/fix_code.h"
+#include "caml/interp.h"
+#include "caml/intext.h"
+#include "caml/major_gc.h"
+#include "caml/memory.h"
+#include "caml/minor_gc.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/prims.h"
+#include "caml/stacks.h"
 
 #ifndef NATIVE_CODE
 
diff --git a/byterun/minor_gc.c b/byterun/minor_gc.c
index 3e0dd4e..c419eb6 100644
--- a/byterun/minor_gc.c
+++ b/byterun/minor_gc.c
@@ -12,19 +12,19 @@
 /***********************************************************************/
 
 #include <string.h>
-#include "config.h"
-#include "fail.h"
-#include "finalise.h"
-#include "gc.h"
-#include "gc_ctrl.h"
-#include "major_gc.h"
-#include "memory.h"
-#include "minor_gc.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "roots.h"
-#include "signals.h"
-#include "weak.h"
+#include "caml/config.h"
+#include "caml/fail.h"
+#include "caml/finalise.h"
+#include "caml/gc.h"
+#include "caml/gc_ctrl.h"
+#include "caml/major_gc.h"
+#include "caml/memory.h"
+#include "caml/minor_gc.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/roots.h"
+#include "caml/signals.h"
+#include "caml/weak.h"
 
 asize_t caml_minor_heap_size;
 static void *caml_young_base = NULL;
diff --git a/byterun/minor_gc.h b/byterun/minor_gc.h
deleted file mode 100644
index 0258f4f..0000000
--- a/byterun/minor_gc.h
+++ /dev/null
@@ -1,56 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*             Damien Doligez, projet Para, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_MINOR_GC_H
-#define CAML_MINOR_GC_H
-
-
-#include "misc.h"
-
-CAMLextern char *caml_young_start, *caml_young_ptr;
-CAMLextern char *caml_young_end, *caml_young_limit;
-extern asize_t caml_minor_heap_size;
-extern int caml_in_minor_collection;
-
-struct caml_ref_table {
-  value **base;
-  value **end;
-  value **threshold;
-  value **ptr;
-  value **limit;
-  asize_t size;
-  asize_t reserve;
-};
-CAMLextern struct caml_ref_table caml_ref_table, caml_weak_ref_table;
-
-#define Is_young(val) \
-  (Assert (Is_block (val)), \
-   (addr)(val) < (addr)caml_young_end && (addr)(val) > (addr)caml_young_start)
-
-extern void caml_set_minor_heap_size (asize_t);
-extern void caml_empty_minor_heap (void);
-CAMLextern void caml_minor_collection (void);
-CAMLextern void garbage_collection (void); /* def in asmrun/signals.c */
-extern void caml_realloc_ref_table (struct caml_ref_table *);
-extern void caml_alloc_table (struct caml_ref_table *, asize_t, asize_t);
-extern void caml_oldify_one (value, value *);
-extern void caml_oldify_mopup (void);
-
-#define Oldify(p) do{ \
-    value __oldify__v__ = *p; \
-    if (Is_block (__oldify__v__) && Is_young (__oldify__v__)){ \
-      caml_oldify_one (__oldify__v__, (p)); \
-    } \
-  }while(0)
-
-#endif /* CAML_MINOR_GC_H */
diff --git a/byterun/misc.c b/byterun/misc.c
index 6eeae0f..e83d91a 100644
--- a/byterun/misc.c
+++ b/byterun/misc.c
@@ -12,9 +12,9 @@
 /***********************************************************************/
 
 #include <stdio.h>
-#include "config.h"
-#include "misc.h"
-#include "memory.h"
+#include "caml/config.h"
+#include "caml/misc.h"
+#include "caml/memory.h"
 
 #ifdef DEBUG
 
diff --git a/byterun/misc.h b/byterun/misc.h
deleted file mode 100644
index 2529bc6..0000000
--- a/byterun/misc.h
+++ /dev/null
@@ -1,135 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Miscellaneous macros and variables. */
-
-#ifndef CAML_MISC_H
-#define CAML_MISC_H
-
-#ifndef CAML_NAME_SPACE
-#include "compatibility.h"
-#endif
-#include "config.h"
-
-/* Standard definitions */
-
-#include <stddef.h>
-#include <stdlib.h>
-
-/* Basic types and constants */
-
-typedef size_t asize_t;
-
-#ifndef NULL
-#define NULL 0
-#endif
-
-/* <private> */
-typedef char * addr;
-/* </private> */
-
-#ifdef __GNUC__
-  /* Works only in GCC 2.5 and later */
-  #define Noreturn __attribute__ ((noreturn))
-#else
-  #define Noreturn
-#endif
-
-/* Export control (to mark primitives and to handle Windows DLL) */
-
-#define CAMLexport
-#define CAMLprim
-#define CAMLextern extern
-
-/* Assertions */
-
-/* <private> */
-
-#ifdef DEBUG
-#define CAMLassert(x) \
-  ((x) ? (void) 0 : caml_failed_assert ( #x , __FILE__, __LINE__))
-CAMLextern int caml_failed_assert (char *, char *, int);
-#else
-#define CAMLassert(x) ((void) 0)
-#endif
-
-CAMLextern void caml_fatal_error (char *msg) Noreturn;
-CAMLextern void caml_fatal_error_arg (char *fmt, char *arg) Noreturn;
-CAMLextern void caml_fatal_error_arg2 (char *fmt1, char *arg1,
-                                       char *fmt2, char *arg2) Noreturn;
-
-/* Data structures */
-
-struct ext_table {
-  int size;
-  int capacity;
-  void ** contents;
-};
-
-extern void caml_ext_table_init(struct ext_table * tbl, int init_capa);
-extern int caml_ext_table_add(struct ext_table * tbl, void * data);
-extern void caml_ext_table_free(struct ext_table * tbl, int free_entries);
-
-/* GC flags and messages */
-
-extern uintnat caml_verb_gc;
-void caml_gc_message (int, char *, uintnat);
-
-/* Memory routines */
-
-char *caml_aligned_malloc (asize_t, int, void **);
-
-#ifdef DEBUG
-#ifdef ARCH_SIXTYFOUR
-#define Debug_tag(x) (0xD700D7D7D700D6D7ul \
-                      | ((uintnat) (x) << 16) \
-                      | ((uintnat) (x) << 48))
-#else
-#define Debug_tag(x) (0xD700D6D7ul | ((uintnat) (x) << 16))
-#endif /* ARCH_SIXTYFOUR */
-
-/*
-  00 -> free words in minor heap
-  01 -> fields of free list blocks in major heap
-  03 -> heap chunks deallocated by heap shrinking
-  04 -> fields deallocated by [caml_obj_truncate]
-  10 -> uninitialised fields of minor objects
-  11 -> uninitialised fields of major objects
-  15 -> uninitialised words of [caml_aligned_malloc] blocks
-  85 -> filler bytes of [caml_aligned_malloc]
-
-  special case (byte by byte):
-  D7 -> uninitialised words of [caml_stat_alloc] blocks
-*/
-#define Debug_free_minor     Debug_tag (0x00)
-#define Debug_free_major     Debug_tag (0x01)
-#define Debug_free_shrink    Debug_tag (0x03)
-#define Debug_free_truncate  Debug_tag (0x04)
-#define Debug_uninit_minor   Debug_tag (0x10)
-#define Debug_uninit_major   Debug_tag (0x11)
-#define Debug_uninit_align   Debug_tag (0x15)
-#define Debug_filler_align   Debug_tag (0x85)
-
-#define Debug_uninit_stat    0xD7
-
-extern void caml_set_fields (char *, unsigned long, unsigned long);
-#endif /* DEBUG */
-
-
-#ifndef CAML_AVOID_CONFLICTS
-#define Assert CAMLassert
-#endif
-
-/* </private> */
-
-#endif /* CAML_MISC_H */
diff --git a/byterun/mlvalues.h b/byterun/mlvalues.h
deleted file mode 100644
index cbb1c7b..0000000
--- a/byterun/mlvalues.h
+++ /dev/null
@@ -1,304 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_MLVALUES_H
-#define CAML_MLVALUES_H
-
-#ifndef CAML_NAME_SPACE
-#include "compatibility.h"
-#endif
-#include "config.h"
-#include "misc.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/* Definitions
-
-  word: Four bytes on 32 and 16 bit architectures,
-        eight bytes on 64 bit architectures.
-  long: A C integer having the same number of bytes as a word.
-  val: The ML representation of something.  A long or a block or a pointer
-       outside the heap.  If it is a block, it is the (encoded) address
-       of an object.  If it is a long, it is encoded as well.
-  block: Something allocated.  It always has a header and some
-          fields or some number of bytes (a multiple of the word size).
-  field: A word-sized val which is part of a block.
-  bp: Pointer to the first byte of a block.  (a char *)
-  op: Pointer to the first field of a block.  (a value *)
-  hp: Pointer to the header of a block.  (a char *)
-  int32: Four bytes on all architectures.
-  int64: Eight bytes on all architectures.
-
-  Remark: A block size is always a multiple of the word size, and at least
-          one word plus the header.
-
-  bosize: Size (in bytes) of the "bytes" part.
-  wosize: Size (in words) of the "fields" part.
-  bhsize: Size (in bytes) of the block with its header.
-  whsize: Size (in words) of the block with its header.
-
-  hd: A header.
-  tag: The value of the tag field of the header.
-  color: The value of the color field of the header.
-         This is for use only by the GC.
-*/
-
-typedef intnat value;
-typedef uintnat header_t;
-typedef uintnat mlsize_t;
-typedef unsigned int tag_t;             /* Actually, an unsigned char */
-typedef uintnat color_t;
-typedef uintnat mark_t;
-
-/* Longs vs blocks. */
-#define Is_long(x)   (((x) & 1) != 0)
-#define Is_block(x)  (((x) & 1) == 0)
-
-/* Conversion macro names are always of the form  "to_from". */
-/* Example: Val_long as in "Val from long" or "Val of long". */
-#define Val_long(x)     (((intnat)(x) << 1) + 1)
-#define Long_val(x)     ((x) >> 1)
-#define Max_long (((intnat)1 << (8 * sizeof(value) - 2)) - 1)
-#define Min_long (-((intnat)1 << (8 * sizeof(value) - 2)))
-#define Val_int(x) Val_long(x)
-#define Int_val(x) ((int) Long_val(x))
-#define Unsigned_long_val(x) ((uintnat)(x) >> 1)
-#define Unsigned_int_val(x)  ((int) Unsigned_long_val(x))
-
-/* Structure of the header:
-
-For 16-bit and 32-bit architectures:
-     +--------+-------+-----+
-     | wosize | color | tag |
-     +--------+-------+-----+
-bits  31    10 9     8 7   0
-
-For 64-bit architectures:
-
-     +--------+-------+-----+
-     | wosize | color | tag |
-     +--------+-------+-----+
-bits  63    10 9     8 7   0
-
-*/
-
-#define Tag_hd(hd) ((tag_t) ((hd) & 0xFF))
-#define Wosize_hd(hd) ((mlsize_t) ((hd) >> 10))
-
-#define Hd_val(val) (((header_t *) (val)) [-1])        /* Also an l-value. */
-#define Hd_op(op) (Hd_val (op))                        /* Also an l-value. */
-#define Hd_bp(bp) (Hd_val (bp))                        /* Also an l-value. */
-#define Hd_hp(hp) (* ((header_t *) (hp)))              /* Also an l-value. */
-#define Hp_val(val) ((char *) (((header_t *) (val)) - 1))
-#define Hp_op(op) (Hp_val (op))
-#define Hp_bp(bp) (Hp_val (bp))
-#define Val_op(op) ((value) (op))
-#define Val_hp(hp) ((value) (((header_t *) (hp)) + 1))
-#define Op_hp(hp) ((value *) Val_hp (hp))
-#define Bp_hp(hp) ((char *) Val_hp (hp))
-
-#define Num_tags (1 << 8)
-#ifdef ARCH_SIXTYFOUR
-#define Max_wosize (((intnat)1 << 54) - 1)
-#else
-#define Max_wosize ((1 << 22) - 1)
-#endif
-
-#define Wosize_val(val) (Wosize_hd (Hd_val (val)))
-#define Wosize_op(op) (Wosize_val (op))
-#define Wosize_bp(bp) (Wosize_val (bp))
-#define Wosize_hp(hp) (Wosize_hd (Hd_hp (hp)))
-#define Whsize_wosize(sz) ((sz) + 1)
-#define Wosize_whsize(sz) ((sz) - 1)
-#define Wosize_bhsize(sz) ((sz) / sizeof (value) - 1)
-#define Bsize_wsize(sz) ((sz) * sizeof (value))
-#define Wsize_bsize(sz) ((sz) / sizeof (value))
-#define Bhsize_wosize(sz) (Bsize_wsize (Whsize_wosize (sz)))
-#define Bhsize_bosize(sz) ((sz) + sizeof (header_t))
-#define Bosize_val(val) (Bsize_wsize (Wosize_val (val)))
-#define Bosize_op(op) (Bosize_val (Val_op (op)))
-#define Bosize_bp(bp) (Bosize_val (Val_bp (bp)))
-#define Bosize_hd(hd) (Bsize_wsize (Wosize_hd (hd)))
-#define Whsize_hp(hp) (Whsize_wosize (Wosize_hp (hp)))
-#define Whsize_val(val) (Whsize_hp (Hp_val (val)))
-#define Whsize_bp(bp) (Whsize_val (Val_bp (bp)))
-#define Whsize_hd(hd) (Whsize_wosize (Wosize_hd (hd)))
-#define Bhsize_hp(hp) (Bsize_wsize (Whsize_hp (hp)))
-#define Bhsize_hd(hd) (Bsize_wsize (Whsize_hd (hd)))
-
-#ifdef ARCH_BIG_ENDIAN
-#define Tag_val(val) (((unsigned char *) (val)) [-1])
-                                                 /* Also an l-value. */
-#define Tag_hp(hp) (((unsigned char *) (hp)) [sizeof(value)-1])
-                                                 /* Also an l-value. */
-#else
-#define Tag_val(val) (((unsigned char *) (val)) [-sizeof(value)])
-                                                 /* Also an l-value. */
-#define Tag_hp(hp) (((unsigned char *) (hp)) [0])
-                                                 /* Also an l-value. */
-#endif
-
-/* The lowest tag for blocks containing no value. */
-#define No_scan_tag 251
-
-
-/* 1- If tag < No_scan_tag : a tuple of fields.  */
-
-/* Pointer to the first field. */
-#define Op_val(x) ((value *) (x))
-/* Fields are numbered from 0. */
-#define Field(x, i) (((value *)(x)) [i])           /* Also an l-value. */
-
-typedef int32 opcode_t;
-typedef opcode_t * code_t;
-
-/* NOTE: [Forward_tag] and [Infix_tag] must be just under
-   [No_scan_tag], with [Infix_tag] the lower one.
-   See [caml_oldify_one] in minor_gc.c for more details.
-
-   NOTE: Update stdlib/obj.ml whenever you change the tags.
- */
-
-/* Forward_tag: forwarding pointer that the GC may silently shortcut.
-   See stdlib/lazy.ml. */
-#define Forward_tag 250
-#define Forward_val(v) Field(v, 0)
-
-/* If tag == Infix_tag : an infix header inside a closure */
-/* Infix_tag must be odd so that the infix header is scanned as an integer */
-/* Infix_tag must be 1 modulo 4 and infix headers can only occur in blocks
-   with tag Closure_tag (see compact.c). */
-
-#define Infix_tag 249
-#define Infix_offset_hd(hd) (Bosize_hd(hd))
-#define Infix_offset_val(v) Infix_offset_hd(Hd_val(v))
-
-/* Another special case: objects */
-#define Object_tag 248
-#define Class_val(val) Field((val), 0)
-#define Oid_val(val) Long_val(Field((val), 1))
-CAMLextern value caml_get_public_method (value obj, value tag);
-/* Called as:
-   caml_callback(caml_get_public_method(obj, caml_hash_variant(name)), obj) */
-/* caml_get_public_method returns 0 if tag not in the table.
-   Note however that tags being hashed, same tag does not necessarily mean
-   same method name. */
-
-/* Special case of tuples of fields: closures */
-#define Closure_tag 247
-#define Code_val(val) (((code_t *) (val)) [0])     /* Also an l-value. */
-
-/* This tag is used (with Forward_tag) to implement lazy values.
-   See major_gc.c and stdlib/lazy.ml. */
-#define Lazy_tag 246
-
-/* Another special case: variants */
-CAMLextern value caml_hash_variant(char const * tag);
-
-/* 2- If tag >= No_scan_tag : a sequence of bytes. */
-
-/* Pointer to the first byte */
-#define Bp_val(v) ((char *) (v))
-#define Val_bp(p) ((value) (p))
-/* Bytes are numbered from 0. */
-#define Byte(x, i) (((char *) (x)) [i])            /* Also an l-value. */
-#define Byte_u(x, i) (((unsigned char *) (x)) [i]) /* Also an l-value. */
-
-/* Abstract things.  Their contents is not traced by the GC; therefore they
-   must not contain any [value].
-*/
-#define Abstract_tag 251
-
-/* Strings. */
-#define String_tag 252
-#define String_val(x) ((char *) Bp_val(x))
-CAMLextern mlsize_t caml_string_length (value);   /* size in bytes */
-
-/* Floating-point numbers. */
-#define Double_tag 253
-#define Double_wosize ((sizeof(double) / sizeof(value)))
-#ifndef ARCH_ALIGN_DOUBLE
-#define Double_val(v) (* (double *)(v))
-#define Store_double_val(v,d) (* (double *)(v) = (d))
-#else
-CAMLextern double caml_Double_val (value);
-CAMLextern void caml_Store_double_val (value,double);
-#define Double_val(v) caml_Double_val(v)
-#define Store_double_val(v,d) caml_Store_double_val(v,d)
-#endif
-
-/* Arrays of floating-point numbers. */
-#define Double_array_tag 254
-#define Double_field(v,i) Double_val((value)((double *)(v) + (i)))
-#define Store_double_field(v,i,d) do{ \
-  mlsize_t caml__temp_i = (i); \
-  double caml__temp_d = (d); \
-  Store_double_val((value)((double *) (v) + caml__temp_i), caml__temp_d); \
-}while(0)
-CAMLextern mlsize_t caml_array_length (value);   /* size in items */
-CAMLextern int caml_is_double_array (value);   /* 0 is false, 1 is true */
-
-
-/* Custom blocks.  They contain a pointer to a "method suite"
-   of functions (for finalization, comparison, hashing, etc)
-   followed by raw data.  The contents of custom blocks is not traced by
-   the GC; therefore, they must not contain any [value].
-   See [custom.h] for operations on method suites. */
-#define Custom_tag 255
-#define Data_custom_val(v) ((void *) &Field((v), 1))
-struct custom_operations;       /* defined in [custom.h] */
-
-/* Int32.t, Int64.t and Nativeint.t are represented as custom blocks. */
-
-#define Int32_val(v) (*((int32 *) Data_custom_val(v)))
-#define Nativeint_val(v) (*((intnat *) Data_custom_val(v)))
-#ifndef ARCH_ALIGN_INT64
-#define Int64_val(v) (*((int64 *) Data_custom_val(v)))
-#else
-CAMLextern int64 caml_Int64_val(value v);
-#define Int64_val(v) caml_Int64_val(v)
-#endif
-
-/* 3- Atoms are 0-tuples.  They are statically allocated once and for all. */
-
-CAMLextern header_t caml_atom_table[];
-#define Atom(tag) (Val_hp (&(caml_atom_table [(tag)])))
-
-/* Booleans are integers 0 or 1 */
-
-#define Val_bool(x) Val_int((x) != 0)
-#define Bool_val(x) Int_val(x)
-#define Val_false Val_int(0)
-#define Val_true Val_int(1)
-#define Val_not(x) (Val_false + Val_true - (x))
-
-/* The unit value is 0 (tagged) */
-
-#define Val_unit Val_int(0)
-
-/* List constructors */
-#define Val_emptylist Val_int(0)
-#define Tag_cons 0
-
-/* The table of global identifiers */
-
-extern value caml_global_data;
-
-#ifdef __cplusplus
-}
-#endif
-
-
-#endif /* CAML_MLVALUES_H */
diff --git a/byterun/obj.c b/byterun/obj.c
index 8e00282..a908064 100644
--- a/byterun/obj.c
+++ b/byterun/obj.c
@@ -14,16 +14,16 @@
 /* Operations on objects */
 
 #include <string.h>
-#include "alloc.h"
-#include "fail.h"
-#include "gc.h"
-#include "interp.h"
-#include "major_gc.h"
-#include "memory.h"
-#include "minor_gc.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "prims.h"
+#include "caml/alloc.h"
+#include "caml/fail.h"
+#include "caml/gc.h"
+#include "caml/interp.h"
+#include "caml/major_gc.h"
+#include "caml/memory.h"
+#include "caml/minor_gc.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/prims.h"
 
 CAMLprim value caml_static_alloc(value size)
 {
diff --git a/byterun/osdeps.h b/byterun/osdeps.h
deleted file mode 100644
index 8123d49..0000000
--- a/byterun/osdeps.h
+++ /dev/null
@@ -1,69 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*           Xavier Leroy, projet Cristal, INRIA Rocquencourt          */
-/*                                                                     */
-/*  Copyright 2001 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Operating system - specific stuff */
-
-#ifndef CAML_OSDEPS_H
-#define CAML_OSDEPS_H
-
-#include "misc.h"
-
-/* Decompose the given path into a list of directories, and add them
-   to the given table.  Return the block to be freed later. */
-extern char * caml_decompose_path(struct ext_table * tbl, char * path);
-
-/* Search the given file in the given list of directories.
-   If not found, return a copy of [name].  Result is allocated with
-   [caml_stat_alloc]. */
-extern char * caml_search_in_path(struct ext_table * path, char * name);
-
-/* Same, but search an executable name in the system path for executables. */
-CAMLextern char * caml_search_exe_in_path(char * name);
-
-/* Same, but search a shared library in the given path. */
-extern char * caml_search_dll_in_path(struct ext_table * path, char * name);
-
-/* Open a shared library and return a handle on it.
-   If [for_execution] is true, perform full symbol resolution and
-   execute initialization code so that functions from the shared library
-   can be called.  If [for_execution] is false, functions from this
-   shared library will not be called, but just checked for presence,
-   so symbol resolution can be skipped.
-   If [global] is true, symbols from the shared library can be used
-   to resolve for other libraries to be opened later on.
-   Return [NULL] on error. */
-extern void * caml_dlopen(char * libname, int for_execution, int global);
-
-/* Close a shared library handle */
-extern void caml_dlclose(void * handle);
-
-/* Look up the given symbol in the given shared library.
-   Return [NULL] if not found, or symbol value if found. */
-extern void * caml_dlsym(void * handle, char * name);
-
-extern void * caml_globalsym(char * name);
-
-/* Return an error message describing the most recent dynlink failure. */
-extern char * caml_dlerror(void);
-
-/* Add to [contents] the (short) names of the files contained in
-   the directory named [dirname].  No entries are added for [.] and [..].
-   Return 0 on success, -1 on error; set errno in the case of error. */
-extern int caml_read_directory(char * dirname, struct ext_table * contents);
-
-#ifdef __linux__
-/* Recover executable name from /proc/self/exe if possible */
-extern int caml_executable_name(char * name, int name_len);
-#endif
-
-#endif /* CAML_OSDEPS_H */
diff --git a/byterun/parsing.c b/byterun/parsing.c
index 3c1ced7..dff0b11 100644
--- a/byterun/parsing.c
+++ b/byterun/parsing.c
@@ -15,10 +15,10 @@
 
 #include <stdio.h>
 #include <string.h>
-#include "config.h"
-#include "mlvalues.h"
-#include "memory.h"
-#include "alloc.h"
+#include "caml/config.h"
+#include "caml/mlvalues.h"
+#include "caml/memory.h"
+#include "caml/alloc.h"
 
 #define ERRCODE 256
 
diff --git a/byterun/prims.h b/byterun/prims.h
deleted file mode 100644
index 7a99678..0000000
--- a/byterun/prims.h
+++ /dev/null
@@ -1,34 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Interface with C primitives. */
-
-#ifndef CAML_PRIMS_H
-#define CAML_PRIMS_H
-
-typedef value (*c_primitive)();
-
-extern c_primitive caml_builtin_cprim[];
-extern char * caml_names_of_builtin_cprim[];
-
-extern struct ext_table caml_prim_table;
-#ifdef DEBUG
-extern struct ext_table caml_prim_name_table;
-#endif
-
-#define Primitive(n) ((c_primitive)(caml_prim_table.contents[n]))
-
-extern char * caml_section_table;
-extern asize_t caml_section_table_size;
-
-#endif /* CAML_PRIMS_H */
diff --git a/byterun/printexc.c b/byterun/printexc.c
index 7e3259a..ac2a278 100644
--- a/byterun/printexc.c
+++ b/byterun/printexc.c
@@ -16,13 +16,13 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include "backtrace.h"
-#include "callback.h"
-#include "debugger.h"
-#include "fail.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "printexc.h"
+#include "caml/backtrace.h"
+#include "caml/callback.h"
+#include "caml/debugger.h"
+#include "caml/fail.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/printexc.h"
 
 struct stringbuf {
   char * ptr;
diff --git a/byterun/printexc.h b/byterun/printexc.h
deleted file mode 100644
index 748faa9..0000000
--- a/byterun/printexc.h
+++ /dev/null
@@ -1,33 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2001 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_PRINTEXC_H
-#define CAML_PRINTEXC_H
-
-
-#include "misc.h"
-#include "mlvalues.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-
-CAMLextern char * caml_format_exception (value);
-void caml_fatal_uncaught_exception (value) Noreturn;
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* CAML_PRINTEXC_H */
diff --git a/byterun/reverse.h b/byterun/reverse.h
deleted file mode 100644
index 09d34a5..0000000
--- a/byterun/reverse.h
+++ /dev/null
@@ -1,86 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Swap byte-order in 16, 32, and 64-bit integers or floats */
-
-#ifndef CAML_REVERSE_H
-#define CAML_REVERSE_H
-
-#define Reverse_16(dst,src) {                                               \
-  char * _p, * _q;                                                          \
-  char _a;                                                                  \
-  _p = (char *) (src);                                                      \
-  _q = (char *) (dst);                                                      \
-  _a = _p[0];                                                               \
-  _q[0] = _p[1];                                                            \
-  _q[1] = _a;                                                               \
-}
-
-#define Reverse_32(dst,src) {                                               \
-  char * _p, * _q;                                                          \
-  char _a, _b;                                                              \
-  _p = (char *) (src);                                                      \
-  _q = (char *) (dst);                                                      \
-  _a = _p[0];                                                               \
-  _b = _p[1];                                                               \
-  _q[0] = _p[3];                                                            \
-  _q[1] = _p[2];                                                            \
-  _q[3] = _a;                                                               \
-  _q[2] = _b;                                                               \
-}
-
-#define Reverse_64(dst,src) {                                               \
-  char * _p, * _q;                                                          \
-  char _a, _b;                                                              \
-  _p = (char *) (src);                                                      \
-  _q = (char *) (dst);                                                      \
-  _a = _p[0];                                                               \
-  _b = _p[1];                                                               \
-  _q[0] = _p[7];                                                            \
-  _q[1] = _p[6];                                                            \
-  _q[7] = _a;                                                               \
-  _q[6] = _b;                                                               \
-  _a = _p[2];                                                               \
-  _b = _p[3];                                                               \
-  _q[2] = _p[5];                                                            \
-  _q[3] = _p[4];                                                            \
-  _q[5] = _a;                                                               \
-  _q[4] = _b;                                                               \
-}
-
-#define Perm_index(perm,i) ((perm >> (i * 4)) & 0xF)
-
-#define Permute_64(dst,perm_dst,src,perm_src) {                             \
-  char * _p;                                                                \
-  char _a, _b, _c, _d, _e, _f, _g, _h;                                      \
-  _p = (char *) (src);                                                      \
-  _a = _p[Perm_index(perm_src, 0)];                                         \
-  _b = _p[Perm_index(perm_src, 1)];                                         \
-  _c = _p[Perm_index(perm_src, 2)];                                         \
-  _d = _p[Perm_index(perm_src, 3)];                                         \
-  _e = _p[Perm_index(perm_src, 4)];                                         \
-  _f = _p[Perm_index(perm_src, 5)];                                         \
-  _g = _p[Perm_index(perm_src, 6)];                                         \
-  _h = _p[Perm_index(perm_src, 7)];                                         \
-  _p = (char *) (dst);                                                      \
-  _p[Perm_index(perm_dst, 0)] = _a;                                         \
-  _p[Perm_index(perm_dst, 1)] = _b;                                         \
-  _p[Perm_index(perm_dst, 2)] = _c;                                         \
-  _p[Perm_index(perm_dst, 3)] = _d;                                         \
-  _p[Perm_index(perm_dst, 4)] = _e;                                         \
-  _p[Perm_index(perm_dst, 5)] = _f;                                         \
-  _p[Perm_index(perm_dst, 6)] = _g;                                         \
-  _p[Perm_index(perm_dst, 7)] = _h;                                         \
-}
-
-#endif /* CAML_REVERSE_H */
diff --git a/byterun/roots.c b/byterun/roots.c
index 43afbed..f812cd7 100644
--- a/byterun/roots.c
+++ b/byterun/roots.c
@@ -13,15 +13,15 @@
 
 /* To walk the memory roots for garbage collection */
 
-#include "finalise.h"
-#include "globroots.h"
-#include "major_gc.h"
-#include "memory.h"
-#include "minor_gc.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "roots.h"
-#include "stacks.h"
+#include "caml/finalise.h"
+#include "caml/globroots.h"
+#include "caml/major_gc.h"
+#include "caml/memory.h"
+#include "caml/minor_gc.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/roots.h"
+#include "caml/stacks.h"
 
 CAMLexport struct caml__roots_block *caml_local_roots = NULL;
 
diff --git a/byterun/roots.h b/byterun/roots.h
deleted file mode 100644
index ca6a5d2..0000000
--- a/byterun/roots.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_ROOTS_H
-#define CAML_ROOTS_H
-
-#include "misc.h"
-#include "memory.h"
-
-typedef void (*scanning_action) (value, value *);
-
-void caml_oldify_local_roots (void);
-void caml_darken_all_roots (void);
-void caml_do_roots (scanning_action);
-#ifndef NATIVE_CODE
-CAMLextern void caml_do_local_roots (scanning_action, value *, value *,
-                                     struct caml__roots_block *);
-#else
-CAMLextern void caml_do_local_roots(scanning_action f, char * bottom_of_stack,
-                                    uintnat last_retaddr, value * gc_regs,
-                                    struct caml__roots_block * local_roots);
-#endif
-
-CAMLextern void (*caml_scan_roots_hook) (scanning_action);
-
-#endif /* CAML_ROOTS_H */
diff --git a/byterun/signals.c b/byterun/signals.c
index e5fb64f..bc7f16f 100644
--- a/byterun/signals.c
+++ b/byterun/signals.c
@@ -14,17 +14,17 @@
 /* Signal handling, code common to the bytecode and native systems */
 
 #include <signal.h>
-#include "alloc.h"
-#include "callback.h"
-#include "config.h"
-#include "fail.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "roots.h"
-#include "signals.h"
-#include "signals_machdep.h"
-#include "sys.h"
+#include "caml/alloc.h"
+#include "caml/callback.h"
+#include "caml/config.h"
+#include "caml/fail.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/roots.h"
+#include "caml/signals.h"
+#include "caml/signals_machdep.h"
+#include "caml/sys.h"
 
 #ifndef NSIG
 #define NSIG 64
diff --git a/byterun/signals.h b/byterun/signals.h
deleted file mode 100644
index 5845166..0000000
--- a/byterun/signals.h
+++ /dev/null
@@ -1,57 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_SIGNALS_H
-#define CAML_SIGNALS_H
-
-#ifndef CAML_NAME_SPACE
-#include "compatibility.h"
-#endif
-#include "misc.h"
-#include "mlvalues.h"
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/* <private> */
-CAMLextern intnat volatile caml_signals_are_pending;
-CAMLextern intnat volatile caml_pending_signals[];
-CAMLextern int volatile caml_something_to_do;
-extern int volatile caml_force_major_slice;
-/* </private> */
-
-CAMLextern void caml_enter_blocking_section (void);
-CAMLextern void caml_leave_blocking_section (void);
-
-/* <private> */
-void caml_urge_major_slice (void);
-CAMLextern int caml_convert_signal_number (int);
-CAMLextern int caml_rev_convert_signal_number (int);
-void caml_execute_signal(int signal_number, int in_signal_handler);
-void caml_record_signal(int signal_number);
-void caml_process_pending_signals(void);
-void caml_process_event(void);
-int caml_set_signal_action(int signo, int action);
-
-CAMLextern void (*caml_enter_blocking_section_hook)(void);
-CAMLextern void (*caml_leave_blocking_section_hook)(void);
-CAMLextern int (*caml_try_leave_blocking_section_hook)(void);
-CAMLextern void (* volatile caml_async_action_hook)(void);
-/* </private> */
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif /* CAML_SIGNALS_H */
diff --git a/byterun/signals_byt.c b/byterun/signals_byt.c
index cd0c0eb..7f84424 100644
--- a/byterun/signals_byt.c
+++ b/byterun/signals_byt.c
@@ -14,11 +14,11 @@
 /* Signal handling, code specific to the bytecode interpreter */
 
 #include <signal.h>
-#include "config.h"
-#include "memory.h"
-#include "osdeps.h"
-#include "signals.h"
-#include "signals_machdep.h"
+#include "caml/config.h"
+#include "caml/memory.h"
+#include "caml/osdeps.h"
+#include "caml/signals.h"
+#include "caml/signals_machdep.h"
 
 #ifndef NSIG
 #define NSIG 64
diff --git a/byterun/signals_machdep.h b/byterun/signals_machdep.h
deleted file mode 100644
index 4987e2f..0000000
--- a/byterun/signals_machdep.h
+++ /dev/null
@@ -1,60 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*         Xavier Leroy and Damien Doligez, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Processor-specific operation: atomic "read and clear" */
-
-#ifndef CAML_SIGNALS_MACHDEP_H
-#define CAML_SIGNALS_MACHDEP_H
-
-#if defined(__GNUC__) && defined(__i386__)
-
-#define Read_and_clear(dst,src) \
-  asm("xorl %0, %0; xchgl %0, %1" \
-      : "=r" (dst), "=m" (src) \
-      : "m" (src))
-
-#elif defined(__GNUC__) && defined(__x86_64__)
-
-#define Read_and_clear(dst,src) \
-  asm("xorq %0, %0; xchgq %0, %1" \
-      : "=r" (dst), "=m" (src) \
-      : "m" (src))
-
-#elif defined(__GNUC__) && defined(__ppc__)
-
-#define Read_and_clear(dst,src) \
-  asm("0: lwarx %0, 0, %1\n\t" \
-      "stwcx. %2, 0, %1\n\t" \
-      "bne- 0b" \
-      : "=&r" (dst) \
-      : "r" (&(src)), "r" (0) \
-      : "cr0", "memory")
-
-#elif defined(__GNUC__) && defined(__ppc64__)
-
-#define Read_and_clear(dst,src) \
-  asm("0: ldarx %0, 0, %1\n\t" \
-      "stdcx. %2, 0, %1\n\t" \
-      "bne- 0b" \
-      : "=&r" (dst) \
-      : "r" (&(src)), "r" (0) \
-      : "cr0", "memory")
-
-#else
-
-/* Default, non-atomic implementation */
-#define Read_and_clear(dst,src) ((dst) = (src), (src) = 0)
-
-#endif
-
-#endif /* CAML_SIGNALS_MACHDEP_H */
diff --git a/byterun/stacks.c b/byterun/stacks.c
index bc2bdc4..94bff0b 100644
--- a/byterun/stacks.c
+++ b/byterun/stacks.c
@@ -14,11 +14,11 @@
 /* To initialize and resize the stacks */
 
 #include <string.h>
-#include "config.h"
-#include "fail.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "stacks.h"
+#include "caml/config.h"
+#include "caml/fail.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/stacks.h"
 
 CAMLexport value * caml_stack_low;
 CAMLexport value * caml_stack_high;
diff --git a/byterun/stacks.h b/byterun/stacks.h
deleted file mode 100644
index c596f25..0000000
--- a/byterun/stacks.h
+++ /dev/null
@@ -1,41 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* structure of the stacks */
-
-#ifndef CAML_STACKS_H
-#define CAML_STACKS_H
-
-
-#include "misc.h"
-#include "mlvalues.h"
-#include "memory.h"
-
-CAMLextern value * caml_stack_low;
-CAMLextern value * caml_stack_high;
-CAMLextern value * caml_stack_threshold;
-CAMLextern value * caml_extern_sp;
-CAMLextern value * caml_trapsp;
-CAMLextern value * caml_trap_barrier;
-
-#define Trap_pc(tp) (((code_t *)(tp))[0])
-#define Trap_link(tp) (((value **)(tp))[1])
-
-void caml_init_stack (uintnat init_max_size);
-void caml_realloc_stack (asize_t required_size);
-void caml_change_max_stack_size (uintnat new_max_size);
-uintnat caml_stack_usage (void);
-
-CAMLextern uintnat (*caml_stack_usage_hook)(void);
-
-#endif /* CAML_STACKS_H */
diff --git a/byterun/startup.c b/byterun/startup.c
index c3a8a18..44a442d 100644
--- a/byterun/startup.c
+++ b/byterun/startup.c
@@ -17,41 +17,41 @@
 #include <stdlib.h>
 #include <string.h>
 #include <fcntl.h>
-#include "config.h"
+#include "caml/config.h"
 #ifdef HAS_UNISTD
 #include <unistd.h>
 #endif
 #ifdef _WIN32
 #include <process.h>
 #endif
-#include "alloc.h"
-#include "backtrace.h"
-#include "callback.h"
-#include "custom.h"
-#include "debugger.h"
-#include "dynlink.h"
-#include "exec.h"
-#include "fail.h"
-#include "fix_code.h"
-#include "freelist.h"
-#include "gc_ctrl.h"
-#include "instrtrace.h"
-#include "interp.h"
-#include "intext.h"
-#include "io.h"
-#include "memory.h"
-#include "minor_gc.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "osdeps.h"
-#include "prims.h"
-#include "printexc.h"
-#include "reverse.h"
-#include "signals.h"
-#include "stacks.h"
-#include "sys.h"
-#include "startup.h"
-#include "version.h"
+#include "caml/alloc.h"
+#include "caml/backtrace.h"
+#include "caml/callback.h"
+#include "caml/custom.h"
+#include "caml/debugger.h"
+#include "caml/dynlink.h"
+#include "caml/exec.h"
+#include "caml/fail.h"
+#include "caml/fix_code.h"
+#include "caml/freelist.h"
+#include "caml/gc_ctrl.h"
+#include "caml/instrtrace.h"
+#include "caml/interp.h"
+#include "caml/intext.h"
+#include "caml/io.h"
+#include "caml/memory.h"
+#include "caml/minor_gc.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/osdeps.h"
+#include "caml/prims.h"
+#include "caml/printexc.h"
+#include "caml/reverse.h"
+#include "caml/signals.h"
+#include "caml/stacks.h"
+#include "caml/sys.h"
+#include "caml/startup.h"
+#include "caml/version.h"
 
 #ifndef O_BINARY
 #define O_BINARY 0
diff --git a/byterun/startup.h b/byterun/startup.h
deleted file mode 100644
index 3dda64b..0000000
--- a/byterun/startup.h
+++ /dev/null
@@ -1,38 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 2001 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_STARTUP_H
-#define CAML_STARTUP_H
-
-#include "mlvalues.h"
-#include "exec.h"
-
-CAMLextern void caml_main(char **argv);
-
-CAMLextern void caml_startup_code(
-           code_t code, asize_t code_size,
-           char *data, asize_t data_size,
-           char *section_table, asize_t section_table_size,
-           char **argv);
-
-enum { FILE_NOT_FOUND = -1, BAD_BYTECODE  = -2 };
-
-extern int caml_attempt_open(char **name, struct exec_trailer *trail,
-                             int do_open_script);
-extern void caml_read_section_descriptors(int fd, struct exec_trailer *trail);
-extern int32 caml_seek_optional_section(int fd, struct exec_trailer *trail,
-                                        char *name);
-extern int32 caml_seek_section(int fd, struct exec_trailer *trail, char *name);
-
-
-#endif /* CAML_STARTUP_H */
diff --git a/byterun/str.c b/byterun/str.c
index 9a96147..1a4958a 100644
--- a/byterun/str.c
+++ b/byterun/str.c
@@ -15,10 +15,10 @@
 
 #include <string.h>
 #include <ctype.h>
-#include "alloc.h"
-#include "fail.h"
-#include "mlvalues.h"
-#include "misc.h"
+#include "caml/alloc.h"
+#include "caml/fail.h"
+#include "caml/mlvalues.h"
+#include "caml/misc.h"
 #ifdef HAS_LOCALE
 #include <locale.h>
 #endif
@@ -98,9 +98,9 @@ CAMLprim value caml_string_get32(value str, value index)
 }
 
 #ifdef ARCH_INT64_TYPE
-#include "int64_native.h"
+#include "caml/int64_native.h"
 #else
-#include "int64_emul.h"
+#include "caml/int64_emul.h"
 #endif
 
 CAMLprim value caml_string_get64(value str, value index)
diff --git a/byterun/sys.c b/byterun/sys.c
index 332887b..10faee8 100644
--- a/byterun/sys.c
+++ b/byterun/sys.c
@@ -25,7 +25,7 @@
 #if !_WIN32
 #include <sys/wait.h>
 #endif
-#include "config.h"
+#include "caml/config.h"
 #ifdef HAS_UNISTD
 #include <unistd.h>
 #endif
@@ -39,15 +39,15 @@
 #ifdef HAS_GETTIMEOFDAY
 #include <sys/time.h>
 #endif
-#include "alloc.h"
-#include "debugger.h"
-#include "fail.h"
-#include "instruct.h"
-#include "mlvalues.h"
-#include "osdeps.h"
-#include "signals.h"
-#include "stacks.h"
-#include "sys.h"
+#include "caml/alloc.h"
+#include "caml/debugger.h"
+#include "caml/fail.h"
+#include "caml/instruct.h"
+#include "caml/mlvalues.h"
+#include "caml/osdeps.h"
+#include "caml/signals.h"
+#include "caml/stacks.h"
+#include "caml/sys.h"
 
 static char * error_message(void)
 {
diff --git a/byterun/sys.h b/byterun/sys.h
deleted file mode 100644
index 5eb18fc..0000000
--- a/byterun/sys.h
+++ /dev/null
@@ -1,28 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-#ifndef CAML_SYS_H
-#define CAML_SYS_H
-
-#include "misc.h"
-
-#define NO_ARG Val_int(0)
-
-CAMLextern void caml_sys_error (value);
-CAMLextern void caml_sys_io_error (value);
-extern void caml_sys_init (char * exe_name, char ** argv);
-CAMLextern value caml_sys_exit (value);
-
-extern char * caml_exe_name;
-
-#endif /* CAML_SYS_H */
diff --git a/byterun/terminfo.c b/byterun/terminfo.c
index 04086a3..1d0fdc4 100644
--- a/byterun/terminfo.c
+++ b/byterun/terminfo.c
@@ -13,11 +13,11 @@
 
 /* Read and output terminal commands */
 
-#include "config.h"
-#include "alloc.h"
-#include "fail.h"
-#include "io.h"
-#include "mlvalues.h"
+#include "caml/config.h"
+#include "caml/alloc.h"
+#include "caml/fail.h"
+#include "caml/io.h"
+#include "caml/mlvalues.h"
 
 #define Uninitialised (Val_int(0))
 #define Bad_term (Val_int(1))
diff --git a/byterun/ui.h b/byterun/ui.h
deleted file mode 100644
index 2958465..0000000
--- a/byterun/ui.h
+++ /dev/null
@@ -1,26 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Damien Doligez, projet Para, INRIA Rocquencourt          */
-/*                                                                     */
-/*  Copyright 1996 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Function declarations for non-Unix user interfaces */
-
-#ifndef CAML_UI_H
-#define CAML_UI_H
-
-#include "config.h"
-
-void ui_exit (int return_code);
-int ui_read (int file_desc, char *buf, unsigned int length);
-int ui_write (int file_desc, char *buf, unsigned int length);
-void ui_print_stderr (char *format, void *arg);
-
-#endif /* CAML_UI_H */
diff --git a/byterun/unix.c b/byterun/unix.c
index 95fecf5..c9e73b0 100644
--- a/byterun/unix.c
+++ b/byterun/unix.c
@@ -22,7 +22,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
-#include "config.h"
+#include "caml/config.h"
 #ifdef SUPPORT_DYNAMIC_LINKING
 #ifdef __CYGWIN32__
 #include "flexdll.h"
@@ -38,9 +38,9 @@
 #else
 #include <sys/dir.h>
 #endif
-#include "memory.h"
-#include "misc.h"
-#include "osdeps.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/osdeps.h"
 
 #ifndef S_ISREG
 #define S_ISREG(mode) (((mode) & S_IFMT) == S_IFREG)
diff --git a/byterun/weak.c b/byterun/weak.c
index 7569967..65da99d 100644
--- a/byterun/weak.c
+++ b/byterun/weak.c
@@ -15,11 +15,11 @@
 
 #include <string.h>
 
-#include "alloc.h"
-#include "fail.h"
-#include "major_gc.h"
-#include "memory.h"
-#include "mlvalues.h"
+#include "caml/alloc.h"
+#include "caml/fail.h"
+#include "caml/major_gc.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
 
 value caml_weak_list_head = 0;
 
diff --git a/byterun/weak.h b/byterun/weak.h
deleted file mode 100644
index 0cf4b8b..0000000
--- a/byterun/weak.h
+++ /dev/null
@@ -1,24 +0,0 @@
-/***********************************************************************/
-/*                                                                     */
-/*                                OCaml                                */
-/*                                                                     */
-/*            Damien Doligez, projet Para, INRIA Rocquencourt          */
-/*                                                                     */
-/*  Copyright 1997 Institut National de Recherche en Informatique et   */
-/*  en Automatique.  All rights reserved.  This file is distributed    */
-/*  under the terms of the GNU Library General Public License, with    */
-/*  the special exception on linking described in file ../LICENSE.     */
-/*                                                                     */
-/***********************************************************************/
-
-/* Operations on weak arrays */
-
-#ifndef CAML_WEAK_H
-#define CAML_WEAK_H
-
-#include "mlvalues.h"
-
-extern value caml_weak_list_head;
-extern value caml_weak_none;
-
-#endif /* CAML_WEAK_H */
diff --git a/byterun/win32.c b/byterun/win32.c
index 2b4aacc..75ab8d9 100644
--- a/byterun/win32.c
+++ b/byterun/win32.c
@@ -24,12 +24,12 @@
 #include <errno.h>
 #include <string.h>
 #include <signal.h>
-#include "fail.h"
-#include "memory.h"
-#include "misc.h"
-#include "osdeps.h"
-#include "signals.h"
-#include "sys.h"
+#include "caml/fail.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/osdeps.h"
+#include "caml/signals.h"
+#include "caml/sys.h"
 
 #include <flexdll.h>
 
diff --git a/debugger/.depend b/debugger/.depend
index e2643b7..60b0bae 100644
--- a/debugger/.depend
+++ b/debugger/.depend
@@ -48,9 +48,9 @@ command_line.cmo : unix_tools.cmi $(UNIXDIR)/unix.cmi \
     parser.cmi parameters.cmi ../utils/misc.cmi ../parsing/longident.cmi \
     ../parsing/location.cmi loadprinter.cmi lexer.cmi int64ops.cmi \
     ../bytecomp/instruct.cmi input_handling.cmi history.cmi frames.cmi \
-    events.cmi eval.cmi ../typing/envaux.cmi debugger_config.cmi debugcom.cmi \
-    ../typing/ctype.cmi ../utils/config.cmi checkpoints.cmi breakpoints.cmi \
-    command_line.cmi
+    events.cmi eval.cmi ../typing/envaux.cmi ../typing/env.cmi \
+    debugger_config.cmi debugcom.cmi ../typing/ctype.cmi ../utils/config.cmi \
+    checkpoints.cmi breakpoints.cmi command_line.cmi
 command_line.cmx : unix_tools.cmx $(UNIXDIR)/unix.cmx \
     ../typing/types.cmx time_travel.cmx symbols.cmx source.cmx \
     show_source.cmx show_information.cmx question.cmx program_management.cmx \
@@ -58,9 +58,9 @@ command_line.cmx : unix_tools.cmx $(UNIXDIR)/unix.cmx \
     parser.cmx parameters.cmx ../utils/misc.cmx ../parsing/longident.cmx \
     ../parsing/location.cmx loadprinter.cmx lexer.cmx int64ops.cmx \
     ../bytecomp/instruct.cmx input_handling.cmx history.cmx frames.cmx \
-    events.cmx eval.cmx ../typing/envaux.cmx debugger_config.cmx debugcom.cmx \
-    ../typing/ctype.cmx ../utils/config.cmx checkpoints.cmx breakpoints.cmx \
-    command_line.cmi
+    events.cmx eval.cmx ../typing/envaux.cmx ../typing/env.cmx \
+    debugger_config.cmx debugcom.cmx ../typing/ctype.cmx ../utils/config.cmx \
+    checkpoints.cmx breakpoints.cmx command_line.cmi
 debugcom.cmo : primitives.cmi ../utils/misc.cmi int64ops.cmi \
     input_handling.cmi debugcom.cmi
 debugcom.cmx : primitives.cmx ../utils/misc.cmx int64ops.cmx \
diff --git a/lex/.depend b/lex/.depend
index b0df0b8..455421e 100644
--- a/lex/.depend
+++ b/lex/.depend
@@ -22,10 +22,10 @@ main.cmo : syntax.cmi parser.cmi outputbis.cmi output.cmi lexgen.cmi \
     lexer.cmi cset.cmi compact.cmi common.cmi
 main.cmx : syntax.cmx parser.cmx outputbis.cmx output.cmx lexgen.cmx \
     lexer.cmx cset.cmx compact.cmx common.cmx
-output.cmo : syntax.cmi lexgen.cmi compact.cmi common.cmi output.cmi
-output.cmx : syntax.cmx lexgen.cmx compact.cmx common.cmx output.cmi
-outputbis.cmo : syntax.cmi lexgen.cmi common.cmi outputbis.cmi
-outputbis.cmx : syntax.cmx lexgen.cmx common.cmx outputbis.cmi
+output.cmo : lexgen.cmi compact.cmi common.cmi output.cmi
+output.cmx : lexgen.cmx compact.cmx common.cmx output.cmi
+outputbis.cmo : lexgen.cmi common.cmi outputbis.cmi
+outputbis.cmx : lexgen.cmx common.cmx outputbis.cmi
 parser.cmo : syntax.cmi cset.cmi parser.cmi
 parser.cmx : syntax.cmx cset.cmx parser.cmi
 syntax.cmo : cset.cmi syntax.cmi
diff --git a/myocamlbuild.ml b/myocamlbuild.ml
index f7ada7e..90ca8d7 100644
--- a/myocamlbuild.ml
+++ b/myocamlbuild.ml
@@ -518,16 +518,16 @@ flag ["c"; "compile"; "otherlibs"; "mingw"] (A"-O");;
 (* The numeric opcodes *)
 rule "The numeric opcodes"
   ~prod:"bytecomp/opcodes.ml"
-  ~dep:"byterun/instruct.h"
+  ~dep:"byterun/caml/instruct.h"
   ~insert:`top
         begin fun _ _ ->
-          Cmd(Sh "sed -n -e '/^enum/p' -e 's/,//g' -e '/^  /p' byterun/instruct.h | \
+          Cmd(Sh "sed -n -e '/^enum/p' -e 's/,//g' -e '/^  /p' byterun/caml/instruct.h | \
         awk -f ../tools/make-opcodes > bytecomp/opcodes.ml")
   end;;
 
 rule "tools/opnames.ml"
   ~prod:"tools/opnames.ml"
-  ~dep:"byterun/instruct.h"
+  ~dep:"byterun/caml/instruct.h"
   begin fun _ _ ->
     Cmd(Sh"unset LC_ALL || : ; \
         unset LC_CTYPE || : ; \
@@ -538,7 +538,7 @@ rule "tools/opnames.ml"
               -e 's/};$/ |]/' \
               -e 's/\\([A-Z][A-Z_0-9a-z]*\\)/\"\\1\"/g' \
               -e 's/,/;/g' \
-          byterun/instruct.h > tools/opnames.ml")
+          byterun/caml/instruct.h > tools/opnames.ml")
   end;;
 
 (* The version number *)
diff --git a/ocamldoc/.depend b/ocamldoc/.depend
index f8e0d35..61c131a 100644
--- a/ocamldoc/.depend
+++ b/ocamldoc/.depend
@@ -10,26 +10,26 @@ odoc_analyse.cmo : ../utils/warnings.cmi ../typing/typetexp.cmi \
     ../typing/types.cmi ../typing/typemod.cmi ../typing/typedtree.cmi \
     ../typing/typedecl.cmi ../typing/typecore.cmi ../typing/typeclass.cmi \
     ../bytecomp/translcore.cmi ../bytecomp/translclass.cmi \
-    ../parsing/syntaxerr.cmi ../parsing/parse.cmi odoc_types.cmi \
-    odoc_text.cmi odoc_sig.cmi odoc_module.cmo odoc_misc.cmi \
+    ../parsing/syntaxerr.cmi ../driver/pparse.cmi ../parsing/parse.cmi \
+    odoc_types.cmi odoc_text.cmi odoc_sig.cmi odoc_module.cmo odoc_misc.cmi \
     odoc_messages.cmo odoc_merge.cmi odoc_global.cmi odoc_dep.cmo \
     odoc_cross.cmi odoc_comments.cmi odoc_class.cmo odoc_ast.cmi \
     ../utils/misc.cmi ../parsing/location.cmi ../parsing/lexer.cmi \
     ../typing/includemod.cmi ../typing/env.cmi ../typing/ctype.cmi \
     ../utils/config.cmi ../typing/cmi_format.cmi ../utils/clflags.cmi \
-    ../utils/ccomp.cmi odoc_analyse.cmi
+    odoc_analyse.cmi
 odoc_analyse.cmx : ../utils/warnings.cmx ../typing/typetexp.cmx \
     ../typing/types.cmx ../typing/typemod.cmx ../typing/typedtree.cmx \
     ../typing/typedecl.cmx ../typing/typecore.cmx ../typing/typeclass.cmx \
     ../bytecomp/translcore.cmx ../bytecomp/translclass.cmx \
-    ../parsing/syntaxerr.cmx ../parsing/parse.cmx odoc_types.cmx \
-    odoc_text.cmx odoc_sig.cmx odoc_module.cmx odoc_misc.cmx \
+    ../parsing/syntaxerr.cmx ../driver/pparse.cmx ../parsing/parse.cmx \
+    odoc_types.cmx odoc_text.cmx odoc_sig.cmx odoc_module.cmx odoc_misc.cmx \
     odoc_messages.cmx odoc_merge.cmx odoc_global.cmx odoc_dep.cmx \
     odoc_cross.cmx odoc_comments.cmx odoc_class.cmx odoc_ast.cmx \
     ../utils/misc.cmx ../parsing/location.cmx ../parsing/lexer.cmx \
     ../typing/includemod.cmx ../typing/env.cmx ../typing/ctype.cmx \
     ../utils/config.cmx ../typing/cmi_format.cmx ../utils/clflags.cmx \
-    ../utils/ccomp.cmx odoc_analyse.cmi
+    odoc_analyse.cmi
 odoc_args.cmo : odoc_types.cmi odoc_texi.cmo odoc_messages.cmo odoc_man.cmo \
     odoc_latex.cmo odoc_html.cmo odoc_global.cmi odoc_gen.cmi odoc_dot.cmo \
     odoc_config.cmi ../utils/misc.cmi ../utils/config.cmi odoc_args.cmi
diff --git a/otherlibs/bigarray/.depend b/otherlibs/bigarray/.depend
index 889328a..cb3c54e 100644
--- a/otherlibs/bigarray/.depend
+++ b/otherlibs/bigarray/.depend
@@ -1,21 +1,26 @@
-bigarray_stubs.o: bigarray_stubs.c ../../byterun/alloc.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h bigarray.h \
-  ../../byterun/config.h ../../byterun/mlvalues.h ../../byterun/custom.h \
-  ../../byterun/fail.h ../../byterun/intext.h ../../byterun/io.h \
-  ../../byterun/hash.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h
-mmap_unix.o: mmap_unix.c bigarray.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/mlvalues.h ../../byterun/config.h ../../byterun/misc.h \
-  ../../byterun/custom.h ../../byterun/mlvalues.h ../../byterun/fail.h \
-  ../../byterun/io.h ../../byterun/sys.h ../../byterun/signals.h
-mmap_win32.o: mmap_win32.c bigarray.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/mlvalues.h ../../byterun/config.h ../../byterun/misc.h \
-  ../../byterun/alloc.h ../../byterun/mlvalues.h ../../byterun/custom.h \
-  ../../byterun/fail.h ../../byterun/sys.h ../unix/unixsupport.h
+bigarray_stubs.o: bigarray_stubs.c ../../byterun/caml/alloc.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/mlvalues.h bigarray.h ../../byterun/caml/config.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/custom.h \
+ ../../byterun/caml/fail.h ../../byterun/caml/intext.h \
+ ../../byterun/caml/io.h ../../byterun/caml/hash.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/int64_native.h
+mmap_unix.o: mmap_unix.c bigarray.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/config.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/custom.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/io.h ../../byterun/caml/sys.h \
+ ../../byterun/caml/signals.h
+mmap_win32.o: mmap_win32.c bigarray.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/config.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/custom.h \
+ ../../byterun/caml/fail.h ../../byterun/caml/sys.h ../unix/unixsupport.h
 bigarray.cmi :
 bigarray.cmo : bigarray.cmi
 bigarray.cmx : bigarray.cmi
diff --git a/otherlibs/bigarray/bigarray.h b/otherlibs/bigarray/bigarray.h
index 26fdcc9..7619525 100644
--- a/otherlibs/bigarray/bigarray.h
+++ b/otherlibs/bigarray/bigarray.h
@@ -15,10 +15,10 @@
 #define CAML_BIGARRAY_H
 
 #ifndef CAML_NAME_SPACE
-#include "compatibility.h"
+#include "caml/compatibility.h"
 #endif
-#include "config.h"
-#include "mlvalues.h"
+#include "caml/config.h"
+#include "caml/mlvalues.h"
 
 typedef signed char caml_ba_int8;
 typedef unsigned char caml_ba_uint8;
diff --git a/otherlibs/bigarray/bigarray_stubs.c b/otherlibs/bigarray/bigarray_stubs.c
index f30fa4c..075e806 100644
--- a/otherlibs/bigarray/bigarray_stubs.c
+++ b/otherlibs/bigarray/bigarray_stubs.c
@@ -14,14 +14,14 @@
 #include <stddef.h>
 #include <stdarg.h>
 #include <string.h>
-#include "alloc.h"
+#include "caml/alloc.h"
 #include "bigarray.h"
-#include "custom.h"
-#include "fail.h"
-#include "intext.h"
-#include "hash.h"
-#include "memory.h"
-#include "mlvalues.h"
+#include "caml/custom.h"
+#include "caml/fail.h"
+#include "caml/intext.h"
+#include "caml/hash.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
 
 #define int8 caml_ba_int8
 #define uint8 caml_ba_uint8
@@ -384,9 +384,9 @@ CAMLprim value caml_ba_uint8_get32(value vb, value vind)
 }
 
 #ifdef ARCH_INT64_TYPE
-#include "int64_native.h"
+#include "caml/int64_native.h"
 #else
-#include "int64_emul.h"
+#include "caml/int64_emul.h"
 #endif
 
 CAMLprim value caml_ba_uint8_get64(value vb, value vind)
diff --git a/otherlibs/bigarray/mmap_unix.c b/otherlibs/bigarray/mmap_unix.c
index 5ba8cbf..9a2512b 100644
--- a/otherlibs/bigarray/mmap_unix.c
+++ b/otherlibs/bigarray/mmap_unix.c
@@ -18,12 +18,12 @@
 #include <stddef.h>
 #include <string.h>
 #include "bigarray.h"
-#include "custom.h"
-#include "fail.h"
-#include "io.h"
-#include "mlvalues.h"
-#include "sys.h"
-#include "signals.h"
+#include "caml/custom.h"
+#include "caml/fail.h"
+#include "caml/io.h"
+#include "caml/mlvalues.h"
+#include "caml/sys.h"
+#include "caml/signals.h"
 
 extern int caml_ba_element_size[];  /* from bigarray_stubs.c */
 
diff --git a/otherlibs/bigarray/mmap_win32.c b/otherlibs/bigarray/mmap_win32.c
index 4eca668..9071fb4 100644
--- a/otherlibs/bigarray/mmap_win32.c
+++ b/otherlibs/bigarray/mmap_win32.c
@@ -15,11 +15,11 @@
 #include <stdio.h>
 #include <string.h>
 #include "bigarray.h"
-#include "alloc.h"
-#include "custom.h"
-#include "fail.h"
-#include "mlvalues.h"
-#include "sys.h"
+#include "caml/alloc.h"
+#include "caml/custom.h"
+#include "caml/fail.h"
+#include "caml/mlvalues.h"
+#include "caml/sys.h"
 #include "unixsupport.h"
 
 extern int caml_ba_element_size[];  /* from bigarray_stubs.c */
diff --git a/otherlibs/graph/.depend b/otherlibs/graph/.depend
index b4b531d..10f44a6 100644
--- a/otherlibs/graph/.depend
+++ b/otherlibs/graph/.depend
@@ -1,63 +1,68 @@
-color.o: color.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h
-draw.o: draw.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h
-dump_img.o: dump_img.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h image.h ../../byterun/alloc.h \
- ../../byterun/mlvalues.h ../../byterun/memory.h ../../byterun/gc.h \
- ../../byterun/major_gc.h ../../byterun/freelist.h \
- ../../byterun/minor_gc.h
-events.o: events.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
- ../../byterun/signals.h
-fill.o: fill.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h ../../byterun/memory.h ../../byterun/gc.h \
- ../../byterun/mlvalues.h ../../byterun/major_gc.h \
- ../../byterun/freelist.h ../../byterun/minor_gc.h
-image.o: image.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h image.h ../../byterun/alloc.h \
- ../../byterun/mlvalues.h ../../byterun/custom.h
-make_img.o: make_img.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h image.h ../../byterun/memory.h ../../byterun/gc.h \
- ../../byterun/mlvalues.h ../../byterun/major_gc.h \
- ../../byterun/freelist.h ../../byterun/minor_gc.h
-open.o: open.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
- ../../byterun/callback.h ../../byterun/fail.h ../../byterun/memory.h \
- ../../byterun/gc.h ../../byterun/major_gc.h ../../byterun/freelist.h \
- ../../byterun/minor_gc.h
-point_col.o: point_col.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h
-sound.o: sound.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h
-subwindow.o: subwindow.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h
-text.o: text.c libgraph.h ../../byterun/mlvalues.h \
- ../../byterun/compatibility.h ../../byterun/config.h \
- ../../byterun/../config/m.h ../../byterun/../config/s.h \
- ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h
+color.o: color.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h
+draw.o: draw.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h
+dump_img.o: dump_img.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h image.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/major_gc.h \
+ ../../byterun/caml/freelist.h ../../byterun/caml/minor_gc.h
+events.o: events.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/signals.h
+fill.o: fill.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h
+image.o: image.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h image.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/custom.h
+make_img.o: make_img.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h image.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h
+open.o: open.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/callback.h \
+ ../../byterun/caml/fail.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/major_gc.h \
+ ../../byterun/caml/freelist.h ../../byterun/caml/minor_gc.h
+point_col.o: point_col.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h
+sound.o: sound.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h
+subwindow.o: subwindow.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h
+text.o: text.c libgraph.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h
 graphics.cmi :
 graphicsX11.cmi :
 graphics.cmo : graphics.cmi
diff --git a/otherlibs/graph/draw.c b/otherlibs/graph/draw.c
index 3670111..93849ba 100644
--- a/otherlibs/graph/draw.c
+++ b/otherlibs/graph/draw.c
@@ -12,7 +12,7 @@
 /***********************************************************************/
 
 #include "libgraph.h"
-#include <alloc.h>
+#include <caml/alloc.h>
 
 value caml_gr_plot(value vx, value vy)
 {
diff --git a/otherlibs/graph/dump_img.c b/otherlibs/graph/dump_img.c
index bf562a7..d77e41d 100644
--- a/otherlibs/graph/dump_img.c
+++ b/otherlibs/graph/dump_img.c
@@ -13,8 +13,8 @@
 
 #include "libgraph.h"
 #include "image.h"
-#include <alloc.h>
-#include <memory.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
 
 value caml_gr_dump_image(value image)
 {
diff --git a/otherlibs/graph/events.c b/otherlibs/graph/events.c
index d2e94eb..36d549b 100644
--- a/otherlibs/graph/events.c
+++ b/otherlibs/graph/events.c
@@ -13,8 +13,8 @@
 
 #include <signal.h>
 #include "libgraph.h"
-#include <alloc.h>
-#include <signals.h>
+#include <caml/alloc.h>
+#include <caml/signals.h>
 #include <sys/types.h>
 #include <sys/time.h>
 #ifdef HAS_SYS_SELECT_H
diff --git a/otherlibs/graph/fill.c b/otherlibs/graph/fill.c
index 4eb9f34..7ccc64a 100644
--- a/otherlibs/graph/fill.c
+++ b/otherlibs/graph/fill.c
@@ -12,7 +12,7 @@
 /***********************************************************************/
 
 #include "libgraph.h"
-#include <memory.h>
+#include <caml/memory.h>
 
 value caml_gr_fill_rect(value vx, value vy, value vw, value vh)
 {
diff --git a/otherlibs/graph/image.c b/otherlibs/graph/image.c
index 40bce33..52774ab 100644
--- a/otherlibs/graph/image.c
+++ b/otherlibs/graph/image.c
@@ -13,8 +13,8 @@
 
 #include "libgraph.h"
 #include "image.h"
-#include <alloc.h>
-#include <custom.h>
+#include <caml/alloc.h>
+#include <caml/custom.h>
 
 static void caml_gr_free_image(value im)
 {
diff --git a/otherlibs/graph/libgraph.h b/otherlibs/graph/libgraph.h
index 5ad64c0..359048f 100644
--- a/otherlibs/graph/libgraph.h
+++ b/otherlibs/graph/libgraph.h
@@ -14,7 +14,7 @@
 #include <stdio.h>
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 
 struct canvas {
   int w, h;                     /* Dimensions of the drawable */
diff --git a/otherlibs/graph/make_img.c b/otherlibs/graph/make_img.c
index e65c7a0..eb2ec1e 100644
--- a/otherlibs/graph/make_img.c
+++ b/otherlibs/graph/make_img.c
@@ -13,7 +13,7 @@
 
 #include "libgraph.h"
 #include "image.h"
-#include <memory.h>
+#include <caml/memory.h>
 
 value caml_gr_make_image(value m)
 {
diff --git a/otherlibs/graph/open.c b/otherlibs/graph/open.c
index 9cb4ba5..05016e7 100644
--- a/otherlibs/graph/open.c
+++ b/otherlibs/graph/open.c
@@ -15,10 +15,10 @@
 #include <fcntl.h>
 #include <signal.h>
 #include "libgraph.h"
-#include <alloc.h>
-#include <callback.h>
-#include <fail.h>
-#include <memory.h>
+#include <caml/alloc.h>
+#include <caml/callback.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
 #ifdef HAS_UNISTD
 #include <unistd.h>
 #endif
diff --git a/otherlibs/graph/text.c b/otherlibs/graph/text.c
index d92d4ae..c324049 100644
--- a/otherlibs/graph/text.c
+++ b/otherlibs/graph/text.c
@@ -12,7 +12,7 @@
 /***********************************************************************/
 
 #include "libgraph.h"
-#include <alloc.h>
+#include <caml/alloc.h>
 
 XFontStruct * caml_gr_font = NULL;
 
diff --git a/otherlibs/labltk/browser/winmain.c b/otherlibs/labltk/browser/winmain.c
index 4dd0644..ea08a0e 100644
--- a/otherlibs/labltk/browser/winmain.c
+++ b/otherlibs/labltk/browser/winmain.c
@@ -15,9 +15,9 @@
 /* $Id$ */
 
 #include <windows.h>
-#include <mlvalues.h>
-#include <callback.h>
-#include <sys.h>
+#include <caml/mlvalues.h>
+#include <caml/callback.h>
+#include <caml/sys.h>
 
 /*CAMLextern int __argc; */
 /* CAMLextern char **__argv; */
diff --git a/otherlibs/labltk/support/cltkCaml.c b/otherlibs/labltk/support/cltkCaml.c
index 9a3d38a..a371526 100644
--- a/otherlibs/labltk/support/cltkCaml.c
+++ b/otherlibs/labltk/support/cltkCaml.c
@@ -18,10 +18,10 @@
 
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <alloc.h>
-#include <callback.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/callback.h>
+#include <caml/fail.h>
 #include "camltk.h"
 
 value * tkerror_exn = NULL;
diff --git a/otherlibs/labltk/support/cltkDMain.c b/otherlibs/labltk/support/cltkDMain.c
index 58374d8..f806d49 100644
--- a/otherlibs/labltk/support/cltkDMain.c
+++ b/otherlibs/labltk/support/cltkDMain.c
@@ -20,13 +20,13 @@
 #include <fcntl.h>
 #include <tcl.h>
 #include <tk.h>
-#include "gc.h"
-#include "exec.h"
-#include "sys.h"
-#include "fail.h"
-#include "io.h"
-#include "mlvalues.h"
-#include "memory.h"
+#include "caml/gc.h"
+#include "caml/exec.h"
+#include "caml/sys.h"
+#include "caml/fail.h"
+#include "caml/io.h"
+#include "caml/mlvalues.h"
+#include "caml/memory.h"
 #include "camltk.h"
 
 #ifndef O_BINARY
diff --git a/otherlibs/labltk/support/cltkEval.c b/otherlibs/labltk/support/cltkEval.c
index c7a4348..2db5065 100644
--- a/otherlibs/labltk/support/cltkEval.c
+++ b/otherlibs/labltk/support/cltkEval.c
@@ -21,9 +21,9 @@
 
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
 #ifdef HAS_UNISTD
 #include <unistd.h>
 #endif
diff --git a/otherlibs/labltk/support/cltkEvent.c b/otherlibs/labltk/support/cltkEvent.c
index 4507cf6..267aeac 100644
--- a/otherlibs/labltk/support/cltkEvent.c
+++ b/otherlibs/labltk/support/cltkEvent.c
@@ -18,8 +18,8 @@
 
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include "camltk.h"
 
 CAMLprim value camltk_tk_mainloop(void)
diff --git a/otherlibs/labltk/support/cltkFile.c b/otherlibs/labltk/support/cltkFile.c
index c01f395..42c2b7d 100644
--- a/otherlibs/labltk/support/cltkFile.c
+++ b/otherlibs/labltk/support/cltkFile.c
@@ -23,8 +23,8 @@
 #endif
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <callback.h>
+#include <caml/mlvalues.h>
+#include <caml/callback.h>
 #include "camltk.h"
 
 /*
diff --git a/otherlibs/labltk/support/cltkImg.c b/otherlibs/labltk/support/cltkImg.c
index 0a0fa17..398e282 100644
--- a/otherlibs/labltk/support/cltkImg.c
+++ b/otherlibs/labltk/support/cltkImg.c
@@ -16,9 +16,9 @@
 #include <string.h>
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/alloc.h>
 #include "camltk.h"
 
 /*
diff --git a/otherlibs/labltk/support/cltkMain.c b/otherlibs/labltk/support/cltkMain.c
index 871a47a..6274cd9 100644
--- a/otherlibs/labltk/support/cltkMain.c
+++ b/otherlibs/labltk/support/cltkMain.c
@@ -19,12 +19,12 @@
 #include <string.h>
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <alloc.h>
-#include <callback.h>
-#include <signals.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/alloc.h>
+#include <caml/callback.h>
+#include <caml/signals.h>
+#include <caml/fail.h>
 #ifdef HAS_UNISTD
 #include <unistd.h>  /* for R_OK */
 #endif
diff --git a/otherlibs/labltk/support/cltkMisc.c b/otherlibs/labltk/support/cltkMisc.c
index 52c5d48..7422792 100644
--- a/otherlibs/labltk/support/cltkMisc.c
+++ b/otherlibs/labltk/support/cltkMisc.c
@@ -19,8 +19,8 @@
 #include <string.h>
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
 #include "camltk.h"
 
 /* Parsing results */
diff --git a/otherlibs/labltk/support/cltkTimer.c b/otherlibs/labltk/support/cltkTimer.c
index afebef8..39fe471 100644
--- a/otherlibs/labltk/support/cltkTimer.c
+++ b/otherlibs/labltk/support/cltkTimer.c
@@ -18,8 +18,8 @@
 
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <callback.h>
+#include <caml/mlvalues.h>
+#include <caml/callback.h>
 #include "camltk.h"
 
 
diff --git a/otherlibs/labltk/support/cltkUtf.c b/otherlibs/labltk/support/cltkUtf.c
index 61dbfb2..e777718 100644
--- a/otherlibs/labltk/support/cltkUtf.c
+++ b/otherlibs/labltk/support/cltkUtf.c
@@ -21,9 +21,9 @@
 
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
 #ifdef HAS_UNISTD
 #include <unistd.h>
 #endif
diff --git a/otherlibs/labltk/support/cltkVar.c b/otherlibs/labltk/support/cltkVar.c
index e647d9d..093dc63 100644
--- a/otherlibs/labltk/support/cltkVar.c
+++ b/otherlibs/labltk/support/cltkVar.c
@@ -20,10 +20,10 @@
 #include <string.h>
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <alloc.h>
-#include <callback.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/alloc.h>
+#include <caml/callback.h>
 #include "camltk.h"
 
 CAMLprim value camltk_getvar(value var)
diff --git a/otherlibs/labltk/support/cltkWait.c b/otherlibs/labltk/support/cltkWait.c
index e13091f..b03e300 100644
--- a/otherlibs/labltk/support/cltkWait.c
+++ b/otherlibs/labltk/support/cltkWait.c
@@ -18,9 +18,9 @@
 
 #include <tcl.h>
 #include <tk.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <callback.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/callback.h>
 #include "camltk.h"
 
 /* The following are replacements for
diff --git a/otherlibs/num/.depend b/otherlibs/num/.depend
index 2013ac3..b800a37 100644
--- a/otherlibs/num/.depend
+++ b/otherlibs/num/.depend
@@ -1,20 +1,21 @@
-bng.o: bng.c bng.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/compatibility.h bng_amd64.c \
-  bng_digit.c
+bng.o: bng.c bng.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/compatibility.h bng_amd64.c bng_digit.c
 bng_amd64.o: bng_amd64.c
 bng_digit.o: bng_digit.c
 bng_ia32.o: bng_ia32.c
 bng_ppc.o: bng_ppc.c
 bng_sparc.o: bng_sparc.c
-nat_stubs.o: nat_stubs.c ../../byterun/alloc.h \
-  ../../byterun/compatibility.h ../../byterun/misc.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/config.h ../../byterun/custom.h ../../byterun/intext.h \
-  ../../byterun/io.h ../../byterun/fail.h ../../byterun/hash.h \
-  ../../byterun/memory.h ../../byterun/gc.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h \
-  ../../byterun/mlvalues.h bng.h nat.h
+nat_stubs.o: nat_stubs.c ../../byterun/caml/alloc.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/config.h ../../byterun/caml/custom.h \
+ ../../byterun/caml/intext.h ../../byterun/caml/io.h \
+ ../../byterun/caml/fail.h ../../byterun/caml/hash.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/mlvalues.h bng.h nat.h
 arith_flags.cmi :
 arith_status.cmi :
 big_int.cmi : nat.cmi
diff --git a/otherlibs/num/bng.c b/otherlibs/num/bng.c
index 5bbedb0..76f718a 100644
--- a/otherlibs/num/bng.c
+++ b/otherlibs/num/bng.c
@@ -14,7 +14,7 @@
 /* $Id$ */
 
 #include "bng.h"
-#include "config.h"
+#include "caml/config.h"
 
 #if defined(__GNUC__) && BNG_ASM_LEVEL > 0
 #if defined(BNG_ARCH_ia32)
diff --git a/otherlibs/num/bng.h b/otherlibs/num/bng.h
index 19f2e2b..527bee6 100644
--- a/otherlibs/num/bng.h
+++ b/otherlibs/num/bng.h
@@ -14,7 +14,7 @@
 /* $Id$ */
 
 #include <string.h>
-#include "config.h"
+#include "caml/config.h"
 
 typedef uintnat bngdigit;
 typedef bngdigit * bng;
diff --git a/otherlibs/num/nat_stubs.c b/otherlibs/num/nat_stubs.c
index 9a62759..ae109ac 100644
--- a/otherlibs/num/nat_stubs.c
+++ b/otherlibs/num/nat_stubs.c
@@ -13,14 +13,14 @@
 
 /* $Id$ */
 
-#include "alloc.h"
-#include "config.h"
-#include "custom.h"
-#include "intext.h"
-#include "fail.h"
-#include "hash.h"
-#include "memory.h"
-#include "mlvalues.h"
+#include "caml/alloc.h"
+#include "caml/config.h"
+#include "caml/custom.h"
+#include "caml/intext.h"
+#include "caml/fail.h"
+#include "caml/hash.h"
+#include "caml/memory.h"
+#include "caml/mlvalues.h"
 
 #include "bng.h"
 #include "nat.h"
diff --git a/otherlibs/str/.depend b/otherlibs/str/.depend
index 5be8377..e0d6abe 100644
--- a/otherlibs/str/.depend
+++ b/otherlibs/str/.depend
@@ -1,9 +1,11 @@
-strstubs.o: strstubs.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/memory.h ../../byterun/gc.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h ../../byterun/fail.h
+strstubs.o: strstubs.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/major_gc.h \
+ ../../byterun/caml/freelist.h ../../byterun/caml/minor_gc.h \
+ ../../byterun/caml/fail.h
 str.cmi :
 str.cmo : str.cmi
 str.cmx : str.cmi
diff --git a/otherlibs/str/strstubs.c b/otherlibs/str/strstubs.c
index 9de349a..6c92870 100644
--- a/otherlibs/str/strstubs.c
+++ b/otherlibs/str/strstubs.c
@@ -13,10 +13,10 @@
 
 #include <string.h>
 #include <ctype.h>
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
+#include <caml/fail.h>
 
 /* The backtracking NFA interpreter */
 
diff --git a/otherlibs/systhreads/.depend b/otherlibs/systhreads/.depend
index 85add2e..868bcc7 100644
--- a/otherlibs/systhreads/.depend
+++ b/otherlibs/systhreads/.depend
@@ -1,14 +1,17 @@
-st_stubs.o: st_stubs.c ../../byterun/alloc.h \
-  ../../byterun/compatibility.h ../../byterun/misc.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/backtrace.h ../../byterun/callback.h \
-  ../../byterun/custom.h ../../byterun/fail.h ../../byterun/io.h \
-  ../../byterun/memory.h ../../byterun/gc.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h ../../byterun/misc.h \
-  ../../byterun/mlvalues.h ../../byterun/printexc.h ../../byterun/roots.h \
-  ../../byterun/memory.h ../../byterun/signals.h ../../byterun/stacks.h \
-  ../../byterun/sys.h threads.h st_posix.h
+st_stubs.o: st_stubs.c ../../byterun/caml/alloc.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/backtrace.h ../../byterun/caml/callback.h \
+ ../../byterun/caml/custom.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/io.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/major_gc.h \
+ ../../byterun/caml/freelist.h ../../byterun/caml/minor_gc.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/printexc.h ../../byterun/caml/roots.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/signals.h \
+ ../../byterun/caml/stacks.h ../../byterun/caml/sys.h threads.h \
+ st_posix.h
 condition.cmi : mutex.cmi
 event.cmi :
 mutex.cmi :
diff --git a/otherlibs/systhreads/st_stubs.c b/otherlibs/systhreads/st_stubs.c
index 02d4c54..9d1c672 100644
--- a/otherlibs/systhreads/st_stubs.c
+++ b/otherlibs/systhreads/st_stubs.c
@@ -11,24 +11,24 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include "alloc.h"
-#include "backtrace.h"
-#include "callback.h"
-#include "custom.h"
-#include "fail.h"
-#include "io.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "printexc.h"
-#include "roots.h"
-#include "signals.h"
+#include "caml/alloc.h"
+#include "caml/backtrace.h"
+#include "caml/callback.h"
+#include "caml/custom.h"
+#include "caml/fail.h"
+#include "caml/io.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/printexc.h"
+#include "caml/roots.h"
+#include "caml/signals.h"
 #ifdef NATIVE_CODE
 #include "stack.h"
 #else
-#include "stacks.h"
+#include "caml/stacks.h"
 #endif
-#include "sys.h"
+#include "caml/sys.h"
 #include "threads.h"
 
 /* Initial size of bytecode stack when a thread is created (4 Ko) */
diff --git a/otherlibs/threads/.depend b/otherlibs/threads/.depend
index bc03050..51c5dfb 100644
--- a/otherlibs/threads/.depend
+++ b/otherlibs/threads/.depend
@@ -1,35 +1,34 @@
-scheduler.o: scheduler.c ../../byterun/alloc.h \
-  ../../byterun/compatibility.h ../../byterun/misc.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/backtrace.h ../../byterun/callback.h \
-  ../../byterun/config.h ../../byterun/fail.h ../../byterun/io.h \
-  ../../byterun/memory.h ../../byterun/gc.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h ../../byterun/misc.h \
-  ../../byterun/mlvalues.h ../../byterun/printexc.h ../../byterun/roots.h \
-  ../../byterun/memory.h ../../byterun/signals.h ../../byterun/stacks.h \
-  ../../byterun/sys.h
+scheduler.o: scheduler.c ../../byterun/caml/alloc.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/backtrace.h ../../byterun/caml/callback.h \
+ ../../byterun/caml/config.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/io.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/major_gc.h \
+ ../../byterun/caml/freelist.h ../../byterun/caml/minor_gc.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/printexc.h ../../byterun/caml/roots.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/signals.h \
+ ../../byterun/caml/stacks.h ../../byterun/caml/sys.h
 condition.cmi : mutex.cmi
 event.cmi :
-marshal.cmi :
 mutex.cmi :
-pervasives.cmi :
-thread.cmi : unix.cmi
-threadUnix.cmi : unix.cmi
-unix.cmi :
+thread.cmi : unix.cmo
+threadUnix.cmi : unix.cmo
 condition.cmo : thread.cmi mutex.cmi condition.cmi
 condition.cmx : thread.cmx mutex.cmx condition.cmi
 event.cmo : mutex.cmi condition.cmi event.cmi
 event.cmx : mutex.cmx condition.cmx event.cmi
-marshal.cmo : pervasives.cmi marshal.cmi
-marshal.cmx : pervasives.cmx marshal.cmi
+marshal.cmo : pervasives.cmo
+marshal.cmx : pervasives.cmx
 mutex.cmo : thread.cmi mutex.cmi
 mutex.cmx : thread.cmx mutex.cmi
-pervasives.cmo : unix.cmi pervasives.cmi
-pervasives.cmx : unix.cmx pervasives.cmi
-thread.cmo : unix.cmi thread.cmi
+pervasives.cmo : unix.cmo
+pervasives.cmx : unix.cmx
+thread.cmo : unix.cmo thread.cmi
 thread.cmx : unix.cmx thread.cmi
-threadUnix.cmo : unix.cmi thread.cmi threadUnix.cmi
+threadUnix.cmo : unix.cmo thread.cmi threadUnix.cmi
 threadUnix.cmx : unix.cmx thread.cmx threadUnix.cmi
-unix.cmo : unix.cmi
-unix.cmx : unix.cmi
+unix.cmo :
+unix.cmx :
diff --git a/otherlibs/threads/scheduler.c b/otherlibs/threads/scheduler.c
index 45ef854..585a890 100644
--- a/otherlibs/threads/scheduler.c
+++ b/otherlibs/threads/scheduler.c
@@ -17,20 +17,20 @@
 #include <stdlib.h>
 #include <stdio.h>
 
-#include "alloc.h"
-#include "backtrace.h"
-#include "callback.h"
-#include "config.h"
-#include "fail.h"
-#include "io.h"
-#include "memory.h"
-#include "misc.h"
-#include "mlvalues.h"
-#include "printexc.h"
-#include "roots.h"
-#include "signals.h"
-#include "stacks.h"
-#include "sys.h"
+#include "caml/alloc.h"
+#include "caml/backtrace.h"
+#include "caml/callback.h"
+#include "caml/config.h"
+#include "caml/fail.h"
+#include "caml/io.h"
+#include "caml/memory.h"
+#include "caml/misc.h"
+#include "caml/mlvalues.h"
+#include "caml/printexc.h"
+#include "caml/roots.h"
+#include "caml/signals.h"
+#include "caml/stacks.h"
+#include "caml/sys.h"
 
 #if ! (defined(HAS_SELECT) && \
        defined(HAS_SETITIMER) && \
diff --git a/otherlibs/unix/.depend b/otherlibs/unix/.depend
index ef8832f..0d62016 100644
--- a/otherlibs/unix/.depend
+++ b/otherlibs/unix/.depend
@@ -1,454 +1,546 @@
-accept.o: accept.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h ../../byterun/fail.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/signals.h unixsupport.h \
-  socketaddr.h ../../byterun/misc.h
-access.o: access.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h unixsupport.h
-addrofstr.o: addrofstr.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/fail.h ../../byterun/mlvalues.h \
-  unixsupport.h socketaddr.h ../../byterun/misc.h
-alarm.o: alarm.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-bind.o: bind.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h socketaddr.h \
-  ../../byterun/misc.h
-chdir.o: chdir.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-chmod.o: chmod.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-chown.o: chown.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-chroot.o: chroot.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-close.o: close.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-closedir.o: closedir.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h unixsupport.h
-connect.o: connect.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h ../../byterun/signals.h unixsupport.h \
-  socketaddr.h ../../byterun/misc.h
-cst2constr.o: cst2constr.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/fail.h ../../byterun/mlvalues.h \
-  cst2constr.h
-cstringv.o: cstringv.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/mlvalues.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h unixsupport.h
-dup.o: dup.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-dup2.o: dup2.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-envir.o: envir.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h
-errmsg.o: errmsg.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h
-execv.o: execv.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/mlvalues.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h unixsupport.h
-execve.o: execve.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/mlvalues.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h unixsupport.h
-execvp.o: execvp.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/mlvalues.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h unixsupport.h
-exit.o: exit.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-fchmod.o: fchmod.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-fchown.o: fchown.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-fcntl.o: fcntl.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-fork.o: fork.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h \
-  ../../byterun/debugger.h ../../byterun/mlvalues.h unixsupport.h
-ftruncate.o: ftruncate.c ../../byterun/fail.h \
-  ../../byterun/compatibility.h ../../byterun/misc.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h ../../byterun/io.h unixsupport.h
-getaddrinfo.o: getaddrinfo.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/signals.h unixsupport.h \
-  cst2constr.h socketaddr.h ../../byterun/misc.h
-getcwd.o: getcwd.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h ../../byterun/fail.h unixsupport.h
-getegid.o: getegid.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h unixsupport.h
-geteuid.o: geteuid.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h unixsupport.h
-getgid.o: getgid.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-getgr.o: getgr.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/fail.h \
-  ../../byterun/mlvalues.h ../../byterun/alloc.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h unixsupport.h
-getgroups.o: getgroups.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h unixsupport.h
-gethost.o: gethost.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/signals.h unixsupport.h \
-  socketaddr.h ../../byterun/misc.h
-gethostname.o: gethostname.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h unixsupport.h
-getlogin.o: getlogin.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  unixsupport.h
-getnameinfo.o: getnameinfo.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/signals.h unixsupport.h \
-  socketaddr.h ../../byterun/misc.h
-getpeername.o: getpeername.c ../../byterun/fail.h \
-  ../../byterun/compatibility.h ../../byterun/misc.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h socketaddr.h \
-  ../../byterun/misc.h
-getpid.o: getpid.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-getppid.o: getppid.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h unixsupport.h
-getproto.o: getproto.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h unixsupport.h
-getpw.o: getpw.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/fail.h unixsupport.h
-getserv.o: getserv.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h unixsupport.h
-getsockname.o: getsockname.c ../../byterun/fail.h \
-  ../../byterun/compatibility.h ../../byterun/misc.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h socketaddr.h \
-  ../../byterun/misc.h
-gettimeofday.o: gettimeofday.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h unixsupport.h
-getuid.o: getuid.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-gmtime.o: gmtime.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h ../../byterun/fail.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h unixsupport.h
-initgroups.o: initgroups.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h unixsupport.h
-isatty.o: isatty.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-itimer.o: itimer.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h ../../byterun/fail.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h unixsupport.h
-kill.o: kill.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/fail.h \
-  ../../byterun/mlvalues.h unixsupport.h ../../byterun/signals.h
-link.o: link.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-listen.o: listen.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-lockf.o: lockf.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h ../../byterun/signals.h unixsupport.h
-lseek.o: lseek.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h ../../byterun/io.h ../../byterun/signals.h \
-  unixsupport.h
-mkdir.o: mkdir.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-mkfifo.o: mkfifo.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-nice.o: nice.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-open.o: open.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/signals.h unixsupport.h
-opendir.o: opendir.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  unixsupport.h
-pipe.o: pipe.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h unixsupport.h
-putenv.o: putenv.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/memory.h ../../byterun/gc.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h \
-  ../../byterun/mlvalues.h unixsupport.h
-read.o: read.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/mlvalues.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h \
-  ../../byterun/signals.h unixsupport.h
-readdir.o: readdir.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/fail.h ../../byterun/mlvalues.h \
-  ../../byterun/alloc.h unixsupport.h
-readlink.o: readlink.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h unixsupport.h
-rename.o: rename.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-rewinddir.o: rewinddir.c ../../byterun/fail.h \
-  ../../byterun/compatibility.h ../../byterun/misc.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-rmdir.o: rmdir.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-select.o: select.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h ../../byterun/fail.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/signals.h unixsupport.h
-sendrecv.o: sendrecv.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/signals.h unixsupport.h \
-  socketaddr.h ../../byterun/misc.h
-setgid.o: setgid.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-setgroups.o: setgroups.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h unixsupport.h
-setsid.o: setsid.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-setuid.o: setuid.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-shutdown.o: shutdown.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-signals.o: signals.c ../../byterun/alloc.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/mlvalues.h \
-  ../../byterun/signals.h unixsupport.h
-sleep.o: sleep.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h \
-  ../../byterun/signals.h ../../byterun/mlvalues.h unixsupport.h
-socket.o: socket.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-socketaddr.o: socketaddr.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/memory.h ../../byterun/gc.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h unixsupport.h \
-  socketaddr.h ../../byterun/misc.h
-socketpair.o: socketpair.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h unixsupport.h
-sockopt.o: sockopt.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/mlvalues.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h ../../byterun/alloc.h \
-  ../../byterun/fail.h unixsupport.h socketaddr.h ../../byterun/misc.h
-stat.o: stat.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/mlvalues.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h ../../byterun/alloc.h \
-  unixsupport.h cst2constr.h ../../byterun/io.h
-strofaddr.o: strofaddr.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h unixsupport.h socketaddr.h ../../byterun/misc.h
-symlink.o: symlink.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-termios.o: termios.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/fail.h unixsupport.h
-time.o: time.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h unixsupport.h
-times.o: times.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h unixsupport.h
-truncate.o: truncate.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/fail.h ../../byterun/mlvalues.h \
-  ../../byterun/io.h unixsupport.h
-umask.o: umask.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-unixsupport.o: unixsupport.c ../../byterun/mlvalues.h \
-  ../../byterun/compatibility.h ../../byterun/config.h \
-  ../../byterun/../config/m.h ../../byterun/../config/s.h \
-  ../../byterun/misc.h ../../byterun/alloc.h ../../byterun/mlvalues.h \
-  ../../byterun/callback.h ../../byterun/memory.h ../../byterun/gc.h \
-  ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/fail.h unixsupport.h \
-  cst2constr.h
-unlink.o: unlink.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h unixsupport.h
-utimes.o: utimes.c ../../byterun/fail.h ../../byterun/compatibility.h \
-  ../../byterun/misc.h ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/mlvalues.h \
-  ../../byterun/mlvalues.h unixsupport.h
-wait.o: wait.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/alloc.h \
-  ../../byterun/mlvalues.h ../../byterun/fail.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/major_gc.h ../../byterun/freelist.h \
-  ../../byterun/minor_gc.h ../../byterun/signals.h unixsupport.h
-write.o: write.c ../../byterun/mlvalues.h ../../byterun/compatibility.h \
-  ../../byterun/config.h ../../byterun/../config/m.h \
-  ../../byterun/../config/s.h ../../byterun/misc.h ../../byterun/memory.h \
-  ../../byterun/gc.h ../../byterun/mlvalues.h ../../byterun/major_gc.h \
-  ../../byterun/freelist.h ../../byterun/minor_gc.h \
-  ../../byterun/signals.h unixsupport.h
+accept.o: accept.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/signals.h unixsupport.h \
+ socketaddr.h ../../byterun/caml/misc.h
+access.o: access.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+addrofstr.o: addrofstr.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/fail.h unixsupport.h \
+ socketaddr.h ../../byterun/caml/misc.h
+alarm.o: alarm.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+bind.o: bind.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h socketaddr.h \
+ ../../byterun/caml/misc.h
+chdir.o: chdir.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+chmod.o: chmod.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+chown.o: chown.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+chroot.o: chroot.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+close.o: close.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+closedir.o: closedir.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+connect.o: connect.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/signals.h unixsupport.h \
+ socketaddr.h ../../byterun/caml/misc.h
+cst2constr.o: cst2constr.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/mlvalues.h cst2constr.h
+cstringv.o: cstringv.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h unixsupport.h
+dup.o: dup.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+dup2.o: dup2.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+envir.o: envir.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h
+errmsg.o: errmsg.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h
+execv.o: execv.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h unixsupport.h
+execve.o: execve.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h unixsupport.h
+execvp.o: execvp.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h unixsupport.h
+exit.o: exit.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+fchmod.o: fchmod.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+fchown.o: fchown.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+fcntl.o: fcntl.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+fork.o: fork.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/debugger.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+ftruncate.o: ftruncate.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/io.h unixsupport.h
+getaddrinfo.o: getaddrinfo.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/signals.h unixsupport.h \
+ cst2constr.h socketaddr.h ../../byterun/caml/misc.h
+getcwd.o: getcwd.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h unixsupport.h
+getegid.o: getegid.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+geteuid.o: geteuid.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+getgid.o: getgid.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+getgr.o: getgr.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h unixsupport.h
+getgroups.o: getgroups.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h unixsupport.h
+gethost.o: gethost.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/signals.h unixsupport.h \
+ socketaddr.h ../../byterun/caml/misc.h
+gethostname.o: gethostname.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h unixsupport.h
+getlogin.o: getlogin.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+getnameinfo.o: getnameinfo.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/signals.h unixsupport.h \
+ socketaddr.h ../../byterun/caml/misc.h
+getpeername.o: getpeername.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h socketaddr.h \
+ ../../byterun/caml/misc.h
+getpid.o: getpid.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+getppid.o: getppid.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+getproto.o: getproto.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h unixsupport.h
+getpw.o: getpw.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/major_gc.h \
+ ../../byterun/caml/freelist.h ../../byterun/caml/minor_gc.h \
+ ../../byterun/caml/fail.h unixsupport.h
+getserv.o: getserv.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h unixsupport.h
+getsockname.o: getsockname.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h socketaddr.h \
+ ../../byterun/caml/misc.h
+gettimeofday.o: gettimeofday.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h unixsupport.h
+getuid.o: getuid.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+gmtime.o: gmtime.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h unixsupport.h
+initgroups.o: initgroups.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h unixsupport.h
+isatty.o: isatty.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+itimer.o: itimer.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h unixsupport.h
+kill.o: kill.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h ../../byterun/caml/signals.h
+link.o: link.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+listen.o: listen.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+lockf.o: lockf.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/signals.h unixsupport.h
+lseek.o: lseek.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/io.h \
+ ../../byterun/caml/signals.h unixsupport.h
+mkdir.o: mkdir.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+mkfifo.o: mkfifo.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+nice.o: nice.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+open.o: open.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/major_gc.h \
+ ../../byterun/caml/freelist.h ../../byterun/caml/minor_gc.h \
+ ../../byterun/caml/signals.h unixsupport.h
+opendir.o: opendir.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+pipe.o: pipe.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+putenv.o: putenv.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/mlvalues.h \
+ unixsupport.h
+read.o: read.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/signals.h unixsupport.h
+readdir.o: readdir.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/alloc.h unixsupport.h
+readlink.o: readlink.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h unixsupport.h
+rename.o: rename.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+rewinddir.o: rewinddir.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+rmdir.o: rmdir.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+select.o: select.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/signals.h unixsupport.h
+sendrecv.o: sendrecv.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/signals.h unixsupport.h \
+ socketaddr.h ../../byterun/caml/misc.h
+setgid.o: setgid.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+setgroups.o: setgroups.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h unixsupport.h
+setsid.o: setsid.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+setuid.o: setuid.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+shutdown.o: shutdown.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+signals.o: signals.c ../../byterun/caml/alloc.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/fail.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/major_gc.h \
+ ../../byterun/caml/freelist.h ../../byterun/caml/minor_gc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/signals.h unixsupport.h
+sleep.o: sleep.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/signals.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+socket.o: socket.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+socketaddr.o: socketaddr.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/major_gc.h \
+ ../../byterun/caml/freelist.h ../../byterun/caml/minor_gc.h \
+ unixsupport.h socketaddr.h ../../byterun/caml/misc.h
+socketpair.o: socketpair.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h unixsupport.h
+sockopt.o: sockopt.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/fail.h unixsupport.h socketaddr.h \
+ ../../byterun/caml/misc.h
+stat.o: stat.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/alloc.h unixsupport.h \
+ cst2constr.h ../../byterun/caml/io.h
+strofaddr.o: strofaddr.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h unixsupport.h \
+ socketaddr.h ../../byterun/caml/misc.h
+symlink.o: symlink.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+termios.o: termios.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h unixsupport.h
+time.o: time.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+times.o: times.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/major_gc.h \
+ ../../byterun/caml/freelist.h ../../byterun/caml/minor_gc.h \
+ unixsupport.h
+truncate.o: truncate.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/io.h unixsupport.h
+umask.o: umask.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+unixsupport.o: unixsupport.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/callback.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/fail.h unixsupport.h \
+ cst2constr.h
+unlink.o: unlink.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h unixsupport.h
+utimes.o: utimes.c ../../byterun/caml/fail.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/misc.h \
+ ../../byterun/caml/config.h ../../byterun/caml/../../config/m.h \
+ ../../byterun/caml/../../config/s.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/mlvalues.h unixsupport.h
+wait.o: wait.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/alloc.h \
+ ../../byterun/caml/mlvalues.h ../../byterun/caml/fail.h \
+ ../../byterun/caml/memory.h ../../byterun/caml/gc.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/signals.h unixsupport.h
+write.o: write.c ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/compatibility.h ../../byterun/caml/config.h \
+ ../../byterun/caml/../../config/m.h ../../byterun/caml/../../config/s.h \
+ ../../byterun/caml/misc.h ../../byterun/caml/memory.h \
+ ../../byterun/caml/gc.h ../../byterun/caml/mlvalues.h \
+ ../../byterun/caml/major_gc.h ../../byterun/caml/freelist.h \
+ ../../byterun/caml/minor_gc.h ../../byterun/caml/signals.h unixsupport.h
 unix.cmi :
 unixLabels.cmi : unix.cmi
 unix.cmo : unix.cmi
diff --git a/otherlibs/unix/accept.c b/otherlibs/unix/accept.c
index 183b8e8..3fd0191 100644
--- a/otherlibs/unix/accept.c
+++ b/otherlibs/unix/accept.c
@@ -11,11 +11,11 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/access.c b/otherlibs/unix/access.c
index 3a612a3..fe575b2 100644
--- a/otherlibs/unix/access.c
+++ b/otherlibs/unix/access.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 
 #ifdef HAS_UNISTD
diff --git a/otherlibs/unix/addrofstr.c b/otherlibs/unix/addrofstr.c
index e17841f..c4bd2e7 100644
--- a/otherlibs/unix/addrofstr.c
+++ b/otherlibs/unix/addrofstr.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <memory.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/alarm.c b/otherlibs/unix/alarm.c
index 3047276..eb92a68 100644
--- a/otherlibs/unix/alarm.c
+++ b/otherlibs/unix/alarm.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_alarm(value t)
diff --git a/otherlibs/unix/bind.c b/otherlibs/unix/bind.c
index e3d0046..4ea75c2 100644
--- a/otherlibs/unix/bind.c
+++ b/otherlibs/unix/bind.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/chdir.c b/otherlibs/unix/chdir.c
index e7ea6f5..8ea8bef 100644
--- a/otherlibs/unix/chdir.c
+++ b/otherlibs/unix/chdir.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_chdir(value path)
diff --git a/otherlibs/unix/chmod.c b/otherlibs/unix/chmod.c
index ed2e88c..dca3223 100644
--- a/otherlibs/unix/chmod.c
+++ b/otherlibs/unix/chmod.c
@@ -13,7 +13,7 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_chmod(value path, value perm)
diff --git a/otherlibs/unix/chown.c b/otherlibs/unix/chown.c
index a26f7a8..8212c9c 100644
--- a/otherlibs/unix/chown.c
+++ b/otherlibs/unix/chown.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_chown(value path, value uid, value gid)
diff --git a/otherlibs/unix/chroot.c b/otherlibs/unix/chroot.c
index 02a46ae..15100bb 100644
--- a/otherlibs/unix/chroot.c
+++ b/otherlibs/unix/chroot.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_chroot(value path)
diff --git a/otherlibs/unix/close.c b/otherlibs/unix/close.c
index 425502a..769948d 100644
--- a/otherlibs/unix/close.c
+++ b/otherlibs/unix/close.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_close(value fd)
diff --git a/otherlibs/unix/closedir.c b/otherlibs/unix/closedir.c
index ba9e743..4821120 100644
--- a/otherlibs/unix/closedir.c
+++ b/otherlibs/unix/closedir.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #include <errno.h>
 #include <sys/types.h>
diff --git a/otherlibs/unix/connect.c b/otherlibs/unix/connect.c
index ed8b12c..b4b3e19 100644
--- a/otherlibs/unix/connect.c
+++ b/otherlibs/unix/connect.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
-#include <signals.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/cst2constr.c b/otherlibs/unix/cst2constr.c
index f27cace..87721ce 100644
--- a/otherlibs/unix/cst2constr.c
+++ b/otherlibs/unix/cst2constr.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/fail.h>
 #include "cst2constr.h"
 
 value cst_to_constr(int n, int *tbl, int size, int deflt)
diff --git a/otherlibs/unix/cstringv.c b/otherlibs/unix/cstringv.c
index d854110..0e61491 100644
--- a/otherlibs/unix/cstringv.c
+++ b/otherlibs/unix/cstringv.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 
 char ** cstringvect(value arg)
diff --git a/otherlibs/unix/dup.c b/otherlibs/unix/dup.c
index 36e3efa..c6e9dcf 100644
--- a/otherlibs/unix/dup.c
+++ b/otherlibs/unix/dup.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_dup(value fd)
diff --git a/otherlibs/unix/dup2.c b/otherlibs/unix/dup2.c
index c501802..fd9ea3d 100644
--- a/otherlibs/unix/dup2.c
+++ b/otherlibs/unix/dup2.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_DUP2
diff --git a/otherlibs/unix/envir.c b/otherlibs/unix/envir.c
index 4b18933..366608b 100644
--- a/otherlibs/unix/envir.c
+++ b/otherlibs/unix/envir.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 
 #ifndef _WIN32
 extern char ** environ;
diff --git a/otherlibs/unix/errmsg.c b/otherlibs/unix/errmsg.c
index 5df3e1e..0f610e9 100644
--- a/otherlibs/unix/errmsg.c
+++ b/otherlibs/unix/errmsg.c
@@ -13,8 +13,8 @@
 
 #include <errno.h>
 #include <string.h>
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 
 extern int error_table[];
 
diff --git a/otherlibs/unix/execv.c b/otherlibs/unix/execv.c
index ee59fa4..9a77548 100644
--- a/otherlibs/unix/execv.c
+++ b/otherlibs/unix/execv.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 
 extern char ** cstringvect();
diff --git a/otherlibs/unix/execve.c b/otherlibs/unix/execve.c
index 62b2d2c..92171c2 100644
--- a/otherlibs/unix/execve.c
+++ b/otherlibs/unix/execve.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 
 extern char ** cstringvect();
diff --git a/otherlibs/unix/execvp.c b/otherlibs/unix/execvp.c
index 8e28fa0..ce6900a 100644
--- a/otherlibs/unix/execvp.c
+++ b/otherlibs/unix/execvp.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 
 extern char ** cstringvect();
diff --git a/otherlibs/unix/exit.c b/otherlibs/unix/exit.c
index 94f5fb5..cfc4e16 100644
--- a/otherlibs/unix/exit.c
+++ b/otherlibs/unix/exit.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_exit(value n)
diff --git a/otherlibs/unix/fchmod.c b/otherlibs/unix/fchmod.c
index a6e8ee9..d1ae3ae 100644
--- a/otherlibs/unix/fchmod.c
+++ b/otherlibs/unix/fchmod.c
@@ -13,8 +13,8 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_FCHMOD
diff --git a/otherlibs/unix/fchown.c b/otherlibs/unix/fchown.c
index 574d3c4..fde6d0d 100644
--- a/otherlibs/unix/fchown.c
+++ b/otherlibs/unix/fchown.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_FCHMOD
diff --git a/otherlibs/unix/fcntl.c b/otherlibs/unix/fcntl.c
index 886c12d..c89e9a6 100644
--- a/otherlibs/unix/fcntl.c
+++ b/otherlibs/unix/fcntl.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #ifdef HAS_UNISTD
 #include <unistd.h>
diff --git a/otherlibs/unix/fork.c b/otherlibs/unix/fork.c
index b21d80c..ac0d677 100644
--- a/otherlibs/unix/fork.c
+++ b/otherlibs/unix/fork.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <debugger.h>
+#include <caml/mlvalues.h>
+#include <caml/debugger.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_fork(value unit)
diff --git a/otherlibs/unix/ftruncate.c b/otherlibs/unix/ftruncate.c
index f539a64..786f602 100644
--- a/otherlibs/unix/ftruncate.c
+++ b/otherlibs/unix/ftruncate.c
@@ -12,9 +12,9 @@
 /***********************************************************************/
 
 #include <sys/types.h>
-#include <fail.h>
-#include <mlvalues.h>
-#include <io.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
+#include <caml/io.h>
 #include "unixsupport.h"
 #ifdef HAS_UNISTD
 #include <unistd.h>
diff --git a/otherlibs/unix/getaddrinfo.c b/otherlibs/unix/getaddrinfo.c
index cf3bb4a..e7430b1 100644
--- a/otherlibs/unix/getaddrinfo.c
+++ b/otherlibs/unix/getaddrinfo.c
@@ -12,11 +12,11 @@
 /***********************************************************************/
 
 #include <string.h>
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 #include "cst2constr.h"
 
diff --git a/otherlibs/unix/getcwd.c b/otherlibs/unix/getcwd.c
index 8d1b8e5..043c96b 100644
--- a/otherlibs/unix/getcwd.c
+++ b/otherlibs/unix/getcwd.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 
 #if !defined (_WIN32) && !macintosh
diff --git a/otherlibs/unix/getegid.c b/otherlibs/unix/getegid.c
index b1977ec..c0ab2b3 100644
--- a/otherlibs/unix/getegid.c
+++ b/otherlibs/unix/getegid.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_getegid(value unit)
diff --git a/otherlibs/unix/geteuid.c b/otherlibs/unix/geteuid.c
index 9bf8971..095d3fe 100644
--- a/otherlibs/unix/geteuid.c
+++ b/otherlibs/unix/geteuid.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_geteuid(value unit)
diff --git a/otherlibs/unix/getgid.c b/otherlibs/unix/getgid.c
index 8cfe3dd..8a4991a 100644
--- a/otherlibs/unix/getgid.c
+++ b/otherlibs/unix/getgid.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_getgid(value unit)
diff --git a/otherlibs/unix/getgr.c b/otherlibs/unix/getgr.c
index d1e610d..14338cc 100644
--- a/otherlibs/unix/getgr.c
+++ b/otherlibs/unix/getgr.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <fail.h>
-#include <alloc.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/fail.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 #include <stdio.h>
 #include <grp.h>
diff --git a/otherlibs/unix/getgroups.c b/otherlibs/unix/getgroups.c
index 6d420b5e..84cd454 100644
--- a/otherlibs/unix/getgroups.c
+++ b/otherlibs/unix/getgroups.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 
 #ifdef HAS_GETGROUPS
 
diff --git a/otherlibs/unix/gethost.c b/otherlibs/unix/gethost.c
index e155152..4c21dab 100644
--- a/otherlibs/unix/gethost.c
+++ b/otherlibs/unix/gethost.c
@@ -12,11 +12,11 @@
 /***********************************************************************/
 
 #include <string.h>
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/gethostname.c b/otherlibs/unix/gethostname.c
index 77b183c..a3aba57 100644
--- a/otherlibs/unix/gethostname.c
+++ b/otherlibs/unix/gethostname.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 #ifndef _WIN32
 #include <sys/param.h>
 #endif
diff --git a/otherlibs/unix/getlogin.c b/otherlibs/unix/getlogin.c
index 27a508e..7f40e44 100644
--- a/otherlibs/unix/getlogin.c
+++ b/otherlibs/unix/getlogin.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 #include <errno.h>
 
diff --git a/otherlibs/unix/getnameinfo.c b/otherlibs/unix/getnameinfo.c
index d7dddb3..d466395 100644
--- a/otherlibs/unix/getnameinfo.c
+++ b/otherlibs/unix/getnameinfo.c
@@ -12,11 +12,11 @@
 /***********************************************************************/
 
 #include <string.h>
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #if defined(HAS_SOCKETS) && defined(HAS_IPV6)
diff --git a/otherlibs/unix/getpeername.c b/otherlibs/unix/getpeername.c
index 9692202..183b210 100644
--- a/otherlibs/unix/getpeername.c
+++ b/otherlibs/unix/getpeername.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/getpid.c b/otherlibs/unix/getpid.c
index cf4c3f9..4cf46e4 100644
--- a/otherlibs/unix/getpid.c
+++ b/otherlibs/unix/getpid.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_getpid(value unit)
diff --git a/otherlibs/unix/getppid.c b/otherlibs/unix/getppid.c
index 616393b..8c30a77 100644
--- a/otherlibs/unix/getppid.c
+++ b/otherlibs/unix/getppid.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_getppid(value unit)
diff --git a/otherlibs/unix/getproto.c b/otherlibs/unix/getproto.c
index 291a71d..b89cbba 100644
--- a/otherlibs/unix/getproto.c
+++ b/otherlibs/unix/getproto.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/getpw.c b/otherlibs/unix/getpw.c
index 0061ca8..82fb4d8 100644
--- a/otherlibs/unix/getpw.c
+++ b/otherlibs/unix/getpw.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 #include <pwd.h>
 
diff --git a/otherlibs/unix/getserv.c b/otherlibs/unix/getserv.c
index de91cbe..deb5f14 100644
--- a/otherlibs/unix/getserv.c
+++ b/otherlibs/unix/getserv.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/getsockname.c b/otherlibs/unix/getsockname.c
index 69e20cc..b28cfd1 100644
--- a/otherlibs/unix/getsockname.c
+++ b/otherlibs/unix/getsockname.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/gettimeofday.c b/otherlibs/unix/gettimeofday.c
index f6a8615..9cbfbea 100644
--- a/otherlibs/unix/gettimeofday.c
+++ b/otherlibs/unix/gettimeofday.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 
 #ifdef HAS_GETTIMEOFDAY
diff --git a/otherlibs/unix/getuid.c b/otherlibs/unix/getuid.c
index f51722a..7d0ce39 100644
--- a/otherlibs/unix/getuid.c
+++ b/otherlibs/unix/getuid.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_getuid(value unit)
diff --git a/otherlibs/unix/gmtime.c b/otherlibs/unix/gmtime.c
index c8f6ac1..566f174 100644
--- a/otherlibs/unix/gmtime.c
+++ b/otherlibs/unix/gmtime.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 #include <time.h>
 #include <errno.h>
diff --git a/otherlibs/unix/initgroups.c b/otherlibs/unix/initgroups.c
index e9541e5..ca3ed4c 100644
--- a/otherlibs/unix/initgroups.c
+++ b/otherlibs/unix/initgroups.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 
 #ifdef HAS_INITGROUPS
 
diff --git a/otherlibs/unix/isatty.c b/otherlibs/unix/isatty.c
index 800afc4..935c39d 100644
--- a/otherlibs/unix/isatty.c
+++ b/otherlibs/unix/isatty.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_isatty(value fd)
diff --git a/otherlibs/unix/itimer.c b/otherlibs/unix/itimer.c
index 537c2d9..f195026 100644
--- a/otherlibs/unix/itimer.c
+++ b/otherlibs/unix/itimer.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SETITIMER
diff --git a/otherlibs/unix/kill.c b/otherlibs/unix/kill.c
index b3f7d88..c0f74d4 100644
--- a/otherlibs/unix/kill.c
+++ b/otherlibs/unix/kill.c
@@ -11,11 +11,11 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 #include <signal.h>
-#include <signals.h>
+#include <caml/signals.h>
 
 CAMLprim value unix_kill(value pid, value signal)
 {
diff --git a/otherlibs/unix/link.c b/otherlibs/unix/link.c
index b5051cd..4c69f66 100644
--- a/otherlibs/unix/link.c
+++ b/otherlibs/unix/link.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_link(value path1, value path2)
diff --git a/otherlibs/unix/listen.c b/otherlibs/unix/listen.c
index 26b0185..38efc9f 100644
--- a/otherlibs/unix/listen.c
+++ b/otherlibs/unix/listen.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/lockf.c b/otherlibs/unix/lockf.c
index 813a4f7..aeaf451 100644
--- a/otherlibs/unix/lockf.c
+++ b/otherlibs/unix/lockf.c
@@ -13,9 +13,9 @@
 
 #include <errno.h>
 #include <fcntl.h>
-#include <fail.h>
-#include <mlvalues.h>
-#include <signals.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #if defined(F_GETLK) && defined(F_SETLK) && defined(F_SETLKW)
diff --git a/otherlibs/unix/lseek.c b/otherlibs/unix/lseek.c
index 826d84f..5a7b777 100644
--- a/otherlibs/unix/lseek.c
+++ b/otherlibs/unix/lseek.c
@@ -13,10 +13,10 @@
 
 #include <errno.h>
 #include <sys/types.h>
-#include <mlvalues.h>
-#include <alloc.h>
-#include <io.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/io.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #ifdef HAS_UNISTD
diff --git a/otherlibs/unix/mkdir.c b/otherlibs/unix/mkdir.c
index 0bb1f4f..fc0d6c7 100644
--- a/otherlibs/unix/mkdir.c
+++ b/otherlibs/unix/mkdir.c
@@ -13,7 +13,7 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_mkdir(value path, value perm)
diff --git a/otherlibs/unix/mkfifo.c b/otherlibs/unix/mkfifo.c
index ec3bed4..e41f916 100644
--- a/otherlibs/unix/mkfifo.c
+++ b/otherlibs/unix/mkfifo.c
@@ -13,8 +13,8 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_MKFIFO
diff --git a/otherlibs/unix/nice.c b/otherlibs/unix/nice.c
index 019e2d1..99dae07 100644
--- a/otherlibs/unix/nice.c
+++ b/otherlibs/unix/nice.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #include <errno.h>
 #ifdef HAS_UNISTD
diff --git a/otherlibs/unix/open.c b/otherlibs/unix/open.c
index 097a045..30f87ab 100644
--- a/otherlibs/unix/open.c
+++ b/otherlibs/unix/open.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 #include <string.h>
 #include <fcntl.h>
diff --git a/otherlibs/unix/opendir.c b/otherlibs/unix/opendir.c
index f70e708..e328b62 100644
--- a/otherlibs/unix/opendir.c
+++ b/otherlibs/unix/opendir.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 #include <sys/types.h>
 #ifdef HAS_DIRENT
diff --git a/otherlibs/unix/pipe.c b/otherlibs/unix/pipe.c
index 7c6b143..5f8f23d 100644
--- a/otherlibs/unix/pipe.c
+++ b/otherlibs/unix/pipe.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_pipe(value unit)
diff --git a/otherlibs/unix/putenv.c b/otherlibs/unix/putenv.c
index 28ad962..ccb8f1a 100644
--- a/otherlibs/unix/putenv.c
+++ b/otherlibs/unix/putenv.c
@@ -14,9 +14,9 @@
 #include <stdlib.h>
 #include <string.h>
 
-#include <fail.h>
-#include <memory.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
+#include <caml/mlvalues.h>
 
 #include "unixsupport.h"
 
diff --git a/otherlibs/unix/read.c b/otherlibs/unix/read.c
index 3bbd0b4..14305d3 100644
--- a/otherlibs/unix/read.c
+++ b/otherlibs/unix/read.c
@@ -12,9 +12,9 @@
 /***********************************************************************/
 
 #include <string.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_read(value fd, value buf, value ofs, value len)
diff --git a/otherlibs/unix/readdir.c b/otherlibs/unix/readdir.c
index 08dad1a..ef9902a 100644
--- a/otherlibs/unix/readdir.c
+++ b/otherlibs/unix/readdir.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <fail.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/fail.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 #include <errno.h>
 #include <sys/types.h>
diff --git a/otherlibs/unix/readlink.c b/otherlibs/unix/readlink.c
index 9534a42..5f44a04 100644
--- a/otherlibs/unix/readlink.c
+++ b/otherlibs/unix/readlink.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 
 #ifdef HAS_SYMLINK
 
diff --git a/otherlibs/unix/rename.c b/otherlibs/unix/rename.c
index 2d34a88..8f770b5 100644
--- a/otherlibs/unix/rename.c
+++ b/otherlibs/unix/rename.c
@@ -12,7 +12,7 @@
 /***********************************************************************/
 
 #include <stdio.h>
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_rename(value path1, value path2)
diff --git a/otherlibs/unix/rewinddir.c b/otherlibs/unix/rewinddir.c
index 17cc639..c377132 100644
--- a/otherlibs/unix/rewinddir.c
+++ b/otherlibs/unix/rewinddir.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #include <errno.h>
 #include <sys/types.h>
diff --git a/otherlibs/unix/rmdir.c b/otherlibs/unix/rmdir.c
index 631b47c..83cab5e 100644
--- a/otherlibs/unix/rmdir.c
+++ b/otherlibs/unix/rmdir.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_rmdir(value path)
diff --git a/otherlibs/unix/select.c b/otherlibs/unix/select.c
index 12d8cc5..23c4802 100644
--- a/otherlibs/unix/select.c
+++ b/otherlibs/unix/select.c
@@ -11,11 +11,11 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SELECT
diff --git a/otherlibs/unix/sendrecv.c b/otherlibs/unix/sendrecv.c
index 679dde3..7d251a4 100644
--- a/otherlibs/unix/sendrecv.c
+++ b/otherlibs/unix/sendrecv.c
@@ -12,11 +12,11 @@
 /***********************************************************************/
 
 #include <string.h>
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/setgid.c b/otherlibs/unix/setgid.c
index 8e635aa..b720474 100644
--- a/otherlibs/unix/setgid.c
+++ b/otherlibs/unix/setgid.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_setgid(value gid)
diff --git a/otherlibs/unix/setgroups.c b/otherlibs/unix/setgroups.c
index 2279a6b..7284b73 100644
--- a/otherlibs/unix/setgroups.c
+++ b/otherlibs/unix/setgroups.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
 
 #ifdef HAS_SETGROUPS
 
diff --git a/otherlibs/unix/setsid.c b/otherlibs/unix/setsid.c
index 252b85c..92814eb 100644
--- a/otherlibs/unix/setsid.c
+++ b/otherlibs/unix/setsid.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #ifdef HAS_UNISTD
 #include <unistd.h>
diff --git a/otherlibs/unix/setuid.c b/otherlibs/unix/setuid.c
index 8a2a807..c8a9c62 100644
--- a/otherlibs/unix/setuid.c
+++ b/otherlibs/unix/setuid.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_setuid(value uid)
diff --git a/otherlibs/unix/shutdown.c b/otherlibs/unix/shutdown.c
index c428afb..1ceafd6 100644
--- a/otherlibs/unix/shutdown.c
+++ b/otherlibs/unix/shutdown.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/signals.c b/otherlibs/unix/signals.c
index d4d97ef..d30a70d 100644
--- a/otherlibs/unix/signals.c
+++ b/otherlibs/unix/signals.c
@@ -14,11 +14,11 @@
 #include <errno.h>
 #include <signal.h>
 
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
-#include <mlvalues.h>
-#include <signals.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
+#include <caml/mlvalues.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #ifndef NSIG
diff --git a/otherlibs/unix/sleep.c b/otherlibs/unix/sleep.c
index 58affd3..a39c5f8 100644
--- a/otherlibs/unix/sleep.c
+++ b/otherlibs/unix/sleep.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_sleep(value t)
diff --git a/otherlibs/unix/socket.c b/otherlibs/unix/socket.c
index 9e23231..9cf3ed3 100644
--- a/otherlibs/unix/socket.c
+++ b/otherlibs/unix/socket.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/socketaddr.c b/otherlibs/unix/socketaddr.c
index 24babca..2f4bdad 100644
--- a/otherlibs/unix/socketaddr.c
+++ b/otherlibs/unix/socketaddr.c
@@ -12,9 +12,9 @@
 /***********************************************************************/
 
 #include <string.h>
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
 #include <errno.h>
 #include "unixsupport.h"
 
diff --git a/otherlibs/unix/socketaddr.h b/otherlibs/unix/socketaddr.h
index cf25e2f..c2957af 100644
--- a/otherlibs/unix/socketaddr.h
+++ b/otherlibs/unix/socketaddr.h
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include "misc.h"
+#include "caml/misc.h"
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <sys/un.h>
diff --git a/otherlibs/unix/socketpair.c b/otherlibs/unix/socketpair.c
index 301ebf8..4f85f9a 100644
--- a/otherlibs/unix/socketpair.c
+++ b/otherlibs/unix/socketpair.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/sockopt.c b/otherlibs/unix/sockopt.c
index b6167eb..0ad3673 100644
--- a/otherlibs/unix/sockopt.c
+++ b/otherlibs/unix/sockopt.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <memory.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/stat.c b/otherlibs/unix/stat.c
index a0f4c34..8f43a16 100644
--- a/otherlibs/unix/stat.c
+++ b/otherlibs/unix/stat.c
@@ -12,14 +12,14 @@
 /***********************************************************************/
 
 #include <errno.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 #include "cst2constr.h"
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <io.h>
+#include <caml/io.h>
 
 #ifndef S_IFLNK
 #define S_IFLNK 0
diff --git a/otherlibs/unix/strofaddr.c b/otherlibs/unix/strofaddr.c
index 5381bc3..c4ea6ba 100644
--- a/otherlibs/unix/strofaddr.c
+++ b/otherlibs/unix/strofaddr.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SOCKETS
diff --git a/otherlibs/unix/symlink.c b/otherlibs/unix/symlink.c
index 26c9aa4..9aef49f 100644
--- a/otherlibs/unix/symlink.c
+++ b/otherlibs/unix/symlink.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_SYMLINK
diff --git a/otherlibs/unix/termios.c b/otherlibs/unix/termios.c
index 9dd168a..d3d2db8 100644
--- a/otherlibs/unix/termios.c
+++ b/otherlibs/unix/termios.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 
 #ifdef HAS_TERMIOS
diff --git a/otherlibs/unix/time.c b/otherlibs/unix/time.c
index 042a1f6..495adb6 100644
--- a/otherlibs/unix/time.c
+++ b/otherlibs/unix/time.c
@@ -12,8 +12,8 @@
 /***********************************************************************/
 
 #include <time.h>
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_time(value unit)
diff --git a/otherlibs/unix/times.c b/otherlibs/unix/times.c
index 8ab6006..8760ad2 100644
--- a/otherlibs/unix/times.c
+++ b/otherlibs/unix/times.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 #include <time.h>
 #include <sys/types.h>
diff --git a/otherlibs/unix/truncate.c b/otherlibs/unix/truncate.c
index 638ef79..2162b50 100644
--- a/otherlibs/unix/truncate.c
+++ b/otherlibs/unix/truncate.c
@@ -12,9 +12,9 @@
 /***********************************************************************/
 
 #include <sys/types.h>
-#include <mlvalues.h>
-#include <fail.h>
-#include <io.h>
+#include <caml/mlvalues.h>
+#include <caml/fail.h>
+#include <caml/io.h>
 #include "unixsupport.h"
 #ifdef HAS_UNISTD
 #include <unistd.h>
diff --git a/otherlibs/unix/umask.c b/otherlibs/unix/umask.c
index 311e4ed..9b88f10 100644
--- a/otherlibs/unix/umask.c
+++ b/otherlibs/unix/umask.c
@@ -13,7 +13,7 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_umask(value perm)
diff --git a/otherlibs/unix/unixsupport.c b/otherlibs/unix/unixsupport.c
index 15365f8..8164bf3 100644
--- a/otherlibs/unix/unixsupport.c
+++ b/otherlibs/unix/unixsupport.c
@@ -11,11 +11,11 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <callback.h>
-#include <memory.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/callback.h>
+#include <caml/memory.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 #include "cst2constr.h"
 #include <errno.h>
diff --git a/otherlibs/unix/unlink.c b/otherlibs/unix/unlink.c
index 76ec913..1f582f4 100644
--- a/otherlibs/unix/unlink.c
+++ b/otherlibs/unix/unlink.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_unlink(value path)
diff --git a/otherlibs/unix/utimes.c b/otherlibs/unix/utimes.c
index 825fc4c..b66a9ed 100644
--- a/otherlibs/unix/utimes.c
+++ b/otherlibs/unix/utimes.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <fail.h>
-#include <mlvalues.h>
+#include <caml/fail.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 #ifdef HAS_UTIME
diff --git a/otherlibs/unix/wait.c b/otherlibs/unix/wait.c
index 81f3683..a8eb42b 100644
--- a/otherlibs/unix/wait.c
+++ b/otherlibs/unix/wait.c
@@ -11,11 +11,11 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <fail.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #include <sys/types.h>
diff --git a/otherlibs/unix/write.c b/otherlibs/unix/write.c
index d6fe409..d6842d9 100644
--- a/otherlibs/unix/write.c
+++ b/otherlibs/unix/write.c
@@ -13,9 +13,9 @@
 
 #include <errno.h>
 #include <string.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 #ifndef EAGAIN
diff --git a/otherlibs/win32graph/dib.c b/otherlibs/win32graph/dib.c
index 100beba..26fccf7 100644
--- a/otherlibs/win32graph/dib.c
+++ b/otherlibs/win32graph/dib.c
@@ -42,9 +42,9 @@
 
 
 #include <windows.h>
-#include <memory.h>
+#include <caml/memory.h>
 #include <string.h>
-#include <io.h>
+#include <caml/io.h>
 #include <stdio.h>
    // Size of window extra bytes (we store a handle to a PALINFO structure).
 
diff --git a/otherlibs/win32graph/draw.c b/otherlibs/win32graph/draw.c
index fc6cf10..3e19274 100644
--- a/otherlibs/win32graph/draw.c
+++ b/otherlibs/win32graph/draw.c
@@ -12,12 +12,12 @@
 /***********************************************************************/
 
 #include <math.h>
-#include "mlvalues.h"
-#include "alloc.h"
-#include "fail.h"
+#include "caml/mlvalues.h"
+#include "caml/alloc.h"
+#include "caml/fail.h"
 #include "libgraph.h"
-#include "custom.h"
-#include "memory.h"
+#include "caml/custom.h"
+#include "caml/memory.h"
 
 HDC gcMetaFile;
 int grdisplay_mode;
diff --git a/otherlibs/win32graph/events.c b/otherlibs/win32graph/events.c
index 8124272..837e53a 100755
--- a/otherlibs/win32graph/events.c
+++ b/otherlibs/win32graph/events.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include "mlvalues.h"
-#include "alloc.h"
+#include "caml/mlvalues.h"
+#include "caml/alloc.h"
 #include "libgraph.h"
 #include <windows.h>
 
diff --git a/otherlibs/win32graph/open.c b/otherlibs/win32graph/open.c
index e44a576..0f00e04 100644
--- a/otherlibs/win32graph/open.c
+++ b/otherlibs/win32graph/open.c
@@ -13,10 +13,10 @@
 
 #include <fcntl.h>
 #include <signal.h>
-#include "mlvalues.h"
-#include "fail.h"
+#include "caml/mlvalues.h"
+#include "caml/fail.h"
 #include "libgraph.h"
-#include "callback.h"
+#include "caml/callback.h"
 #include <windows.h>
 
 static value gr_reset(void);
diff --git a/otherlibs/win32unix/accept.c b/otherlibs/win32unix/accept.c
index f2e1446..f705f0f 100644
--- a/otherlibs/win32unix/accept.c
+++ b/otherlibs/win32unix/accept.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 #include <mswsock.h>   // for SO_OPENTYPE and SO_SYNCHRONOUS_NONALERT
 #include "socketaddr.h"
diff --git a/otherlibs/win32unix/bind.c b/otherlibs/win32unix/bind.c
index bc09230..4b1d3de 100644
--- a/otherlibs/win32unix/bind.c
+++ b/otherlibs/win32unix/bind.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #include "socketaddr.h"
 
diff --git a/otherlibs/win32unix/channels.c b/otherlibs/win32unix/channels.c
index 1e7e823..b6350e1 100644
--- a/otherlibs/win32unix/channels.c
+++ b/otherlibs/win32unix/channels.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <io.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/io.h>
+#include <caml/memory.h>
 #include "unixsupport.h"
 #include <fcntl.h>
 
diff --git a/otherlibs/win32unix/close.c b/otherlibs/win32unix/close.c
index 20b131b..7f8da29 100644
--- a/otherlibs/win32unix/close.c
+++ b/otherlibs/win32unix/close.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
-#include <io.h>
+#include <caml/io.h>
 
 extern int _close(int);
 
diff --git a/otherlibs/win32unix/close_on.c b/otherlibs/win32unix/close_on.c
index 9ba342e..7a316ab 100644
--- a/otherlibs/win32unix/close_on.c
+++ b/otherlibs/win32unix/close_on.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #include <windows.h>
 
diff --git a/otherlibs/win32unix/connect.c b/otherlibs/win32unix/connect.c
index 190eb74..37cdbda 100644
--- a/otherlibs/win32unix/connect.c
+++ b/otherlibs/win32unix/connect.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 #include "socketaddr.h"
 
diff --git a/otherlibs/win32unix/createprocess.c b/otherlibs/win32unix/createprocess.c
index 4e32cb1..4c7a709 100644
--- a/otherlibs/win32unix/createprocess.c
+++ b/otherlibs/win32unix/createprocess.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #include <windows.h>
-#include <osdeps.h>
+#include <caml/osdeps.h>
 
 static int win_has_console(void);
 
diff --git a/otherlibs/win32unix/dup.c b/otherlibs/win32unix/dup.c
index 76cbdf6..5db19e3 100644
--- a/otherlibs/win32unix/dup.c
+++ b/otherlibs/win32unix/dup.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_dup(value fd)
diff --git a/otherlibs/win32unix/dup2.c b/otherlibs/win32unix/dup2.c
index 5f19710..5184207 100644
--- a/otherlibs/win32unix/dup2.c
+++ b/otherlibs/win32unix/dup2.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 extern int _dup2(int, int);
diff --git a/otherlibs/win32unix/errmsg.c b/otherlibs/win32unix/errmsg.c
index c3bc19c..6107abc 100644
--- a/otherlibs/win32unix/errmsg.c
+++ b/otherlibs/win32unix/errmsg.c
@@ -14,8 +14,8 @@
 #include <stdio.h>
 #include <errno.h>
 #include <string.h>
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 
 extern int error_table[];
diff --git a/otherlibs/win32unix/getpeername.c b/otherlibs/win32unix/getpeername.c
index ad6674b..3467e03 100644
--- a/otherlibs/win32unix/getpeername.c
+++ b/otherlibs/win32unix/getpeername.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #include "socketaddr.h"
 
diff --git a/otherlibs/win32unix/getpid.c b/otherlibs/win32unix/getpid.c
index 65c8828..06d9535 100644
--- a/otherlibs/win32unix/getpid.c
+++ b/otherlibs/win32unix/getpid.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 extern value val_process_id;
diff --git a/otherlibs/win32unix/getsockname.c b/otherlibs/win32unix/getsockname.c
index 1e28f4b..21e9d06 100644
--- a/otherlibs/win32unix/getsockname.c
+++ b/otherlibs/win32unix/getsockname.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #include "socketaddr.h"
 
diff --git a/otherlibs/win32unix/gettimeofday.c b/otherlibs/win32unix/gettimeofday.c
index 573821f..e018c34 100644
--- a/otherlibs/win32unix/gettimeofday.c
+++ b/otherlibs/win32unix/gettimeofday.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include <time.h>
 
 #include "unixsupport.h"
diff --git a/otherlibs/win32unix/link.c b/otherlibs/win32unix/link.c
index 97748ba..93d2150 100644
--- a/otherlibs/win32unix/link.c
+++ b/otherlibs/win32unix/link.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 #include <windows.h>
 
diff --git a/otherlibs/win32unix/listen.c b/otherlibs/win32unix/listen.c
index 9602a37..767db61 100644
--- a/otherlibs/win32unix/listen.c
+++ b/otherlibs/win32unix/listen.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_listen(sock, backlog)
diff --git a/otherlibs/win32unix/lockf.c b/otherlibs/win32unix/lockf.c
index 3c9d135..bcd4008 100644
--- a/otherlibs/win32unix/lockf.c
+++ b/otherlibs/win32unix/lockf.c
@@ -15,12 +15,12 @@
 
 #include <errno.h>
 #include <fcntl.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 #include <stdio.h>
-#include <signals.h>
+#include <caml/signals.h>
 
 #ifndef INVALID_SET_FILE_POINTER
 #define INVALID_SET_FILE_POINTER (-1)
diff --git a/otherlibs/win32unix/lseek.c b/otherlibs/win32unix/lseek.c
index 5306331..6c30a62 100644
--- a/otherlibs/win32unix/lseek.c
+++ b/otherlibs/win32unix/lseek.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 
 #ifdef HAS_UNISTD
diff --git a/otherlibs/win32unix/mkdir.c b/otherlibs/win32unix/mkdir.c
index 998b32b..21bca10 100644
--- a/otherlibs/win32unix/mkdir.c
+++ b/otherlibs/win32unix/mkdir.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_mkdir(path, perm)
diff --git a/otherlibs/win32unix/nonblock.c b/otherlibs/win32unix/nonblock.c
index a9aaeca..4001bec 100755
--- a/otherlibs/win32unix/nonblock.c
+++ b/otherlibs/win32unix/nonblock.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_set_nonblock(socket)
diff --git a/otherlibs/win32unix/open.c b/otherlibs/win32unix/open.c
index 40ea34b..5849fcc 100644
--- a/otherlibs/win32unix/open.c
+++ b/otherlibs/win32unix/open.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 #include <fcntl.h>
 
diff --git a/otherlibs/win32unix/pipe.c b/otherlibs/win32unix/pipe.c
index fe55377..88debb0 100644
--- a/otherlibs/win32unix/pipe.c
+++ b/otherlibs/win32unix/pipe.c
@@ -11,9 +11,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <memory.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 #include <fcntl.h>
 
diff --git a/otherlibs/win32unix/read.c b/otherlibs/win32unix/read.c
index e7a2b38..d65683c 100644
--- a/otherlibs/win32unix/read.c
+++ b/otherlibs/win32unix/read.c
@@ -12,9 +12,9 @@
 /***********************************************************************/
 
 #include <string.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_read(value fd, value buf, value ofs, value vlen)
diff --git a/otherlibs/win32unix/rename.c b/otherlibs/win32unix/rename.c
index b8c0f3e..ad46ead 100644
--- a/otherlibs/win32unix/rename.c
+++ b/otherlibs/win32unix/rename.c
@@ -12,7 +12,7 @@
 /***********************************************************************/
 
 #include <stdio.h>
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_rename(value path1, value path2)
diff --git a/otherlibs/win32unix/select.c b/otherlibs/win32unix/select.c
index 9f06024..c5041cf 100644
--- a/otherlibs/win32unix/select.c
+++ b/otherlibs/win32unix/select.c
@@ -11,11 +11,11 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
-#include <fail.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
+#include <caml/fail.h>
+#include <caml/signals.h>
 #include "winworker.h"
 #include <stdio.h>
 #include "windbug.h"
diff --git a/otherlibs/win32unix/sendrecv.c b/otherlibs/win32unix/sendrecv.c
index f2745fb..2d6732d 100644
--- a/otherlibs/win32unix/sendrecv.c
+++ b/otherlibs/win32unix/sendrecv.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 #include "socketaddr.h"
 
diff --git a/otherlibs/win32unix/shutdown.c b/otherlibs/win32unix/shutdown.c
index 2d5707a..9602311 100644
--- a/otherlibs/win32unix/shutdown.c
+++ b/otherlibs/win32unix/shutdown.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 
 static int shutdown_command_table[] = {
diff --git a/otherlibs/win32unix/sleep.c b/otherlibs/win32unix/sleep.c
index 28e60e4..6d630d2 100644
--- a/otherlibs/win32unix/sleep.c
+++ b/otherlibs/win32unix/sleep.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_sleep(t)
diff --git a/otherlibs/win32unix/socket.c b/otherlibs/win32unix/socket.c
index ad8165b..9385e82 100644
--- a/otherlibs/win32unix/socket.c
+++ b/otherlibs/win32unix/socket.c
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "unixsupport.h"
 #include <mswsock.h>   // for SO_OPENTYPE and SO_SYNCHRONOUS_NONALERT
 
diff --git a/otherlibs/win32unix/socketaddr.h b/otherlibs/win32unix/socketaddr.h
index fde691e..9c36380 100644
--- a/otherlibs/win32unix/socketaddr.h
+++ b/otherlibs/win32unix/socketaddr.h
@@ -11,7 +11,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include "misc.h"
+#include "caml/misc.h"
 
 union sock_addr_union {
   struct sockaddr s_gen;
diff --git a/otherlibs/win32unix/sockopt.c b/otherlibs/win32unix/sockopt.c
index eefa9a3..aebc517 100644
--- a/otherlibs/win32unix/sockopt.c
+++ b/otherlibs/win32unix/sockopt.c
@@ -12,10 +12,10 @@
 /***********************************************************************/
 
 #include <errno.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 #include "socketaddr.h"
 
diff --git a/otherlibs/win32unix/startup.c b/otherlibs/win32unix/startup.c
index 65aedc6..be66c8a 100644
--- a/otherlibs/win32unix/startup.c
+++ b/otherlibs/win32unix/startup.c
@@ -14,7 +14,7 @@
 #include <stdio.h>
 #include <fcntl.h>
 #include <stdlib.h>
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include "winworker.h"
 #include "windbug.h"
 
diff --git a/otherlibs/win32unix/stat.c b/otherlibs/win32unix/stat.c
index 56b45d0..46fc984 100644
--- a/otherlibs/win32unix/stat.c
+++ b/otherlibs/win32unix/stat.c
@@ -12,9 +12,9 @@
 /***********************************************************************/
 
 #include <errno.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 #include "cst2constr.h"
 #define _INTEGRAL_MAX_BITS 64
diff --git a/otherlibs/win32unix/system.c b/otherlibs/win32unix/system.c
index 13d5658..202dcd0 100644
--- a/otherlibs/win32unix/system.c
+++ b/otherlibs/win32unix/system.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <memory.h>
-#include <alloc.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/alloc.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 #include <process.h>
 #include <stdio.h>
diff --git a/otherlibs/win32unix/times.c b/otherlibs/win32unix/times.c
index e6b5ab0..e97d3a5 100644
--- a/otherlibs/win32unix/times.c
+++ b/otherlibs/win32unix/times.c
@@ -11,8 +11,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
 #include "unixsupport.h"
 #include <windows.h>
 
diff --git a/otherlibs/win32unix/unixsupport.c b/otherlibs/win32unix/unixsupport.c
index b326060..01d1ac1 100644
--- a/otherlibs/win32unix/unixsupport.c
+++ b/otherlibs/win32unix/unixsupport.c
@@ -12,12 +12,12 @@
 /***********************************************************************/
 
 #include <stddef.h>
-#include <mlvalues.h>
-#include <callback.h>
-#include <alloc.h>
-#include <memory.h>
-#include <fail.h>
-#include <custom.h>
+#include <caml/mlvalues.h>
+#include <caml/callback.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
+#include <caml/fail.h>
+#include <caml/custom.h>
 #include "unixsupport.h"
 #include "cst2constr.h"
 #include <errno.h>
diff --git a/otherlibs/win32unix/windir.c b/otherlibs/win32unix/windir.c
index 7a08e51..ef952aa 100644
--- a/otherlibs/win32unix/windir.c
+++ b/otherlibs/win32unix/windir.c
@@ -11,11 +11,11 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <memory.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
 #include <errno.h>
-#include <alloc.h>
-#include <fail.h>
+#include <caml/alloc.h>
+#include <caml/fail.h>
 #include "unixsupport.h"
 
 CAMLprim value win_findfirst(name)
diff --git a/otherlibs/win32unix/winwait.c b/otherlibs/win32unix/winwait.c
index 0436072..510a16f 100644
--- a/otherlibs/win32unix/winwait.c
+++ b/otherlibs/win32unix/winwait.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 #include <windows.h>
 #include <sys/types.h>
diff --git a/otherlibs/win32unix/winworker.c b/otherlibs/win32unix/winworker.c
index 4f126b7..9ff787f 100644
--- a/otherlibs/win32unix/winworker.c
+++ b/otherlibs/win32unix/winworker.c
@@ -11,10 +11,10 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <alloc.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/alloc.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "winworker.h"
 #include "winlist.h"
 #include "windbug.h"
diff --git a/otherlibs/win32unix/write.c b/otherlibs/win32unix/write.c
index 65f82cc..dc0ae91 100644
--- a/otherlibs/win32unix/write.c
+++ b/otherlibs/win32unix/write.c
@@ -13,9 +13,9 @@
 
 #include <errno.h>
 #include <string.h>
-#include <mlvalues.h>
-#include <memory.h>
-#include <signals.h>
+#include <caml/mlvalues.h>
+#include <caml/memory.h>
+#include <caml/signals.h>
 #include "unixsupport.h"
 
 CAMLprim value unix_write(value fd, value buf, value vofs, value vlen)
diff --git a/stdlib/.depend b/stdlib/.depend
index 95cb39d..b8a837d 100644
--- a/stdlib/.depend
+++ b/stdlib/.depend
@@ -1,148 +1,264 @@
-arg.cmi:
-arrayLabels.cmi:
-array.cmi:
-buffer.cmi:
-callback.cmi:
-camlinternalLazy.cmi:
-camlinternalMod.cmi: obj.cmi
-camlinternalOO.cmi: obj.cmi
-char.cmi:
-complex.cmi:
-digest.cmi:
-filename.cmi:
-format.cmi: pervasives.cmi buffer.cmi
-gc.cmi:
-genlex.cmi: stream.cmi
-hashtbl.cmi:
-int32.cmi:
-int64.cmi:
-lazy.cmi:
-lexing.cmi:
-listLabels.cmi:
-list.cmi:
-map.cmi:
-marshal.cmi:
-moreLabels.cmi: set.cmi map.cmi hashtbl.cmi
-nativeint.cmi:
-obj.cmi: int32.cmi
-oo.cmi: camlinternalOO.cmi
-parsing.cmi: obj.cmi lexing.cmi
-pervasives.cmi:
-printexc.cmi:
-printf.cmi: obj.cmi buffer.cmi
-queue.cmi:
-random.cmi: nativeint.cmi int64.cmi int32.cmi
-scanf.cmi: pervasives.cmi
-set.cmi:
-sort.cmi:
-stack.cmi:
-stdLabels.cmi:
-stream.cmi:
-stringLabels.cmi:
-string.cmi:
-sys.cmi:
-weak.cmi: hashtbl.cmi
-arg.cmo: sys.cmi string.cmi printf.cmi list.cmi buffer.cmi array.cmi arg.cmi
-arg.cmx: sys.cmx string.cmx printf.cmx list.cmx buffer.cmx array.cmx arg.cmi
-arrayLabels.cmo: array.cmi arrayLabels.cmi
-arrayLabels.cmx: array.cmx arrayLabels.cmi
-array.cmo: array.cmi
-array.cmx: array.cmi
-buffer.cmo: sys.cmi string.cmi buffer.cmi
-buffer.cmx: sys.cmx string.cmx buffer.cmi
-callback.cmo: obj.cmi callback.cmi
-callback.cmx: obj.cmx callback.cmi
-camlinternalLazy.cmo: obj.cmi camlinternalLazy.cmi
-camlinternalLazy.cmx: obj.cmx camlinternalLazy.cmi
-camlinternalMod.cmo: obj.cmi camlinternalOO.cmi array.cmi camlinternalMod.cmi
-camlinternalMod.cmx: obj.cmx camlinternalOO.cmx array.cmx camlinternalMod.cmi
-camlinternalOO.cmo: sys.cmi string.cmi obj.cmi map.cmi list.cmi char.cmi \
+arg.cmi :
+array.cmi :
+arrayLabels.cmi :
+buffer.cmi :
+callback.cmi :
+camlinternalLazy.cmi :
+camlinternalMod.cmi : obj.cmi
+camlinternalOO.cmi : obj.cmi
+char.cmi :
+complex.cmi :
+digest.cmi :
+filename.cmi :
+format.cmi : pervasives.cmi buffer.cmi
+gc.cmi :
+genlex.cmi : stream.cmi
+hashtbl.cmi :
+int32.cmi :
+int64.cmi :
+lazy.cmi :
+lexing.cmi :
+list.cmi :
+listLabels.cmi :
+map.cmi :
+marshal.cmi :
+moreLabels.cmi : set.cmi map.cmi hashtbl.cmi
+nativeint.cmi :
+obj.cmi : int32.cmi
+oo.cmi : camlinternalOO.cmi
+parsing.cmi : obj.cmi lexing.cmi
+pervasives.cmi :
+printexc.cmi :
+printf.cmi : obj.cmi buffer.cmi
+queue.cmi :
+random.cmi : nativeint.cmi int64.cmi int32.cmi
+scanf.cmi : pervasives.cmi
+set.cmi :
+sort.cmi :
+stack.cmi :
+stdLabels.cmi :
+stream.cmi :
+string.cmi :
+stringLabels.cmi :
+sys.cmi :
+weak.cmi : hashtbl.cmi
+arg.cmo : sys.cmi string.cmi printf.cmi list.cmi buffer.cmi array.cmi \
+    arg.cmi
+arg.cmx : sys.cmx string.cmx printf.cmx list.cmx buffer.cmx array.cmx \
+    arg.cmi
+array.cmo : array.cmi
+array.cmx : array.cmi
+arrayLabels.cmo : array.cmi arrayLabels.cmi
+arrayLabels.cmx : array.cmx arrayLabels.cmi
+buffer.cmo : sys.cmi string.cmi buffer.cmi
+buffer.cmx : sys.cmx string.cmx buffer.cmi
+callback.cmo : obj.cmi callback.cmi
+callback.cmx : obj.cmx callback.cmi
+camlinternalLazy.cmo : obj.cmi camlinternalLazy.cmi
+camlinternalLazy.cmx : obj.cmx camlinternalLazy.cmi
+camlinternalMod.cmo : obj.cmi camlinternalOO.cmi array.cmi \
+    camlinternalMod.cmi
+camlinternalMod.cmx : obj.cmx camlinternalOO.cmx array.cmx \
+    camlinternalMod.cmi
+camlinternalOO.cmo : sys.cmi string.cmi obj.cmi map.cmi list.cmi char.cmi \
     callback.cmi array.cmi camlinternalOO.cmi
-camlinternalOO.cmx: sys.cmx string.cmx obj.cmx map.cmx list.cmx char.cmx \
+camlinternalOO.cmx : sys.cmx string.cmx obj.cmx map.cmx list.cmx char.cmx \
     callback.cmx array.cmx camlinternalOO.cmi
-char.cmo: char.cmi
-char.cmx: char.cmi
-complex.cmo: complex.cmi
-complex.cmx: complex.cmi
-digest.cmo: string.cmi printf.cmi char.cmi digest.cmi
-digest.cmx: string.cmx printf.cmx char.cmx digest.cmi
-filename.cmo: sys.cmi string.cmi random.cmi printf.cmi buffer.cmi \
+char.cmo : char.cmi
+char.cmx : char.cmi
+complex.cmo : complex.cmi
+complex.cmx : complex.cmi
+digest.cmo : string.cmi printf.cmi char.cmi digest.cmi
+digest.cmx : string.cmx printf.cmx char.cmx digest.cmi
+filename.cmo : sys.cmi string.cmi random.cmi printf.cmi lazy.cmi buffer.cmi \
     filename.cmi
-filename.cmx: sys.cmx string.cmx random.cmx printf.cmx buffer.cmx \
+filename.cmx : sys.cmx string.cmx random.cmx printf.cmx lazy.cmx buffer.cmx \
     filename.cmi
-format.cmo: string.cmi printf.cmi pervasives.cmi obj.cmi list.cmi buffer.cmi \
-    format.cmi
-format.cmx: string.cmx printf.cmx pervasives.cmx obj.cmx list.cmx buffer.cmx \
-    format.cmi
-gc.cmo: sys.cmi printf.cmi gc.cmi
-gc.cmx: sys.cmx printf.cmx gc.cmi
-genlex.cmo: string.cmi stream.cmi list.cmi hashtbl.cmi char.cmi genlex.cmi
-genlex.cmx: string.cmx stream.cmx list.cmx hashtbl.cmx char.cmx genlex.cmi
-hashtbl.cmo: sys.cmi string.cmi random.cmi obj.cmi lazy.cmi array.cmi \
+format.cmo : string.cmi printf.cmi pervasives.cmi obj.cmi list.cmi \
+    buffer.cmi format.cmi
+format.cmx : string.cmx printf.cmx pervasives.cmx obj.cmx list.cmx \
+    buffer.cmx format.cmi
+gc.cmo : sys.cmi printf.cmi gc.cmi
+gc.cmx : sys.cmx printf.cmx gc.cmi
+genlex.cmo : string.cmi stream.cmi list.cmi hashtbl.cmi char.cmi genlex.cmi
+genlex.cmx : string.cmx stream.cmx list.cmx hashtbl.cmx char.cmx genlex.cmi
+hashtbl.cmo : sys.cmi string.cmi random.cmi obj.cmi lazy.cmi array.cmi \
     hashtbl.cmi
-hashtbl.cmx: sys.cmx string.cmx random.cmx obj.cmx lazy.cmx array.cmx \
+hashtbl.cmx : sys.cmx string.cmx random.cmx obj.cmx lazy.cmx array.cmx \
     hashtbl.cmi
-int32.cmo: pervasives.cmi int32.cmi
-int32.cmx: pervasives.cmx int32.cmi
-int64.cmo: pervasives.cmi int64.cmi
-int64.cmx: pervasives.cmx int64.cmi
-lazy.cmo: obj.cmi camlinternalLazy.cmi lazy.cmi
-lazy.cmx: obj.cmx camlinternalLazy.cmx lazy.cmi
-lexing.cmo: sys.cmi string.cmi array.cmi lexing.cmi
-lexing.cmx: sys.cmx string.cmx array.cmx lexing.cmi
-listLabels.cmo: list.cmi listLabels.cmi
-listLabels.cmx: list.cmx listLabels.cmi
-list.cmo: list.cmi
-list.cmx: list.cmi
-map.cmo: map.cmi
-map.cmx: map.cmi
-marshal.cmo: string.cmi marshal.cmi
-marshal.cmx: string.cmx marshal.cmi
-moreLabels.cmo: set.cmi map.cmi hashtbl.cmi moreLabels.cmi
-moreLabels.cmx: set.cmx map.cmx hashtbl.cmx moreLabels.cmi
-nativeint.cmo: sys.cmi pervasives.cmi nativeint.cmi
-nativeint.cmx: sys.cmx pervasives.cmx nativeint.cmi
-obj.cmo: marshal.cmi int32.cmi array.cmi obj.cmi
-obj.cmx: marshal.cmx int32.cmx array.cmx obj.cmi
-oo.cmo: camlinternalOO.cmi oo.cmi
-oo.cmx: camlinternalOO.cmx oo.cmi
-parsing.cmo: obj.cmi lexing.cmi array.cmi parsing.cmi
-parsing.cmx: obj.cmx lexing.cmx array.cmx parsing.cmi
-pervasives.cmo: pervasives.cmi
-pervasives.cmx: pervasives.cmi
-printexc.cmo: printf.cmi obj.cmi buffer.cmi array.cmi printexc.cmi
-printexc.cmx: printf.cmx obj.cmx buffer.cmx array.cmx printexc.cmi
-printf.cmo: string.cmi pervasives.cmi obj.cmi list.cmi char.cmi buffer.cmi \
+int32.cmo : pervasives.cmi int32.cmi
+int32.cmx : pervasives.cmx int32.cmi
+int64.cmo : pervasives.cmi int64.cmi
+int64.cmx : pervasives.cmx int64.cmi
+lazy.cmo : obj.cmi camlinternalLazy.cmi lazy.cmi
+lazy.cmx : obj.cmx camlinternalLazy.cmx lazy.cmi
+lexing.cmo : sys.cmi string.cmi array.cmi lexing.cmi
+lexing.cmx : sys.cmx string.cmx array.cmx lexing.cmi
+list.cmo : list.cmi
+list.cmx : list.cmi
+listLabels.cmo : list.cmi listLabels.cmi
+listLabels.cmx : list.cmx listLabels.cmi
+map.cmo : map.cmi
+map.cmx : map.cmi
+marshal.cmo : string.cmi marshal.cmi
+marshal.cmx : string.cmx marshal.cmi
+moreLabels.cmo : set.cmi map.cmi hashtbl.cmi moreLabels.cmi
+moreLabels.cmx : set.cmx map.cmx hashtbl.cmx moreLabels.cmi
+nativeint.cmo : sys.cmi pervasives.cmi nativeint.cmi
+nativeint.cmx : sys.cmx pervasives.cmx nativeint.cmi
+obj.cmo : marshal.cmi int32.cmi array.cmi obj.cmi
+obj.cmx : marshal.cmx int32.cmx array.cmx obj.cmi
+oo.cmo : camlinternalOO.cmi oo.cmi
+oo.cmx : camlinternalOO.cmx oo.cmi
+parsing.cmo : obj.cmi lexing.cmi array.cmi parsing.cmi
+parsing.cmx : obj.cmx lexing.cmx array.cmx parsing.cmi
+pervasives.cmo : pervasives.cmi
+pervasives.cmx : pervasives.cmi
+printexc.cmo : printf.cmi obj.cmi buffer.cmi array.cmi printexc.cmi
+printexc.cmx : printf.cmx obj.cmx buffer.cmx array.cmx printexc.cmi
+printf.cmo : string.cmi pervasives.cmi obj.cmi list.cmi char.cmi buffer.cmi \
     array.cmi printf.cmi
-printf.cmx: string.cmx pervasives.cmx obj.cmx list.cmx char.cmx buffer.cmx \
+printf.cmx : string.cmx pervasives.cmx obj.cmx list.cmx char.cmx buffer.cmx \
     array.cmx printf.cmi
-queue.cmo: obj.cmi queue.cmi
-queue.cmx: obj.cmx queue.cmi
-random.cmo: string.cmi pervasives.cmi nativeint.cmi int64.cmi int32.cmi \
+queue.cmo : obj.cmi queue.cmi
+queue.cmx : obj.cmx queue.cmi
+random.cmo : string.cmi pervasives.cmi nativeint.cmi int64.cmi int32.cmi \
     digest.cmi char.cmi array.cmi random.cmi
-random.cmx: string.cmx pervasives.cmx nativeint.cmx int64.cmx int32.cmx \
+random.cmx : string.cmx pervasives.cmx nativeint.cmx int64.cmx int32.cmx \
     digest.cmx char.cmx array.cmx random.cmi
-scanf.cmo: string.cmi printf.cmi pervasives.cmi obj.cmi list.cmi hashtbl.cmi \
-    buffer.cmi array.cmi scanf.cmi
-scanf.cmx: string.cmx printf.cmx pervasives.cmx obj.cmx list.cmx hashtbl.cmx \
-    buffer.cmx array.cmx scanf.cmi
-set.cmo: set.cmi
-set.cmx: set.cmi
-sort.cmo: array.cmi sort.cmi
-sort.cmx: array.cmx sort.cmi
-stack.cmo: list.cmi stack.cmi
-stack.cmx: list.cmx stack.cmi
-std_exit.cmo:
-std_exit.cmx:
-stdLabels.cmo: stringLabels.cmi listLabels.cmi arrayLabels.cmi stdLabels.cmi
-stdLabels.cmx: stringLabels.cmx listLabels.cmx arrayLabels.cmx stdLabels.cmi
-stream.cmo: string.cmi obj.cmi list.cmi lazy.cmi stream.cmi
-stream.cmx: string.cmx obj.cmx list.cmx lazy.cmx stream.cmi
-stringLabels.cmo: string.cmi stringLabels.cmi
-stringLabels.cmx: string.cmx stringLabels.cmi
-string.cmo: pervasives.cmi list.cmi char.cmi string.cmi
-string.cmx: pervasives.cmx list.cmx char.cmx string.cmi
-sys.cmo: sys.cmi
-sys.cmx: sys.cmi
-weak.cmo: sys.cmi obj.cmi hashtbl.cmi array.cmi weak.cmi
-weak.cmx: sys.cmx obj.cmx hashtbl.cmx array.cmx weak.cmi
+scanf.cmo : string.cmi printf.cmi pervasives.cmi obj.cmi list.cmi \
+    hashtbl.cmi buffer.cmi array.cmi scanf.cmi
+scanf.cmx : string.cmx printf.cmx pervasives.cmx obj.cmx list.cmx \
+    hashtbl.cmx buffer.cmx array.cmx scanf.cmi
+set.cmo : set.cmi
+set.cmx : set.cmi
+sort.cmo : array.cmi sort.cmi
+sort.cmx : array.cmx sort.cmi
+stack.cmo : list.cmi stack.cmi
+stack.cmx : list.cmx stack.cmi
+stdLabels.cmo : stringLabels.cmi listLabels.cmi arrayLabels.cmi \
+    stdLabels.cmi
+stdLabels.cmx : stringLabels.cmx listLabels.cmx arrayLabels.cmx \
+    stdLabels.cmi
+std_exit.cmo :
+std_exit.cmx :
+stream.cmo : string.cmi obj.cmi list.cmi lazy.cmi stream.cmi
+stream.cmx : string.cmx obj.cmx list.cmx lazy.cmx stream.cmi
+string.cmo : pervasives.cmi list.cmi char.cmi string.cmi
+string.cmx : pervasives.cmx list.cmx char.cmx string.cmi
+stringLabels.cmo : string.cmi stringLabels.cmi
+stringLabels.cmx : string.cmx stringLabels.cmi
+sys.cmo : sys.cmi
+sys.cmx : sys.cmi
+weak.cmo : sys.cmi obj.cmi hashtbl.cmi array.cmi weak.cmi
+weak.cmx : sys.cmx obj.cmx hashtbl.cmx array.cmx weak.cmi
+arg.cmo : sys.cmi string.cmi printf.cmi list.cmi buffer.cmi array.cmi \
+    arg.cmi
+arg.p.cmx : sys.p.cmx string.p.cmx printf.p.cmx list.p.cmx buffer.p.cmx array.p.cmx \
+    arg.cmi
+array.cmo : array.cmi
+array.p.cmx : array.cmi
+arrayLabels.cmo : array.cmi arrayLabels.cmi
+arrayLabels.p.cmx : array.p.cmx arrayLabels.cmi
+buffer.cmo : sys.cmi string.cmi buffer.cmi
+buffer.p.cmx : sys.p.cmx string.p.cmx buffer.cmi
+callback.cmo : obj.cmi callback.cmi
+callback.p.cmx : obj.p.cmx callback.cmi
+camlinternalLazy.cmo : obj.cmi camlinternalLazy.cmi
+camlinternalLazy.p.cmx : obj.p.cmx camlinternalLazy.cmi
+camlinternalMod.cmo : obj.cmi camlinternalOO.cmi array.cmi \
+    camlinternalMod.cmi
+camlinternalMod.p.cmx : obj.p.cmx camlinternalOO.p.cmx array.p.cmx \
+    camlinternalMod.cmi
+camlinternalOO.cmo : sys.cmi string.cmi obj.cmi map.cmi list.cmi char.cmi \
+    callback.cmi array.cmi camlinternalOO.cmi
+camlinternalOO.p.cmx : sys.p.cmx string.p.cmx obj.p.cmx map.p.cmx list.p.cmx char.p.cmx \
+    callback.p.cmx array.p.cmx camlinternalOO.cmi
+char.cmo : char.cmi
+char.p.cmx : char.cmi
+complex.cmo : complex.cmi
+complex.p.cmx : complex.cmi
+digest.cmo : string.cmi printf.cmi char.cmi digest.cmi
+digest.p.cmx : string.p.cmx printf.p.cmx char.p.cmx digest.cmi
+filename.cmo : sys.cmi string.cmi random.cmi printf.cmi lazy.cmi buffer.cmi \
+    filename.cmi
+filename.p.cmx : sys.p.cmx string.p.cmx random.p.cmx printf.p.cmx lazy.p.cmx buffer.p.cmx \
+    filename.cmi
+format.cmo : string.cmi printf.cmi pervasives.cmi obj.cmi list.cmi \
+    buffer.cmi format.cmi
+format.p.cmx : string.p.cmx printf.p.cmx pervasives.p.cmx obj.p.cmx list.p.cmx \
+    buffer.p.cmx format.cmi
+gc.cmo : sys.cmi printf.cmi gc.cmi
+gc.p.cmx : sys.p.cmx printf.p.cmx gc.cmi
+genlex.cmo : string.cmi stream.cmi list.cmi hashtbl.cmi char.cmi genlex.cmi
+genlex.p.cmx : string.p.cmx stream.p.cmx list.p.cmx hashtbl.p.cmx char.p.cmx genlex.cmi
+hashtbl.cmo : sys.cmi string.cmi random.cmi obj.cmi lazy.cmi array.cmi \
+    hashtbl.cmi
+hashtbl.p.cmx : sys.p.cmx string.p.cmx random.p.cmx obj.p.cmx lazy.p.cmx array.p.cmx \
+    hashtbl.cmi
+int32.cmo : pervasives.cmi int32.cmi
+int32.p.cmx : pervasives.p.cmx int32.cmi
+int64.cmo : pervasives.cmi int64.cmi
+int64.p.cmx : pervasives.p.cmx int64.cmi
+lazy.cmo : obj.cmi camlinternalLazy.cmi lazy.cmi
+lazy.p.cmx : obj.p.cmx camlinternalLazy.p.cmx lazy.cmi
+lexing.cmo : sys.cmi string.cmi array.cmi lexing.cmi
+lexing.p.cmx : sys.p.cmx string.p.cmx array.p.cmx lexing.cmi
+list.cmo : list.cmi
+list.p.cmx : list.cmi
+listLabels.cmo : list.cmi listLabels.cmi
+listLabels.p.cmx : list.p.cmx listLabels.cmi
+map.cmo : map.cmi
+map.p.cmx : map.cmi
+marshal.cmo : string.cmi marshal.cmi
+marshal.p.cmx : string.p.cmx marshal.cmi
+moreLabels.cmo : set.cmi map.cmi hashtbl.cmi moreLabels.cmi
+moreLabels.p.cmx : set.p.cmx map.p.cmx hashtbl.p.cmx moreLabels.cmi
+nativeint.cmo : sys.cmi pervasives.cmi nativeint.cmi
+nativeint.p.cmx : sys.p.cmx pervasives.p.cmx nativeint.cmi
+obj.cmo : marshal.cmi int32.cmi array.cmi obj.cmi
+obj.p.cmx : marshal.p.cmx int32.p.cmx array.p.cmx obj.cmi
+oo.cmo : camlinternalOO.cmi oo.cmi
+oo.p.cmx : camlinternalOO.p.cmx oo.cmi
+parsing.cmo : obj.cmi lexing.cmi array.cmi parsing.cmi
+parsing.p.cmx : obj.p.cmx lexing.p.cmx array.p.cmx parsing.cmi
+pervasives.cmo : pervasives.cmi
+pervasives.p.cmx : pervasives.cmi
+printexc.cmo : printf.cmi obj.cmi buffer.cmi array.cmi printexc.cmi
+printexc.p.cmx : printf.p.cmx obj.p.cmx buffer.p.cmx array.p.cmx printexc.cmi
+printf.cmo : string.cmi pervasives.cmi obj.cmi list.cmi char.cmi buffer.cmi \
+    array.cmi printf.cmi
+printf.p.cmx : string.p.cmx pervasives.p.cmx obj.p.cmx list.p.cmx char.p.cmx buffer.p.cmx \
+    array.p.cmx printf.cmi
+queue.cmo : obj.cmi queue.cmi
+queue.p.cmx : obj.p.cmx queue.cmi
+random.cmo : string.cmi pervasives.cmi nativeint.cmi int64.cmi int32.cmi \
+    digest.cmi char.cmi array.cmi random.cmi
+random.p.cmx : string.p.cmx pervasives.p.cmx nativeint.p.cmx int64.p.cmx int32.p.cmx \
+    digest.p.cmx char.p.cmx array.p.cmx random.cmi
+scanf.cmo : string.cmi printf.cmi pervasives.cmi obj.cmi list.cmi \
+    hashtbl.cmi buffer.cmi array.cmi scanf.cmi
+scanf.p.cmx : string.p.cmx printf.p.cmx pervasives.p.cmx obj.p.cmx list.p.cmx \
+    hashtbl.p.cmx buffer.p.cmx array.p.cmx scanf.cmi
+set.cmo : set.cmi
+set.p.cmx : set.cmi
+sort.cmo : array.cmi sort.cmi
+sort.p.cmx : array.p.cmx sort.cmi
+stack.cmo : list.cmi stack.cmi
+stack.p.cmx : list.p.cmx stack.cmi
+stdLabels.cmo : stringLabels.cmi listLabels.cmi arrayLabels.cmi \
+    stdLabels.cmi
+stdLabels.p.cmx : stringLabels.p.cmx listLabels.p.cmx arrayLabels.p.cmx \
+    stdLabels.cmi
+std_exit.cmo :
+std_exit.p.cmx :
+stream.cmo : string.cmi obj.cmi list.cmi lazy.cmi stream.cmi
+stream.p.cmx : string.p.cmx obj.p.cmx list.p.cmx lazy.p.cmx stream.cmi
+string.cmo : pervasives.cmi list.cmi char.cmi string.cmi
+string.p.cmx : pervasives.p.cmx list.p.cmx char.p.cmx string.cmi
+stringLabels.cmo : string.cmi stringLabels.cmi
+stringLabels.p.cmx : string.p.cmx stringLabels.cmi
+sys.cmo : sys.cmi
+sys.p.cmx : sys.cmi
+weak.cmo : sys.cmi obj.cmi hashtbl.cmi array.cmi weak.cmi
+weak.p.cmx : sys.p.cmx obj.p.cmx hashtbl.p.cmx array.p.cmx weak.cmi
diff --git a/stdlib/header.c b/stdlib/header.c
index cb3d995..5caed8d 100644
--- a/stdlib/header.c
+++ b/stdlib/header.c
@@ -23,8 +23,8 @@
 #include <fcntl.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#include "../byterun/mlvalues.h"
-#include "../byterun/exec.h"
+#include "../byterun/caml/mlvalues.h"
+#include "../byterun/caml/exec.h"
 
 char * default_runtime_path = RUNTIME_NAME;
 
diff --git a/stdlib/headernt.c b/stdlib/headernt.c
index bb04dbe..2b96079 100644
--- a/stdlib/headernt.c
+++ b/stdlib/headernt.c
@@ -15,8 +15,8 @@
 #define WIN32_LEAN_AND_MEAN
 
 #include <windows.h>
-#include "mlvalues.h"
-#include "exec.h"
+#include "caml/mlvalues.h"
+#include "caml/exec.h"
 
 #ifndef __MINGW32__
 #pragma comment(linker , "/entry:headerentry")
diff --git a/testsuite/tests/basic-manyargs/manyargsprim.c b/testsuite/tests/basic-manyargs/manyargsprim.c
index 65e9cf5..55fbc2e 100644
--- a/testsuite/tests/basic-manyargs/manyargsprim.c
+++ b/testsuite/tests/basic-manyargs/manyargsprim.c
@@ -10,7 +10,7 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include "mlvalues.h"
+#include "caml/mlvalues.h"
 #include "stdio.h"
 
 value manyargs(value a, value b, value c, value d, value e, value f,
diff --git a/testsuite/tests/callback/callbackprim.c b/testsuite/tests/callback/callbackprim.c
index f3c5981..71a123d 100644
--- a/testsuite/tests/callback/callbackprim.c
+++ b/testsuite/tests/callback/callbackprim.c
@@ -10,9 +10,9 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include "mlvalues.h"
-#include "memory.h"
-#include "callback.h"
+#include "caml/mlvalues.h"
+#include "caml/memory.h"
+#include "caml/callback.h"
 
 value mycallback1(value fun, value arg)
 {
diff --git a/testsuite/tests/gc-roots/globrootsprim.c b/testsuite/tests/gc-roots/globrootsprim.c
index 9a1cc84..075dfc7 100644
--- a/testsuite/tests/gc-roots/globrootsprim.c
+++ b/testsuite/tests/gc-roots/globrootsprim.c
@@ -13,9 +13,9 @@
 
 /* For testing global root registration */
 
-#include "mlvalues.h"
-#include "memory.h"
-#include "alloc.h"
+#include "caml/mlvalues.h"
+#include "caml/memory.h"
+#include "caml/alloc.h"
 
 struct block { value v; };
 
diff --git a/testsuite/tests/lib-bigarray-2/bigarrfstub.c b/testsuite/tests/lib-bigarray-2/bigarrfstub.c
index 3540828..7287298 100644
--- a/testsuite/tests/lib-bigarray-2/bigarrfstub.c
+++ b/testsuite/tests/lib-bigarray-2/bigarrfstub.c
@@ -11,7 +11,7 @@
 /***********************************************************************/
 
 #include <stdio.h>
-#include <mlvalues.h>
+#include <caml/mlvalues.h>
 #include <bigarray.h>
 
 extern void filltab_(void);
diff --git a/testsuite/tests/lib-marshal/intextaux.c b/testsuite/tests/lib-marshal/intextaux.c
index 924b896..0368846 100644
--- a/testsuite/tests/lib-marshal/intextaux.c
+++ b/testsuite/tests/lib-marshal/intextaux.c
@@ -10,8 +10,8 @@
 /*                                                                     */
 /***********************************************************************/
 
-#include <mlvalues.h>
-#include <intext.h>
+#include <caml/mlvalues.h>
+#include <caml/intext.h>
 
 value marshal_to_block(value vbuf, value vlen, value v, value vflags)
 {
diff --git a/tools/.depend b/tools/.depend
index 8d07e60..ed9a591 100644
--- a/tools/.depend
+++ b/tools/.depend
@@ -7,22 +7,18 @@ addlabels.cmo : ../parsing/parsetree.cmi ../parsing/parse.cmi \
     ../parsing/longident.cmi ../parsing/location.cmi ../parsing/asttypes.cmi
 addlabels.cmx : ../parsing/parsetree.cmi ../parsing/parse.cmx \
     ../parsing/longident.cmx ../parsing/location.cmx ../parsing/asttypes.cmi
-ast_mapper.cmo : ../parsing/parsetree.cmi ../parsing/longident.cmi \
-    ../parsing/location.cmi ../utils/config.cmi ../parsing/asttypes.cmi
-ast_mapper.cmx : ../parsing/parsetree.cmi ../parsing/longident.cmx \
-    ../parsing/location.cmx ../utils/config.cmx ../parsing/asttypes.cmi
-cmt2annot.cmo : untypeast.cmi ../typing/types.cmi \
-    ../typing/typedtreeIter.cmi ../typing/typedtree.cmi tast_iter.cmi \
-    ../typing/stypes.cmi ../parsing/pprintast.cmi ../typing/path.cmi \
-    ../typing/oprint.cmi ../parsing/location.cmi ../typing/ident.cmi \
-    ../typing/envaux.cmi ../typing/env.cmi ../utils/config.cmi \
-    ../typing/cmt_format.cmi ../parsing/asttypes.cmi ../typing/annot.cmi
-cmt2annot.cmx : untypeast.cmx ../typing/types.cmx \
-    ../typing/typedtreeIter.cmx ../typing/typedtree.cmx tast_iter.cmx \
-    ../typing/stypes.cmx ../parsing/pprintast.cmx ../typing/path.cmx \
-    ../typing/oprint.cmx ../parsing/location.cmx ../typing/ident.cmx \
-    ../typing/envaux.cmx ../typing/env.cmx ../utils/config.cmx \
-    ../typing/cmt_format.cmx ../parsing/asttypes.cmi ../typing/annot.cmi
+cmt2annot.cmo : untypeast.cmi ../typing/types.cmi ../typing/typedtree.cmi \
+    tast_iter.cmi ../typing/stypes.cmi ../parsing/pprintast.cmi \
+    ../typing/path.cmi ../typing/oprint.cmi ../parsing/location.cmi \
+    ../typing/ident.cmi ../typing/envaux.cmi ../typing/env.cmi \
+    ../utils/config.cmi ../typing/cmt_format.cmi ../parsing/asttypes.cmi \
+    ../typing/annot.cmi
+cmt2annot.cmx : untypeast.cmx ../typing/types.cmx ../typing/typedtree.cmx \
+    tast_iter.cmx ../typing/stypes.cmx ../parsing/pprintast.cmx \
+    ../typing/path.cmx ../typing/oprint.cmx ../parsing/location.cmx \
+    ../typing/ident.cmx ../typing/envaux.cmx ../typing/env.cmx \
+    ../utils/config.cmx ../typing/cmt_format.cmx ../parsing/asttypes.cmi \
+    ../typing/annot.cmi
 cvt_emit.cmo :
 cvt_emit.cmx :
 depend.cmo : ../parsing/parsetree.cmi ../utils/misc.cmi \
@@ -33,14 +29,14 @@ depend.cmx : ../parsing/parsetree.cmi ../utils/misc.cmx \
     depend.cmi
 dumpobj.cmo : ../utils/tbl.cmi opnames.cmo ../bytecomp/opcodes.cmo \
     ../utils/misc.cmi ../parsing/location.cmi ../bytecomp/lambda.cmi \
-    ../bytecomp/instruct.cmi ../typing/ident.cmi ../bytecomp/emitcode.cmi \
-    ../utils/config.cmi ../bytecomp/cmo_format.cmi \
-    ../bytecomp/bytesections.cmi ../parsing/asttypes.cmi
+    ../bytecomp/instruct.cmi ../typing/ident.cmi ../utils/config.cmi \
+    ../bytecomp/cmo_format.cmi ../bytecomp/bytesections.cmi \
+    ../parsing/asttypes.cmi
 dumpobj.cmx : ../utils/tbl.cmx opnames.cmx ../bytecomp/opcodes.cmx \
     ../utils/misc.cmx ../parsing/location.cmx ../bytecomp/lambda.cmx \
-    ../bytecomp/instruct.cmx ../typing/ident.cmx ../bytecomp/emitcode.cmx \
-    ../utils/config.cmx ../bytecomp/cmo_format.cmi \
-    ../bytecomp/bytesections.cmx ../parsing/asttypes.cmi
+    ../bytecomp/instruct.cmx ../typing/ident.cmx ../utils/config.cmx \
+    ../bytecomp/cmo_format.cmi ../bytecomp/bytesections.cmx \
+    ../parsing/asttypes.cmi
 eqparsetree.cmo : ../parsing/parsetree.cmi ../parsing/longident.cmi \
     ../parsing/location.cmi ../parsing/asttypes.cmi
 eqparsetree.cmx : ../parsing/parsetree.cmi ../parsing/longident.cmx \
@@ -61,12 +57,12 @@ ocamlcp.cmo : ../driver/main_args.cmi
 ocamlcp.cmx : ../driver/main_args.cmx
 ocamldep.cmo : ../parsing/syntaxerr.cmi ../driver/pparse.cmi \
     ../parsing/parsetree.cmi ../parsing/parse.cmi ../utils/misc.cmi \
-    ../parsing/longident.cmi ../parsing/location.cmi ../parsing/lexer.cmi \
-    depend.cmi ../utils/config.cmi ../utils/clflags.cmi
+    ../parsing/location.cmi ../parsing/lexer.cmi depend.cmi \
+    ../utils/config.cmi ../utils/clflags.cmi
 ocamldep.cmx : ../parsing/syntaxerr.cmx ../driver/pparse.cmx \
     ../parsing/parsetree.cmi ../parsing/parse.cmx ../utils/misc.cmx \
-    ../parsing/longident.cmx ../parsing/location.cmx ../parsing/lexer.cmx \
-    depend.cmx ../utils/config.cmx ../utils/clflags.cmx
+    ../parsing/location.cmx ../parsing/lexer.cmx depend.cmx \
+    ../utils/config.cmx ../utils/clflags.cmx
 ocamlmklib.cmo : myocamlbuild_config.cmo
 ocamlmklib.cmx : myocamlbuild_config.cmx
 ocamlmktop.cmo : ../utils/ccomp.cmi
@@ -74,13 +70,11 @@ ocamlmktop.cmx : ../utils/ccomp.cmx
 ocamloptp.cmo : ../driver/main_args.cmi
 ocamloptp.cmx : ../driver/main_args.cmx
 ocamlprof.cmo : ../utils/warnings.cmi ../parsing/syntaxerr.cmi \
-    ../parsing/parsetree.cmi ../parsing/parse.cmi ../utils/misc.cmi \
-    ../parsing/location.cmi ../parsing/lexer.cmi ../utils/config.cmi \
-    ../utils/clflags.cmi
+    ../parsing/parsetree.cmi ../parsing/parse.cmi ../parsing/location.cmi \
+    ../parsing/lexer.cmi
 ocamlprof.cmx : ../utils/warnings.cmx ../parsing/syntaxerr.cmx \
-    ../parsing/parsetree.cmi ../parsing/parse.cmx ../utils/misc.cmx \
-    ../parsing/location.cmx ../parsing/lexer.cmx ../utils/config.cmx \
-    ../utils/clflags.cmx
+    ../parsing/parsetree.cmi ../parsing/parse.cmx ../parsing/location.cmx \
+    ../parsing/lexer.cmx
 opnames.cmo :
 opnames.cmx :
 primreq.cmo : ../utils/config.cmi ../bytecomp/cmo_format.cmi
@@ -96,8 +90,8 @@ tast_iter.cmo : ../typing/typedtree.cmi ../parsing/asttypes.cmi \
 tast_iter.cmx : ../typing/typedtree.cmx ../parsing/asttypes.cmi \
     tast_iter.cmi
 untypeast.cmo : ../typing/typedtree.cmi ../typing/path.cmi \
-    ../parsing/parsetree.cmi ../utils/misc.cmi ../parsing/longident.cmi \
-    ../typing/ident.cmi ../parsing/asttypes.cmi untypeast.cmi
+    ../parsing/parsetree.cmi ../parsing/longident.cmi ../typing/ident.cmi \
+    ../parsing/asttypes.cmi untypeast.cmi
 untypeast.cmx : ../typing/typedtree.cmx ../typing/path.cmx \
-    ../parsing/parsetree.cmi ../utils/misc.cmx ../parsing/longident.cmx \
-    ../typing/ident.cmx ../parsing/asttypes.cmi untypeast.cmi
+    ../parsing/parsetree.cmi ../parsing/longident.cmx ../typing/ident.cmx \
+    ../parsing/asttypes.cmi untypeast.cmi
diff --git a/tools/Makefile.shared b/tools/Makefile.shared
index babcb6b..baed7df 100644
--- a/tools/Makefile.shared
+++ b/tools/Makefile.shared
@@ -259,7 +259,7 @@ dumpobj: $(DUMPOBJ)
 clean::
 	rm -f dumpobj
 
-opnames.ml: ../byterun/instruct.h
+opnames.ml: ../byterun/caml/instruct.h
 	unset LC_ALL || : ; \
 	unset LC_CTYPE || : ; \
 	unset LC_COLLATE LANG || : ; \
@@ -269,7 +269,7 @@ opnames.ml: ../byterun/instruct.h
 	    -e 's/};$$/ |]/' \
 	    -e 's/\([A-Z][A-Z_0-9a-z]*\)/"\1"/g' \
 	    -e 's/,/;/g' \
-	../byterun/instruct.h > opnames.ml
+	../byterun/caml/instruct.h > opnames.ml
 
 clean::
 	rm -f opnames.ml
diff --git a/tools/objinfo_helper.c b/tools/objinfo_helper.c
index 689cdf7..f4a3d04 100644
--- a/tools/objinfo_helper.c
+++ b/tools/objinfo_helper.c
@@ -10,8 +10,8 @@
 /***********************************************************************/
 
 #include "../config/s.h"
-#include "../byterun/mlvalues.h"
-#include "../byterun/alloc.h"
+#include "../byterun/caml/mlvalues.h"
+#include "../byterun/caml/alloc.h"
 #include <stdio.h>
 
 #ifdef HAS_LIBBFD
-- 
1.8.1.4

