From f6ba52bc6cd212a06ed83834b4136f7bee9de12a Mon Sep 17 00:00:00 2001
From: Adrien Nader <adrien@notk.org>
Date: Sun, 16 Mar 2014 18:57:58 +0100
Subject: [PATCH 1/4] _oasis: make it possible to not build tests, docs and lwt
 support.

---
 INSTALL.txt     |    6 +-
 Makefile        |    8 +-
 _oasis          |    6 +
 _tags           |   32 +-
 configure       |    4 +-
 myocamlbuild.ml |  415 +++++----
 setup.ml        | 2643 +++++++++++++++++++++++++++++++++++--------------------
 src/META        |    4 +-
 8 files changed, 1992 insertions(+), 1126 deletions(-)

diff --git a/INSTALL.txt b/INSTALL.txt
index 2ccac62..d597309 100644
--- a/INSTALL.txt
+++ b/INSTALL.txt
@@ -1,9 +1,9 @@
 (* OASIS_START *)
-(* DO NOT EDIT (digest: 7c0eff931aa3463cbf720edcf74685b3) *)
+(* DO NOT EDIT (digest: ece576ceec1f392207a5bd372b9309d4) *)
 This is the INSTALL file for the ocaml-archive distribution.
 
 This package uses OASIS to generate its build system. See section OASIS for
-full information. 
+full information.
 
 Dependencies
 ============
@@ -27,7 +27,7 @@ Installing
 Uninstalling
 ============
 
-1. Go to the root of the package 
+1. Go to the root of the package
 2. Run 'ocaml setup.ml -uninstall'
 
 OASIS
diff --git a/Makefile b/Makefile
index 9dfb993..79dcecb 100644
--- a/Makefile
+++ b/Makefile
@@ -1,7 +1,7 @@
 default: clean test 
 
 # OASIS_START
-# DO NOT EDIT (digest: bc1e05bfc8b39b664f29dae8dbd3ebbb)
+# DO NOT EDIT (digest: 7b2408909643717852b95f994b273fee)
 
 SETUP = ocaml setup.ml
 
@@ -14,7 +14,7 @@ doc: setup.data build
 test: setup.data build
 	$(SETUP) -test $(TESTFLAGS)
 
-all: 
+all:
 	$(SETUP) -all $(ALLFLAGS)
 
 install: setup.data
@@ -26,10 +26,10 @@ uninstall: setup.data
 reinstall: setup.data
 	$(SETUP) -reinstall $(REINSTALLFLAGS)
 
-clean: 
+clean:
 	$(SETUP) -clean $(CLEANFLAGS)
 
-distclean: 
+distclean:
 	$(SETUP) -distclean $(DISTCLEANFLAGS)
 
 setup.data:
diff --git a/_oasis b/_oasis
index c17a6b7..15afdbb 100644
--- a/_oasis
+++ b/_oasis
@@ -20,6 +20,10 @@ Description:
   .
   [libarchive website](http://code.google.com/p/libarchive/)
 
+Flag "archivelwt"
+  Description: Also provide operations as lwt threads
+  Default:     true
+
 Library "archive-ocaml"
   Path:       src
   Modules:    Archive, ArchiveLow
@@ -29,6 +33,7 @@ Library "archive-ocaml"
   BuildDepends: unix, fileutils
 
 Library "archive-lwt"
+  Build$:        flag(archivelwt)
   Path:          src
   BuildDepends:  archive, lwt (>= 2.3.2), lwt.preemptive, threads
   Modules:       ArchiveLwt
@@ -36,6 +41,7 @@ Library "archive-lwt"
   FindlibName:   lwt
 
 Executable test
+  Build: false
   Path:         test
   BuildTools:   ocamlbuild
   MainIs:       test.ml
diff --git a/_tags b/_tags
index 440ea3d..1b30e63 100644
--- a/_tags
+++ b/_tags
@@ -1,7 +1,7 @@
 # OASIS_START
-# DO NOT EDIT (digest: f0502fd3c6ff8b5694e50e66b791e226)
-# Ignore VCS directories, you can use the same kind of rule outside 
-# OASIS_START/STOP if you want to exclude directories that contains 
+# DO NOT EDIT (digest: 4b49f1f14bdce94b28d4d070178fb914)
+# Ignore VCS directories, you can use the same kind of rule outside
+# OASIS_START/STOP if you want to exclude directories that contains
 # useless stuff for the build process
 <**/.svn>: -traverse
 <**/.svn>: not_hygienic
@@ -21,34 +21,38 @@
 "src/libarchive-ocaml_stubs.a": oasis_library_archive_ocaml_cclib
 "src/dllarchive-ocaml_stubs.so": oasis_library_archive_ocaml_cclib
 <src/archive-ocaml.{cma,cmxa}>: use_libarchive-ocaml_stubs
-"src/Archive_stub.c": pkg_unix
+"src/Archive_stub.c": pkg_bigarray
 "src/Archive_stub.c": pkg_fileutils
+"src/Archive_stub.c": pkg_unix
 # Library archive-lwt
 "src/archive-lwt.cmxs": use_archive-lwt
-<src/*.ml{,i}>: use_archive-ocaml
+<src/*.ml{,i}>: pkg_bigarray
+<src/*.ml{,i}>: pkg_fileutils
 <src/*.ml{,i}>: pkg_lwt
 <src/*.ml{,i}>: pkg_lwt.preemptive
 <src/*.ml{,i}>: pkg_threads
 <src/*.ml{,i}>: pkg_unix
-<src/*.ml{,i}>: pkg_fileutils
+<src/*.ml{,i}>: use_archive-ocaml
 # Executable test
-"test/test.byte": use_archive-lwt
-"test/test.byte": use_archive-ocaml
-"test/test.byte": pkg_oUnit
+"test/test.byte": pkg_bigarray
 "test/test.byte": pkg_extlib
+"test/test.byte": pkg_fileutils
 "test/test.byte": pkg_lwt
 "test/test.byte": pkg_lwt.preemptive
+"test/test.byte": pkg_oUnit
 "test/test.byte": pkg_threads
 "test/test.byte": pkg_unix
-"test/test.byte": pkg_fileutils
-<test/*.ml{,i}>: use_archive-lwt
-<test/*.ml{,i}>: use_archive-ocaml
-<test/*.ml{,i}>: pkg_oUnit
+"test/test.byte": use_archive-lwt
+"test/test.byte": use_archive-ocaml
+<test/*.ml{,i}>: pkg_bigarray
 <test/*.ml{,i}>: pkg_extlib
+<test/*.ml{,i}>: pkg_fileutils
 <test/*.ml{,i}>: pkg_lwt
 <test/*.ml{,i}>: pkg_lwt.preemptive
+<test/*.ml{,i}>: pkg_oUnit
 <test/*.ml{,i}>: pkg_threads
 <test/*.ml{,i}>: pkg_unix
-<test/*.ml{,i}>: pkg_fileutils
+<test/*.ml{,i}>: use_archive-lwt
+<test/*.ml{,i}>: use_archive-ocaml
 "test/test.byte": custom
 # OASIS_STOP
diff --git a/configure b/configure
index 97ed012..6acfaeb 100755
--- a/configure
+++ b/configure
@@ -1,11 +1,11 @@
 #!/bin/sh
 
 # OASIS_START
-# DO NOT EDIT (digest: 425187ed8bfdbdd207fd76392dd243a7)
+# DO NOT EDIT (digest: dc86c2ad450f91ca10c931b6045d0499)
 set -e
 
 FST=true
-for i in "$@"; do 
+for i in "$@"; do
   if $FST; then
     set --
     FST=false
diff --git a/myocamlbuild.ml b/myocamlbuild.ml
index 7d8212a..f28aa0c 100644
--- a/myocamlbuild.ml
+++ b/myocamlbuild.ml
@@ -1,39 +1,50 @@
 (* OASIS_START *)
-(* DO NOT EDIT (digest: 5a671940341e8d6ffdb5bef3250bbcfc) *)
+(* DO NOT EDIT (digest: d51121f3cff8be9ee1fc105497060b56) *)
 module OASISGettext = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISGettext.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISGettext.ml"
+  
+  
   let ns_ str =
     str
-
+  
+  
   let s_ str =
     str
-
-  let f_ (str : ('a, 'b, 'c, 'd) format4) =
+  
+  
+  let f_ (str: ('a, 'b, 'c, 'd) format4) =
     str
-
+  
+  
   let fn_ fmt1 fmt2 n =
     if n = 1 then
       fmt1^^""
     else
       fmt2^^""
-
+  
+  
   let init =
     []
-
+  
+  
 end
 
 module OASISExpr = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISExpr.ml"
-
-
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISExpr.ml"
+  
+  
+  
+  
+  
   open OASISGettext
-
+  
+  
   type test = string 
-
+  
+  
   type flag = string 
-
+  
+  
   type t =
     | EBool of bool
     | ENot of t
@@ -42,31 +53,33 @@ module OASISExpr = struct
     | EFlag of flag
     | ETest of test * string
     
-
+  
+  
   type 'a choices = (t * 'a) list 
-
+  
+  
   let eval var_get t =
     let rec eval' =
       function
         | EBool b ->
             b
-
+  
         | ENot e ->
             not (eval' e)
-
+  
         | EAnd (e1, e2) ->
             (eval' e1) && (eval' e2)
-
+  
         | EOr (e1, e2) ->
             (eval' e1) || (eval' e2)
-
+  
         | EFlag nm ->
             let v =
               var_get nm
             in
               assert(v = "true" || v = "false");
               (v = "true")
-
+  
         | ETest (nm, vl) ->
             let v =
               var_get nm
@@ -74,7 +87,8 @@ module OASISExpr = struct
               (v = vl)
     in
       eval' t
-
+  
+  
   let choose ?printer ?name var_get lst =
     let rec choose_aux =
       function
@@ -110,23 +124,28 @@ module OASISExpr = struct
                          str_lst)
     in
       choose_aux (List.rev lst)
-
+  
+  
 end
 
 
-# 117 "myocamlbuild.ml"
+# 132 "myocamlbuild.ml"
 module BaseEnvLight = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseEnvLight.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseEnvLight.ml"
+  
+  
   module MapString = Map.Make(String)
-
+  
+  
   type t = string MapString.t
-
+  
+  
   let default_filename =
     Filename.concat
       (Sys.getcwd ())
       "setup.data"
-
+  
+  
   let load ?(allow_empty=false) ?(filename=default_filename) () =
     if Sys.file_exists filename then
       begin
@@ -183,28 +202,31 @@ module BaseEnvLight = struct
              "Unable to load environment, the file '%s' doesn't exist."
              filename)
       end
-
-  let var_get name env =
-    let rec var_expand str =
-      let buff =
-        Buffer.create ((String.length str) * 2)
-      in
-        Buffer.add_substitute
-          buff
-          (fun var ->
-             try
-               var_expand (MapString.find var env)
-             with Not_found ->
-               failwith
-                 (Printf.sprintf
-                    "No variable %s defined when trying to expand %S."
-                    var
-                    str))
-          str;
-        Buffer.contents buff
+  
+  
+  let rec var_expand str env =
+    let buff =
+      Buffer.create ((String.length str) * 2)
     in
-      var_expand (MapString.find name env)
-
+      Buffer.add_substitute
+        buff
+        (fun var ->
+           try
+             var_expand (MapString.find var env) env
+           with Not_found ->
+             failwith
+               (Printf.sprintf
+                  "No variable %s defined when trying to expand %S."
+                  var
+                  str))
+        str;
+      Buffer.contents buff
+  
+  
+  let var_get name env =
+    var_expand (MapString.find name env) env
+  
+  
   let var_choose lst env =
     OASISExpr.choose
       (fun nm -> var_get nm env)
@@ -212,172 +234,236 @@ module BaseEnvLight = struct
 end
 
 
-# 215 "myocamlbuild.ml"
+# 237 "myocamlbuild.ml"
 module MyOCamlbuildFindlib = struct
-# 21 "/home/gildor/programmation/oasis/src/plugins/ocamlbuild/MyOCamlbuildFindlib.ml"
-
-  (** OCamlbuild extension, copied from 
+# 22 "/tmp/SBo/oasis-0.4.2/src/plugins/ocamlbuild/MyOCamlbuildFindlib.ml"
+  
+  
+  (** OCamlbuild extension, copied from
     * http://brion.inria.fr/gallium/index.php/Using_ocamlfind_with_ocamlbuild
     * by N. Pouillard and others
     *
     * Updated on 2009/02/28
     *
-    * Modified by Sylvain Le Gall 
+    * Modified by Sylvain Le Gall
     *)
   open Ocamlbuild_plugin
-
+  
+  
   (* these functions are not really officially exported *)
-  let run_and_read = 
+  let run_and_read =
     Ocamlbuild_pack.My_unix.run_and_read
-
-  let blank_sep_strings = 
+  
+  
+  let blank_sep_strings =
     Ocamlbuild_pack.Lexers.blank_sep_strings
-
+  
+  
   let split s ch =
     let buf = Buffer.create 13 in
     let x = ref [] in
-    let flush () = 
+    let flush () =
       x := (Buffer.contents buf) :: !x;
       Buffer.clear buf
     in
-      String.iter 
+      String.iter
         (fun c ->
-           if c = ch then 
+           if c = ch then
              flush ()
            else
              Buffer.add_char buf c)
         s;
       flush ();
       List.rev !x
-
+  
+  
   let split_nl s = split s '\n'
-
+  
+  
   let before_space s =
     try
       String.before s (String.index s ' ')
     with Not_found -> s
-
-  (* this lists all supported packages *)
+  
+  (* ocamlfind command *)
+  let ocamlfind x =
+    let ocamlfind_prog =
+      let env_filename = Pathname.basename BaseEnvLight.default_filename in
+      let env = BaseEnvLight.load ~filename:env_filename ~allow_empty:true () in
+      try
+        BaseEnvLight.var_get "ocamlfind" env
+      with Not_found ->
+        Printf.eprintf "W: Cannot get variable ocamlfind";
+        "ocamlfind"
+    in
+      S[Sh ocamlfind_prog; x]
+  
+  (* This lists all supported packages. *)
   let find_packages () =
     List.map before_space (split_nl & run_and_read "ocamlfind list")
-
-  (* this is supposed to list available syntaxes, but I don't know how to do it. *)
+  
+  
+  (* Mock to list available syntaxes. *)
   let find_syntaxes () = ["camlp4o"; "camlp4r"]
-
-  (* ocamlfind command *)
-  let ocamlfind x = S[A"ocamlfind"; x]
-
+  
+  
+  let well_known_syntax = [
+    "camlp4.quotations.o";
+    "camlp4.quotations.r";
+    "camlp4.exceptiontracer";
+    "camlp4.extend";
+    "camlp4.foldgenerator";
+    "camlp4.listcomprehension";
+    "camlp4.locationstripper";
+    "camlp4.macro";
+    "camlp4.mapgenerator";
+    "camlp4.metagenerator";
+    "camlp4.profiler";
+    "camlp4.tracer"
+  ]
+  
+  
   let dispatch =
     function
       | Before_options ->
-          (* by using Before_options one let command line options have an higher priority *)
-          (* on the contrary using After_options will guarantee to have the higher priority *)
-          (* override default commands by ocamlfind ones *)
+          (* By using Before_options one let command line options have an higher
+           * priority on the contrary using After_options will guarantee to have
+           * the higher priority override default commands by ocamlfind ones *)
           Options.ocamlc     := ocamlfind & A"ocamlc";
           Options.ocamlopt   := ocamlfind & A"ocamlopt";
           Options.ocamldep   := ocamlfind & A"ocamldep";
           Options.ocamldoc   := ocamlfind & A"ocamldoc";
-          Options.ocamlmktop := ocamlfind & A"ocamlmktop"
-                                  
+          Options.ocamlmktop := ocamlfind & A"ocamlmktop";
+          Options.ocamlmklib := ocamlfind & A"ocamlmklib"
+  
       | After_rules ->
-          
-          (* When one link an OCaml library/binary/package, one should use -linkpkg *)
+  
+          (* When one link an OCaml library/binary/package, one should use
+           * -linkpkg *)
           flag ["ocaml"; "link"; "program"] & A"-linkpkg";
-          
+  
           (* For each ocamlfind package one inject the -package option when
            * compiling, computing dependencies, generating documentation and
            * linking. *)
-          List.iter 
+          List.iter
             begin fun pkg ->
-              flag ["ocaml"; "compile";  "pkg_"^pkg] & S[A"-package"; A pkg];
-              flag ["ocaml"; "ocamldep"; "pkg_"^pkg] & S[A"-package"; A pkg];
-              flag ["ocaml"; "doc";      "pkg_"^pkg] & S[A"-package"; A pkg];
-              flag ["ocaml"; "link";     "pkg_"^pkg] & S[A"-package"; A pkg];
-              flag ["ocaml"; "infer_interface"; "pkg_"^pkg] & S[A"-package"; A pkg];
-            end 
+              let base_args = [A"-package"; A pkg] in
+              (* TODO: consider how to really choose camlp4o or camlp4r. *)
+              let syn_args = [A"-syntax"; A "camlp4o"] in
+              let args =
+              (* Heuristic to identify syntax extensions: whether they end in
+                 ".syntax"; some might not.
+               *)
+                if Filename.check_suffix pkg "syntax" ||
+                   List.mem pkg well_known_syntax then
+                  syn_args @ base_args
+                else
+                  base_args
+              in
+              flag ["ocaml"; "compile";  "pkg_"^pkg] & S args;
+              flag ["ocaml"; "ocamldep"; "pkg_"^pkg] & S args;
+              flag ["ocaml"; "doc";      "pkg_"^pkg] & S args;
+              flag ["ocaml"; "link";     "pkg_"^pkg] & S base_args;
+              flag ["ocaml"; "infer_interface"; "pkg_"^pkg] & S args;
+            end
             (find_packages ());
-
+  
           (* Like -package but for extensions syntax. Morover -syntax is useless
            * when linking. *)
           List.iter begin fun syntax ->
           flag ["ocaml"; "compile";  "syntax_"^syntax] & S[A"-syntax"; A syntax];
           flag ["ocaml"; "ocamldep"; "syntax_"^syntax] & S[A"-syntax"; A syntax];
           flag ["ocaml"; "doc";      "syntax_"^syntax] & S[A"-syntax"; A syntax];
-          flag ["ocaml"; "infer_interface"; "syntax_"^syntax] & S[A"-syntax"; A syntax];
+          flag ["ocaml"; "infer_interface"; "syntax_"^syntax] &
+                S[A"-syntax"; A syntax];
           end (find_syntaxes ());
-
+  
           (* The default "thread" tag is not compatible with ocamlfind.
            * Indeed, the default rules add the "threads.cma" or "threads.cmxa"
            * options when using this tag. When using the "-linkpkg" option with
            * ocamlfind, this module will then be added twice on the command line.
-           *                        
+           *
            * To solve this, one approach is to add the "-thread" option when using
            * the "threads" package using the previous plugin.
            *)
           flag ["ocaml"; "pkg_threads"; "compile"] (S[A "-thread"]);
           flag ["ocaml"; "pkg_threads"; "doc"] (S[A "-I"; A "+threads"]);
           flag ["ocaml"; "pkg_threads"; "link"] (S[A "-thread"]);
-          flag ["ocaml"; "pkg_threads"; "infer_interface"] (S[A "-thread"])
-
-      | _ -> 
+          flag ["ocaml"; "pkg_threads"; "infer_interface"] (S[A "-thread"]);
+          flag ["ocaml"; "package(threads)"; "compile"] (S[A "-thread"]);
+          flag ["ocaml"; "package(threads)"; "doc"] (S[A "-I"; A "+threads"]);
+          flag ["ocaml"; "package(threads)"; "link"] (S[A "-thread"]);
+          flag ["ocaml"; "package(threads)"; "infer_interface"] (S[A "-thread"]);
+  
+      | _ ->
           ()
-
 end
 
 module MyOCamlbuildBase = struct
-# 21 "/home/gildor/programmation/oasis/src/plugins/ocamlbuild/MyOCamlbuildBase.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/plugins/ocamlbuild/MyOCamlbuildBase.ml"
+  
+  
   (** Base functions for writing myocamlbuild.ml
       @author Sylvain Le Gall
     *)
-
-
-
+  
+  
+  
+  
+  
   open Ocamlbuild_plugin
   module OC = Ocamlbuild_pack.Ocaml_compiler
-
+  
+  
   type dir = string 
   type file = string 
   type name = string 
   type tag = string 
-
-# 56 "/home/gildor/programmation/oasis/src/plugins/ocamlbuild/MyOCamlbuildBase.ml"
-
+  
+  
+# 62 "/tmp/SBo/oasis-0.4.2/src/plugins/ocamlbuild/MyOCamlbuildBase.ml"
+  
+  
   type t =
       {
-        lib_ocaml: (name * dir list) list;
-        lib_c:     (name * dir * file list) list; 
+        lib_ocaml: (name * dir list * string list) list;
+        lib_c:     (name * dir * file list) list;
         flags:     (tag list * (spec OASISExpr.choices)) list;
         (* Replace the 'dir: include' from _tags by a precise interdepends in
          * directory.
          *)
-        includes:  (dir * dir list) list; 
+        includes:  (dir * dir list) list;
       } 
-
+  
+  
   let env_filename =
-    Pathname.basename 
+    Pathname.basename
       BaseEnvLight.default_filename
-
+  
+  
   let dispatch_combine lst =
     fun e ->
-      List.iter 
+      List.iter
         (fun dispatch -> dispatch e)
-        lst 
-
+        lst
+  
+  
   let tag_libstubs nm =
     "use_lib"^nm^"_stubs"
-
+  
+  
   let nm_libstubs nm =
     nm^"_stubs"
-
-  let dispatch t e = 
-    let env = 
-      BaseEnvLight.load 
-        ~filename:env_filename 
+  
+  
+  let dispatch t e =
+    let env =
+      BaseEnvLight.load
+        ~filename:env_filename
         ~allow_empty:true
         ()
     in
-      match e with 
+      match e with
         | Before_options ->
             let no_trailing_dot s =
               if String.length s >= 1 && s.[0] = '.' then
@@ -387,7 +473,7 @@ module MyOCamlbuildBase = struct
             in
               List.iter
                 (fun (opt, var) ->
-                   try 
+                   try
                      opt := no_trailing_dot (BaseEnvLight.var_get var env)
                    with Not_found ->
                      Printf.eprintf "W: Cannot get variable %s" var)
@@ -396,30 +482,39 @@ module MyOCamlbuildBase = struct
                   Options.ext_lib, "ext_lib";
                   Options.ext_dll, "ext_dll";
                 ]
-
-        | After_rules -> 
+  
+        | After_rules ->
             (* Declare OCaml libraries *)
-            List.iter 
+            List.iter
               (function
-                 | nm, [] ->
-                     ocaml_lib nm
-                 | nm, dir :: tl ->
+                 | nm, [], intf_modules ->
+                     ocaml_lib nm;
+                     let cmis =
+                       List.map (fun m -> (String.uncapitalize m) ^ ".cmi")
+                                intf_modules in
+                     dep ["ocaml"; "link"; "library"; "file:"^nm^".cma"] cmis
+                 | nm, dir :: tl, intf_modules ->
                      ocaml_lib ~dir:dir (dir^"/"^nm);
-                     List.iter 
-                       (fun dir -> 
+                     List.iter
+                       (fun dir ->
                           List.iter
                             (fun str ->
                                flag ["ocaml"; "use_"^nm; str] (S[A"-I"; P dir]))
                             ["compile"; "infer_interface"; "doc"])
-                       tl)
+                       tl;
+                     let cmis =
+                       List.map (fun m -> dir^"/"^(String.uncapitalize m)^".cmi")
+                                intf_modules in
+                     dep ["ocaml"; "link"; "library"; "file:"^dir^"/"^nm^".cma"]
+                         cmis)
               t.lib_ocaml;
-
+  
             (* Declare directories dependencies, replace "include" in _tags. *)
-            List.iter 
+            List.iter
               (fun (dir, include_dirs) ->
                  Pathname.define_context dir include_dirs)
               t.includes;
-
+  
             (* Declare C libraries *)
             List.iter
               (fun (lib, dir, headers) ->
@@ -427,60 +522,66 @@ module MyOCamlbuildBase = struct
                    flag ["link"; "library"; "ocaml"; "byte"; tag_libstubs lib]
                      (S[A"-dllib"; A("-l"^(nm_libstubs lib)); A"-cclib";
                         A("-l"^(nm_libstubs lib))]);
-
+  
                    flag ["link"; "library"; "ocaml"; "native"; tag_libstubs lib]
                      (S[A"-cclib"; A("-l"^(nm_libstubs lib))]);
-                        
+  
                    flag ["link"; "program"; "ocaml"; "byte"; tag_libstubs lib]
                      (S[A"-dllib"; A("dll"^(nm_libstubs lib))]);
-
+  
                    (* When ocaml link something that use the C library, then one
                       need that file to be up to date.
                     *)
                    dep ["link"; "ocaml"; "program"; tag_libstubs lib]
                      [dir/"lib"^(nm_libstubs lib)^"."^(!Options.ext_lib)];
-
+  
                    dep  ["compile"; "ocaml"; "program"; tag_libstubs lib]
                      [dir/"lib"^(nm_libstubs lib)^"."^(!Options.ext_lib)];
-
+  
                    (* TODO: be more specific about what depends on headers *)
                    (* Depends on .h files *)
-                   dep ["compile"; "c"] 
+                   dep ["compile"; "c"]
                      headers;
-
+  
                    (* Setup search path for lib *)
-                   flag ["link"; "ocaml"; "use_"^lib] 
+                   flag ["link"; "ocaml"; "use_"^lib]
                      (S[A"-I"; P(dir)]);
               )
               t.lib_c;
-
+  
               (* Add flags *)
               List.iter
               (fun (tags, cond_specs) ->
-                 let spec = 
-                   BaseEnvLight.var_choose cond_specs env
+                 let spec = BaseEnvLight.var_choose cond_specs env in
+                 let rec eval_specs =
+                   function
+                     | S lst -> S (List.map eval_specs lst)
+                     | A str -> A (BaseEnvLight.var_expand str env)
+                     | spec -> spec
                  in
-                   flag tags & spec)
+                   flag tags & (eval_specs spec))
               t.flags
-        | _ -> 
+        | _ ->
             ()
-
+  
+  
   let dispatch_default t =
-    dispatch_combine 
+    dispatch_combine
       [
         dispatch t;
         MyOCamlbuildFindlib.dispatch;
       ]
-
+  
+  
 end
 
 
-# 478 "myocamlbuild.ml"
+# 579 "myocamlbuild.ml"
 open Ocamlbuild_plugin;;
 let package_default =
   {
      MyOCamlbuildBase.lib_ocaml =
-       [("archive-ocaml", ["src"]); ("archive-lwt", ["src"])];
+       [("archive-ocaml", ["src"], []); ("archive-lwt", ["src"], [])];
      lib_c = [("archive-ocaml", "src", [])];
      flags =
        [
@@ -489,12 +590,12 @@ let package_default =
           (["oasis_library_archive_ocaml_cclib"; "ocamlmklib"; "c"],
             [(OASISExpr.EBool true, S [A "-larchive"])])
        ];
-     includes = [("test", ["src"])];
-     }
+     includes = [("test", ["src"])]
+  }
   ;;
 
 let dispatch_default = MyOCamlbuildBase.dispatch_default package_default;;
 
-# 499 "myocamlbuild.ml"
+# 600 "myocamlbuild.ml"
 (* OASIS_STOP *)
 Ocamlbuild_plugin.dispatch dispatch_default;;
diff --git a/setup.ml b/setup.ml
index 9f87d52..d4af708 100644
--- a/setup.ml
+++ b/setup.ml
@@ -1,48 +1,58 @@
 (* setup.ml generated for the first time by OASIS v0.2.0 *)
 
 (* OASIS_START *)
-(* DO NOT EDIT (digest: 1da55fa17e273d847cd31a6ef7b975e5) *)
+(* DO NOT EDIT (digest: 0bb97c9517ed788645d5696e49a91c38) *)
 (*
-   Regenerated by OASIS v0.3.1
+   Regenerated by OASIS v0.4.2
    Visit http://oasis.forge.ocamlcore.org for more information and
    documentation about functions used in this file.
 *)
 module OASISGettext = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISGettext.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISGettext.ml"
+  
+  
   let ns_ str =
     str
-
+  
+  
   let s_ str =
     str
-
-  let f_ (str : ('a, 'b, 'c, 'd) format4) =
+  
+  
+  let f_ (str: ('a, 'b, 'c, 'd) format4) =
     str
-
+  
+  
   let fn_ fmt1 fmt2 n =
     if n = 1 then
       fmt1^^""
     else
       fmt2^^""
-
+  
+  
   let init =
     []
-
+  
+  
 end
 
 module OASISContext = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISContext.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISContext.ml"
+  
+  
   open OASISGettext
-
+  
+  
   type level =
     [ `Debug
     | `Info
     | `Warning
     | `Error]
-
+  
+  
   type t =
     {
+      (* TODO: replace this by a proplist. *)
       quiet:                 bool;
       info:                  bool;
       debug:                 bool;
@@ -50,7 +60,8 @@ module OASISContext = struct
       ignore_unknown_fields: bool;
       printf:                level -> string -> unit;
     }
-
+  
+  
   let printf lvl str =
     let beg =
       match lvl with
@@ -60,7 +71,8 @@ module OASISContext = struct
         | `Debug -> s_ "D: "
     in
       prerr_endline (beg^str)
-
+  
+  
   let default =
     ref
       {
@@ -71,38 +83,51 @@ module OASISContext = struct
         ignore_unknown_fields = false;
         printf                = printf;
       }
-
+  
+  
   let quiet =
     {!default with quiet = true}
-
-
-  let args () =
+  
+  
+  let fspecs () =
+    (* TODO: don't act on default. *)
+    let ignore_plugins = ref false in
     ["-quiet",
      Arg.Unit (fun () -> default := {!default with quiet = true}),
-     (s_ " Run quietly");
-
+     s_ " Run quietly";
+  
      "-info",
      Arg.Unit (fun () -> default := {!default with info = true}),
-     (s_ " Display information message");
-
-
+     s_ " Display information message";
+  
+  
      "-debug",
      Arg.Unit (fun () -> default := {!default with debug = true}),
-     (s_ " Output debug message")]
+     s_ " Output debug message";
+  
+     "-ignore-plugins",
+     Arg.Set ignore_plugins,
+     s_ " Ignore plugin's field.";
+  
+     "-C",
+     (* TODO: remove this chdir. *)
+     Arg.String (fun str -> Sys.chdir str),
+     s_ "dir Change directory before running."],
+    fun () -> {!default with ignore_plugins = !ignore_plugins}
 end
 
 module OASISString = struct
-# 1 "/home/gildor/programmation/oasis/src/oasis/OASISString.ml"
-
-
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISString.ml"
+  
+  
   (** Various string utilities.
-     
+  
       Mostly inspired by extlib and batteries ExtString and BatString libraries.
-
+  
       @author Sylvain Le Gall
     *)
-
+  
+  
   let nsplitf str f =
     if str = "" then
       []
@@ -122,17 +147,19 @@ module OASISString = struct
         done;
         push ();
         List.rev !lst
-
+  
+  
   (** [nsplit c s] Split the string [s] at char [c]. It doesn't include the
       separator.
     *)
   let nsplit str c =
     nsplitf str ((=) c)
-
+  
+  
   let find ~what ?(offset=0) str =
     let what_idx = ref 0 in
-    let str_idx = ref offset in 
-      while !str_idx < String.length str && 
+    let str_idx = ref offset in
+      while !str_idx < String.length str &&
             !what_idx < String.length what do
         if str.[!str_idx] = what.[!what_idx] then
           incr what_idx
@@ -142,29 +169,32 @@ module OASISString = struct
       done;
       if !what_idx <> String.length what then
         raise Not_found
-      else 
+      else
         !str_idx - !what_idx
-
-  let sub_start str len = 
+  
+  
+  let sub_start str len =
     let str_len = String.length str in
     if len >= str_len then
       ""
     else
       String.sub str len (str_len - len)
-
+  
+  
   let sub_end ?(offset=0) str len =
     let str_len = String.length str in
     if len >= str_len then
       ""
     else
       String.sub str 0 (str_len - len)
-
+  
+  
   let starts_with ~what ?(offset=0) str =
     let what_idx = ref 0 in
     let str_idx = ref offset in
     let ok = ref true in
       while !ok &&
-            !str_idx < String.length str && 
+            !str_idx < String.length str &&
             !what_idx < String.length what do
         if str.[!str_idx] = what.[!what_idx] then
           incr what_idx
@@ -174,21 +204,23 @@ module OASISString = struct
       done;
       if !what_idx = String.length what then
         true
-      else 
+      else
         false
-
+  
+  
   let strip_starts_with ~what str =
     if starts_with ~what str then
       sub_start str (String.length what)
     else
       raise Not_found
-
+  
+  
   let ends_with ~what ?(offset=0) str =
     let what_idx = ref ((String.length what) - 1) in
     let str_idx = ref ((String.length str) - 1) in
     let ok = ref true in
       while !ok &&
-            offset <= !str_idx && 
+            offset <= !str_idx &&
             0 <= !what_idx do
         if str.[!str_idx] = what.[!what_idx] then
           decr what_idx
@@ -198,65 +230,83 @@ module OASISString = struct
       done;
       if !what_idx = -1 then
         true
-      else 
+      else
         false
-
+  
+  
   let strip_ends_with ~what str =
     if ends_with ~what str then
       sub_end str (String.length what)
     else
       raise Not_found
-
+  
+  
   let replace_chars f s =
     let buf = String.make (String.length s) 'X' in
       for i = 0 to String.length s - 1 do
         buf.[i] <- f s.[i]
       done;
       buf
-
+  
+  
 end
 
 module OASISUtils = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISUtils.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISUtils.ml"
+  
+  
   open OASISGettext
-
+  
+  
   module MapString = Map.Make(String)
-
+  
+  
   let map_string_of_assoc assoc =
     List.fold_left
       (fun acc (k, v) -> MapString.add k v acc)
       MapString.empty
       assoc
-
+  
+  
   module SetString = Set.Make(String)
-
+  
+  
   let set_string_add_list st lst =
     List.fold_left
       (fun acc e -> SetString.add e acc)
       st
       lst
-
+  
+  
   let set_string_of_list =
     set_string_add_list
       SetString.empty
-
-
+  
+  
   let compare_csl s1 s2 =
     String.compare (String.lowercase s1) (String.lowercase s2)
-
+  
+  
   module HashStringCsl =
     Hashtbl.Make
       (struct
          type t = string
-
+  
          let equal s1 s2 =
              (String.lowercase s1) = (String.lowercase s2)
-
+  
          let hash s =
            Hashtbl.hash (String.lowercase s)
        end)
-
+  
+  module SetStringCsl =
+    Set.Make
+      (struct
+         type t = string
+         let compare = compare_csl
+       end)
+  
+  
   let varname_of_string ?(hyphen='_') s =
     if String.length s = 0 then
       begin
@@ -286,7 +336,8 @@ module OASISUtils = struct
         in
           String.lowercase buf
       end
-
+  
+  
   let varname_concat ?(hyphen='_') p s =
     let what = String.make 1 hyphen in
     let p =
@@ -302,62 +353,70 @@ module OASISUtils = struct
         s
     in
       p^what^s
-
-
+  
+  
   let is_varname str =
     str = varname_of_string str
-
+  
+  
   let failwithf fmt = Printf.ksprintf failwith fmt
-
+  
+  
 end
 
 module PropList = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/PropList.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/PropList.ml"
+  
+  
   open OASISGettext
-
+  
+  
   type name = string
-
+  
+  
   exception Not_set of name * string option
   exception No_printer of name
   exception Unknown_field of name * name
-
+  
+  
   let () =
     Printexc.register_printer
       (function
          | Not_set (nm, Some rsn) ->
-             Some 
+             Some
                (Printf.sprintf (f_ "Field '%s' is not set: %s") nm rsn)
          | Not_set (nm, None) ->
-             Some 
+             Some
                (Printf.sprintf (f_ "Field '%s' is not set") nm)
          | No_printer nm ->
              Some
                (Printf.sprintf (f_ "No default printer for value %s") nm)
          | Unknown_field (nm, schm) ->
-             Some 
-               (Printf.sprintf (f_ "Field %s is not defined in schema %s") nm schm)
+             Some
+               (Printf.sprintf
+                  (f_ "Field %s is not defined in schema %s") nm schm)
          | _ ->
              None)
-
+  
+  
   module Data =
   struct
-
     type t =
         (name, unit -> unit) Hashtbl.t
-
+  
     let create () =
       Hashtbl.create 13
-
+  
     let clear t =
       Hashtbl.clear t
-
-# 71 "/home/gildor/programmation/oasis/src/oasis/PropList.ml"
+  
+  
+# 78 "/tmp/SBo/oasis-0.4.2/src/oasis/PropList.ml"
   end
-
+  
+  
   module Schema =
   struct
-
     type ('ctxt, 'extra) value =
         {
           get:   Data.t -> string;
@@ -365,7 +424,7 @@ module PropList = struct
           help:  (unit -> string) option;
           extra: 'extra;
         }
-
+  
     type ('ctxt, 'extra) t =
         {
           name:      name;
@@ -373,7 +432,7 @@ module PropList = struct
           order:     name Queue.t;
           name_norm: string -> string;
         }
-
+  
     let create ?(case_insensitive=false) nm =
       {
         name      = nm;
@@ -385,12 +444,12 @@ module PropList = struct
            else
              fun s -> s);
       }
-
+  
     let add t nm set get extra help =
       let key =
         t.name_norm nm
       in
-
+  
         if Hashtbl.mem t.fields key then
           failwith
             (Printf.sprintf
@@ -406,25 +465,25 @@ module PropList = struct
             extra = extra;
           };
         Queue.add nm t.order
-
+  
     let mem t nm =
       Hashtbl.mem t.fields nm
-
+  
     let find t nm =
       try
         Hashtbl.find t.fields (t.name_norm nm)
       with Not_found ->
         raise (Unknown_field (nm, t.name))
-
+  
     let get t data nm =
       (find t nm).get data
-
+  
     let set t data nm ?context x =
       (find t nm).set
         data
         ?context
         x
-
+  
     let fold f acc t =
       Queue.fold
         (fun acc k ->
@@ -434,20 +493,20 @@ module PropList = struct
              f acc k v.extra v.help)
         acc
         t.order
-
+  
     let iter f t =
       fold
         (fun () -> f)
         ()
         t
-
+  
     let name t =
       t.name
   end
-
+  
+  
   module Field =
   struct
-
     type ('ctxt, 'value, 'extra) t =
         {
           set:    Data.t -> ?context:'ctxt -> 'value -> unit;
@@ -457,33 +516,33 @@ module PropList = struct
           help:   (unit -> string) option;
           extra:  'extra;
         }
-
+  
     let new_id =
       let last_id =
         ref 0
       in
         fun () -> incr last_id; !last_id
-
+  
     let create ?schema ?name ?parse ?print ?default ?update ?help extra =
       (* Default value container *)
       let v =
         ref None
       in
-
+  
       (* If name is not given, create unique one *)
       let nm =
         match name with
           | Some s -> s
           | None -> Printf.sprintf "_anon_%d" (new_id ())
       in
-
+  
       (* Last chance to get a value: the default *)
       let default () =
         match default with
           | Some d -> d
           | None -> raise (Not_set (nm, Some (s_ "no default value")))
       in
-
+  
       (* Get data *)
       let get data =
         (* Get value *)
@@ -495,7 +554,7 @@ module PropList = struct
         with Not_found ->
           default ()
       in
-
+  
       (* Set data *)
       let set data ?context x =
         let x =
@@ -515,7 +574,7 @@ module PropList = struct
             nm
             (fun () -> v := Some x)
       in
-
+  
       (* Parse string value, if possible *)
       let parse =
         match parse with
@@ -529,12 +588,12 @@ module PropList = struct
                      nm
                      s)
       in
-
+  
       (* Set data, from string *)
       let sets data ?context s =
         set ?context data (parse ?context s)
       in
-
+  
       (* Output value as string, if possible *)
       let print =
         match print with
@@ -543,12 +602,12 @@ module PropList = struct
           | None ->
               fun _ -> raise (No_printer nm)
       in
-
+  
       (* Get data, as a string *)
       let gets data =
         print (get data)
       in
-
+  
         begin
           match schema with
             | Some t ->
@@ -556,7 +615,7 @@ module PropList = struct
             | None ->
                 ()
         end;
-
+  
         {
           set   = set;
           get   = get;
@@ -565,40 +624,39 @@ module PropList = struct
           help  = help;
           extra = extra;
         }
-
+  
     let fset data t ?context x =
       t.set data ?context x
-
+  
     let fget data t =
       t.get data
-
+  
     let fsets data t ?context s =
       t.sets data ?context s
-
+  
     let fgets data t =
       t.gets data
-
   end
-
+  
+  
   module FieldRO =
   struct
-
     let create ?schema ?name ?parse ?print ?default ?update ?help extra =
       let fld =
         Field.create ?schema ?name ?parse ?print ?default ?update ?help extra
       in
         fun data -> Field.fget data fld
-
   end
 end
 
 module OASISMessage = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISMessage.ml"
-
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISMessage.ml"
+  
+  
   open OASISGettext
   open OASISContext
-
+  
+  
   let generic_message ~ctxt lvl fmt =
     let cond =
       if ctxt.quiet then
@@ -616,32 +674,41 @@ module OASISMessage = struct
                ctxt.printf lvl str
              end)
         fmt
-
+  
+  
   let debug ~ctxt fmt =
     generic_message ~ctxt `Debug fmt
-
+  
+  
   let info ~ctxt fmt =
     generic_message ~ctxt `Info fmt
-
+  
+  
   let warning ~ctxt fmt =
     generic_message ~ctxt `Warning fmt
-
+  
+  
   let error ~ctxt fmt =
     generic_message ~ctxt `Error fmt
-
+  
 end
 
 module OASISVersion = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISVersion.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISVersion.ml"
+  
+  
   open OASISGettext
-
-
-
+  
+  
+  
+  
+  
   type s = string
-
+  
+  
   type t = string 
-
+  
+  
   type comparator =
     | VGreater of t
     | VGreaterEqual of t
@@ -651,19 +718,23 @@ module OASISVersion = struct
     | VOr of  comparator * comparator
     | VAnd of comparator * comparator
     
-
+  
+  
   (* Range of allowed characters *)
   let is_digit c =
     '0' <= c && c <= '9'
-
+  
+  
   let is_alpha c =
     ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z')
-
+  
+  
   let is_special =
     function
       | '.' | '+' | '-' | '~' -> true
       | _ -> false
-
+  
+  
   let rec version_compare v1 v2 =
     if v1 <> "" || v2 <> "" then
       begin
@@ -677,12 +748,12 @@ module OASISVersion = struct
           else if is_alpha c then Char.code c
           else (Char.code c) + 256
         in
-
+  
         let len1 = String.length v1 in
         let len2 = String.length v2 in
-
+  
         let p = ref 0 in
-
+  
         (** Compare ascii part *)
         let compare_vascii () =
           let cmp = ref 0 in
@@ -699,7 +770,7 @@ module OASISVersion = struct
           else
             !cmp
         in
-
+  
         (** Compare digit part *)
         let compare_digit () =
           let extract_int v p =
@@ -707,11 +778,11 @@ module OASISVersion = struct
               while !p < String.length v && is_digit v.[!p] do
                 incr p
               done;
-              let substr = 
+              let substr =
                 String.sub v !p ((String.length v) - !p)
-              in 
-              let res = 
-                match String.sub v start_p (!p - start_p) with 
+              in
+              let res =
+                match String.sub v start_p (!p - start_p) with
                   | "" -> 0
                   | s -> int_of_string s
               in
@@ -721,7 +792,7 @@ module OASISVersion = struct
           let i2, tl2 = extract_int v2 (ref !p) in
             i1 - i2, tl1, tl2
         in
-
+  
           match compare_vascii () with
             | 0 ->
                 begin
@@ -743,12 +814,18 @@ module OASISVersion = struct
       begin
         0
       end
-
-
+  
+  
   let version_of_string str = str
-
+  
+  
   let string_of_version t = t
-
+  
+  
+  let version_compare_string s1 s2 =
+    version_compare (version_of_string s1) (version_of_string s2)
+  
+  
   let chop t =
     try
       let pos =
@@ -757,7 +834,8 @@ module OASISVersion = struct
         String.sub t 0 pos
     with Not_found ->
       t
-
+  
+  
   let rec comparator_apply v op =
     match op with
       | VGreater cv ->
@@ -774,7 +852,8 @@ module OASISVersion = struct
           (comparator_apply v op1) || (comparator_apply v op2)
       | VAnd (op1, op2) ->
           (comparator_apply v op1) && (comparator_apply v op2)
-
+  
+  
   let rec string_of_comparator =
     function
       | VGreater v  -> "> "^(string_of_version v)
@@ -786,7 +865,8 @@ module OASISVersion = struct
           (string_of_comparator c1)^" || "^(string_of_comparator c2)
       | VAnd (c1, c2) ->
           (string_of_comparator c1)^" && "^(string_of_comparator c2)
-
+  
+  
   let rec varname_of_comparator =
     let concat p v =
       OASISUtils.varname_concat
@@ -804,31 +884,47 @@ module OASISVersion = struct
             (varname_of_comparator c1)^"_or_"^(varname_of_comparator c2)
         | VAnd (c1, c2) ->
             (varname_of_comparator c1)^"_and_"^(varname_of_comparator c2)
-
-  let version_0_3_or_after t =
-    comparator_apply t (VGreaterEqual (string_of_version "0.3"))
-
+  
+  
+  let rec comparator_ge v' =
+    let cmp v = version_compare v v' >= 0 in
+    function
+      | VEqual v
+      | VGreaterEqual v
+      | VGreater v -> cmp v
+      | VLesserEqual _
+      | VLesser _ -> false
+      | VOr (c1, c2) -> comparator_ge v' c1 || comparator_ge v' c2
+      | VAnd (c1, c2) -> comparator_ge v' c1 && comparator_ge v' c2
+  
+  
 end
 
 module OASISLicense = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISLicense.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISLicense.ml"
+  
+  
   (** License for _oasis fields
       @author Sylvain Le Gall
     *)
-
-
-
+  
+  
+  
+  
+  
   type license = string 
-
+  
+  
   type license_exception = string 
-
+  
+  
   type license_version =
     | Version of OASISVersion.t
     | VersionOrLater of OASISVersion.t
     | NoVersion
     
-
+  
+  
   type license_dep_5_unit =
     {
       license:   license;
@@ -836,31 +932,38 @@ module OASISLicense = struct
       version:   license_version;
     }
     
-
+  
+  
   type license_dep_5 =
     | DEP5Unit of license_dep_5_unit
     | DEP5Or of license_dep_5 list
     | DEP5And of license_dep_5 list
     
-
+  
   type t =
     | DEP5License of license_dep_5
     | OtherLicense of string (* URL *)
     
-
+  
+  
 end
 
 module OASISExpr = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISExpr.ml"
-
-
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISExpr.ml"
+  
+  
+  
+  
+  
   open OASISGettext
-
+  
+  
   type test = string 
-
+  
+  
   type flag = string 
-
+  
+  
   type t =
     | EBool of bool
     | ENot of t
@@ -869,31 +972,33 @@ module OASISExpr = struct
     | EFlag of flag
     | ETest of test * string
     
-
+  
+  
   type 'a choices = (t * 'a) list 
-
+  
+  
   let eval var_get t =
     let rec eval' =
       function
         | EBool b ->
             b
-
+  
         | ENot e ->
             not (eval' e)
-
+  
         | EAnd (e1, e2) ->
             (eval' e1) && (eval' e2)
-
+  
         | EOr (e1, e2) ->
             (eval' e1) || (eval' e2)
-
+  
         | EFlag nm ->
             let v =
               var_get nm
             in
               assert(v = "true" || v = "false");
               (v = "true")
-
+  
         | ETest (nm, vl) ->
             let v =
               var_get nm
@@ -901,7 +1006,8 @@ module OASISExpr = struct
               (v = vl)
     in
       eval' t
-
+  
+  
   let choose ?printer ?name var_get lst =
     let rec choose_aux =
       function
@@ -937,15 +1043,17 @@ module OASISExpr = struct
                          str_lst)
     in
       choose_aux (List.rev lst)
-
+  
+  
 end
 
 module OASISTypes = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISTypes.ml"
-
-
-
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISTypes.ml"
+  
+  
+  
+  
+  
   type name          = string 
   type package_name  = string 
   type url           = string 
@@ -957,26 +1065,31 @@ module OASISTypes = struct
   type arg           = string 
   type args          = string list 
   type command_line  = (prog * arg list) 
-
+  
+  
   type findlib_name = string 
   type findlib_full = string 
-
+  
+  
   type compiled_object =
     | Byte
     | Native
     | Best
     
-
+  
+  
   type dependency =
     | FindlibPackage of findlib_full * OASISVersion.comparator option
     | InternalLibrary of name
     
-
+  
+  
   type tool =
     | ExternalTool of name
     | InternalExecutable of name
     
-
+  
+  
   type vcs =
     | Darcs
     | Git
@@ -988,7 +1101,8 @@ module OASISTypes = struct
     | Monotone
     | OtherVCS of url
     
-
+  
+  
   type plugin_kind =
       [  `Configure
        | `Build
@@ -997,7 +1111,8 @@ module OASISTypes = struct
        | `Install
        | `Extra
       ]
-
+  
+  
   type plugin_data_purpose =
       [  `Configure
        | `Build
@@ -1011,24 +1126,31 @@ module OASISTypes = struct
        | `Extra
        | `Other of string
       ]
-
+  
+  
   type 'a plugin = 'a * name * OASISVersion.t option 
-
+  
+  
   type all_plugin = plugin_kind plugin
-
+  
+  
   type plugin_data = (all_plugin * plugin_data_purpose * (unit -> unit)) list
-
-# 102 "/home/gildor/programmation/oasis/src/oasis/OASISTypes.ml"
-
+  
+  
+# 115 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISTypes.ml"
+  
+  
   type 'a conditional = 'a OASISExpr.choices 
-
+  
+  
   type custom =
       {
         pre_command:  (command_line option) conditional;
         post_command: (command_line option) conditional;
       }
       
-
+  
+  
   type common_section =
       {
         cs_name: name;
@@ -1036,7 +1158,8 @@ module OASISTypes = struct
         cs_plugin_data: plugin_data;
       }
       
-
+  
+  
   type build_section =
       {
         bs_build:           bool conditional;
@@ -1055,7 +1178,8 @@ module OASISTypes = struct
         bs_nativeopt:       args conditional;
       }
       
-
+  
+  
   type library =
       {
         lib_modules:            string list;
@@ -1065,26 +1189,29 @@ module OASISTypes = struct
         lib_findlib_name:       findlib_name option;
         lib_findlib_containers: findlib_name list;
       } 
-
-
+  
+  
   type object_ =
       {
         obj_modules:            string list;
         obj_findlib_fullname:   findlib_name list option;
       } 
-
+  
+  
   type executable =
       {
         exec_custom:          bool;
         exec_main_is:         unix_filename;
       } 
-
+  
+  
   type flag =
       {
         flag_description:  string option;
         flag_default:      bool conditional;
       } 
-
+  
+  
   type source_repository =
       {
         src_repo_type:        vcs;
@@ -1095,7 +1222,8 @@ module OASISTypes = struct
         src_repo_tag:         string option;
         src_repo_subdir:      unix_filename option;
       } 
-
+  
+  
   type test =
       {
         test_type:               [`Test] plugin;
@@ -1105,7 +1233,8 @@ module OASISTypes = struct
         test_run:                bool conditional;
         test_tools:              tool list;
       } 
-
+  
+  
   type doc_format =
     | HTML of unix_filename
     | DocText
@@ -1115,7 +1244,8 @@ module OASISTypes = struct
     | DVI
     | OtherDoc
     
-
+  
+  
   type doc =
       {
         doc_type:        [`Doc] plugin;
@@ -1130,7 +1260,8 @@ module OASISTypes = struct
         doc_data_files:  (unix_filename * unix_filename option) list;
         doc_build_tools: tool list;
       } 
-
+  
+  
   type section =
     | Library    of common_section * build_section * library
     | Object     of common_section * build_section * object_
@@ -1140,15 +1271,19 @@ module OASISTypes = struct
     | Test       of common_section * test
     | Doc        of common_section * doc
     
-
+  
+  
   type section_kind =
       [ `Library | `Object | `Executable | `Flag | `SrcRepo | `Test | `Doc ]
-
-  type package = 
+  
+  
+  type package =
       {
         oasis_version:    OASISVersion.t;
         ocaml_version:    OASISVersion.comparator option;
         findlib_version:  OASISVersion.comparator option;
+        alpha_features:   string list;
+        beta_features:    string list;
         name:             package_name;
         version:          OASISVersion.t;
         license:          OASISLicense.t;
@@ -1160,45 +1295,374 @@ module OASISTypes = struct
         synopsis:         string;
         description:      string option;
         categories:       url list;
-
+  
         conf_type:        [`Configure] plugin;
         conf_custom:      custom;
-
+  
         build_type:       [`Build] plugin;
         build_custom:     custom;
-
+  
         install_type:     [`Install] plugin;
         install_custom:   custom;
         uninstall_custom: custom;
-
+  
         clean_custom:     custom;
         distclean_custom: custom;
-
+  
         files_ab:         unix_filename list;
         sections:         section list;
         plugins:          [`Extra] plugin list;
         schema_data:      PropList.Data.t;
         plugin_data:      plugin_data;
       } 
+  
+  
+end
 
+module OASISFeatures = struct
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISFeatures.ml"
+  
+  open OASISTypes
+  open OASISUtils
+  open OASISGettext
+  open OASISVersion
+  
+  module MapPlugin =
+    Map.Make
+      (struct
+         type t = plugin_kind * name
+         let compare = Pervasives.compare
+       end)
+  
+  module Data =
+  struct
+    type t =
+        {
+          oasis_version: OASISVersion.t;
+          plugin_versions: OASISVersion.t option MapPlugin.t;
+          alpha_features: string list;
+          beta_features: string list;
+        }
+  
+    let create oasis_version alpha_features beta_features =
+      {
+        oasis_version = oasis_version;
+        plugin_versions = MapPlugin.empty;
+        alpha_features = alpha_features;
+        beta_features = beta_features
+      }
+  
+    let of_package pkg =
+      create
+        pkg.OASISTypes.oasis_version
+        pkg.OASISTypes.alpha_features
+        pkg.OASISTypes.beta_features
+  
+    let add_plugin (plugin_kind, plugin_name, plugin_version) t =
+      {t with
+           plugin_versions = MapPlugin.add
+                               (plugin_kind, plugin_name)
+                               plugin_version
+                               t.plugin_versions}
+  
+    let plugin_version plugin_kind plugin_name t =
+      MapPlugin.find (plugin_kind, plugin_name) t.plugin_versions
+  end
+  
+  type origin =
+    | Field of string * string
+    | Section of string
+    | NoOrigin
+  
+  type stage = Alpha | Beta
+  
+  
+  let string_of_stage =
+    function
+      | Alpha -> "alpha"
+      | Beta -> "beta"
+  
+  
+  let field_of_stage =
+    function
+      | Alpha -> "AlphaFeatures"
+      | Beta -> "BetaFeatures"
+  
+  type publication = InDev of stage | SinceVersion of OASISVersion.t
+  
+  type t =
+      {
+        name: string;
+        plugin: all_plugin option;
+        publication: publication;
+        description: unit -> string;
+      }
+  
+  (* TODO: mutex protect this. *)
+  let all_features = Hashtbl.create 13
+  
+  
+  let since_version ver_str = SinceVersion (version_of_string ver_str)
+  let alpha = InDev Alpha
+  let beta = InDev Beta
+  
+  
+  let data_check t data origin =
+    let no_message = "no message" in
+  
+    let check_feature features stage =
+      let has_feature = List.mem t.name features in
+      if not has_feature then
+        match origin with
+          | Field (fld, where) ->
+              Some
+                (Printf.sprintf
+                   (f_ "Field %s in %s is only available when feature %s \
+                        is in field %s.")
+                   fld where t.name (field_of_stage stage))
+          | Section sct ->
+              Some
+                (Printf.sprintf
+                   (f_ "Section %s is only available when features %s \
+                        is in field %s.")
+                   sct t.name (field_of_stage stage))
+          | NoOrigin ->
+              Some no_message
+      else
+        None
+    in
+  
+    let version_is_good ~min_version version fmt =
+      let version_is_good =
+        OASISVersion.comparator_apply
+          version (OASISVersion.VGreaterEqual min_version)
+      in
+        Printf.ksprintf
+          (fun str ->
+             if version_is_good then
+               None
+             else
+               Some str)
+          fmt
+    in
+  
+    match origin, t.plugin, t.publication with
+      | _, _, InDev Alpha -> check_feature data.Data.alpha_features Alpha
+      | _, _, InDev Beta -> check_feature data.Data.beta_features Beta
+      | Field(fld, where), None, SinceVersion min_version ->
+          version_is_good ~min_version data.Data.oasis_version
+            (f_ "Field %s in %s is only valid since OASIS v%s, update \
+                 OASISFormat field from '%s' to '%s' after checking \
+                 OASIS changelog.")
+            fld where (string_of_version min_version)
+            (string_of_version data.Data.oasis_version)
+            (string_of_version min_version)
+  
+      | Field(fld, where), Some(plugin_knd, plugin_name, _),
+        SinceVersion min_version ->
+          begin
+            try
+              let plugin_version_current =
+                try
+                  match Data.plugin_version plugin_knd plugin_name data with
+                    | Some ver -> ver
+                    | None ->
+                        failwithf
+                          (f_ "Field %s in %s is only valid for the OASIS \
+                               plugin %s since v%s, but no plugin version is \
+                               defined in the _oasis file, change '%s' to \
+                               '%s (%s)' in your _oasis file.")
+                          fld where plugin_name (string_of_version min_version)
+                          plugin_name
+                          plugin_name (string_of_version min_version)
+                with Not_found ->
+                  failwithf
+                    (f_ "Field %s in %s is only valid when the OASIS plugin %s \
+                         is defined.")
+                    fld where plugin_name
+              in
+              version_is_good ~min_version plugin_version_current
+                (f_ "Field %s in %s is only valid for the OASIS plugin %s \
+                     since v%s, update your plugin from '%s (%s)' to \
+                     '%s (%s)' after checking the plugin's changelog.")
+                fld where plugin_name (string_of_version min_version)
+                plugin_name (string_of_version plugin_version_current)
+                plugin_name (string_of_version min_version)
+            with Failure msg ->
+              Some msg
+          end
+  
+      | Section sct, None, SinceVersion min_version ->
+          version_is_good ~min_version data.Data.oasis_version
+            (f_ "Section %s is only valid for since OASIS v%s, update \
+                 OASISFormat field from '%s' to '%s' after checking OASIS \
+                 changelog.")
+            sct (string_of_version min_version)
+            (string_of_version data.Data.oasis_version)
+            (string_of_version min_version)
+  
+      | Section sct, Some(plugin_knd, plugin_name, _),
+        SinceVersion min_version ->
+          begin
+            try
+              let plugin_version_current =
+                try
+                  match Data.plugin_version plugin_knd plugin_name data with
+                    | Some ver -> ver
+                    | None ->
+                        failwithf
+                          (f_ "Section %s is only valid for the OASIS \
+                               plugin %s since v%s, but no plugin version is \
+                               defined in the _oasis file, change '%s' to \
+                               '%s (%s)' in your _oasis file.")
+                          sct plugin_name (string_of_version min_version)
+                          plugin_name
+                          plugin_name (string_of_version min_version)
+                with Not_found ->
+                  failwithf
+                    (f_ "Section %s is only valid when the OASIS plugin %s \
+                         is defined.")
+                    sct plugin_name
+              in
+              version_is_good ~min_version plugin_version_current
+                (f_ "Section %s is only valid for the OASIS plugin %s \
+                     since v%s, update your plugin from '%s (%s)' to \
+                     '%s (%s)' after checking the plugin's changelog.")
+                sct plugin_name (string_of_version min_version)
+                plugin_name (string_of_version plugin_version_current)
+                plugin_name (string_of_version min_version)
+            with Failure msg ->
+              Some msg
+          end
+  
+      | NoOrigin, None, SinceVersion min_version ->
+          version_is_good ~min_version data.Data.oasis_version "%s" no_message
+  
+      | NoOrigin, Some(plugin_knd, plugin_name, _), SinceVersion min_version ->
+          begin
+            try
+              let plugin_version_current =
+                match Data.plugin_version plugin_knd plugin_name data with
+                  | Some ver -> ver
+                  | None -> raise Not_found
+              in
+              version_is_good ~min_version plugin_version_current
+                "%s" no_message
+            with Not_found ->
+              Some no_message
+          end
+  
+  
+  let data_assert t data origin =
+    match data_check t data origin with
+      | None -> ()
+      | Some str -> failwith str
+  
+  
+  let data_test t data =
+    match data_check t data NoOrigin with
+      | None -> true
+      | Some str -> false
+  
+  
+  let package_test t pkg =
+    data_test t (Data.of_package pkg)
+  
+  
+  let create ?plugin name publication description =
+    let () =
+      if Hashtbl.mem all_features name then
+        failwithf "Feature '%s' is already declared." name
+    in
+    let t =
+      {
+        name = name;
+        plugin = plugin;
+        publication = publication;
+        description = description;
+      }
+    in
+      Hashtbl.add all_features name t;
+      t
+  
+  
+  let get_stage name =
+    try
+      (Hashtbl.find all_features name).publication
+    with Not_found ->
+      failwithf (f_ "Feature %s doesn't exist.") name
+  
+  
+  let list () =
+    Hashtbl.fold (fun _ v acc -> v :: acc) all_features []
+  
+  (*
+   * Real flags.
+   *)
+  
+  
+  let features =
+    create "features_fields"
+      (since_version "0.4")
+      (fun () ->
+         s_ "Enable to experiment not yet official features.")
+  
+  
+  let flag_docs =
+    create "flag_docs"
+      (since_version "0.3")
+      (fun () ->
+         s_ "Building docs require '-docs' flag at configure.")
+  
+  
+  let flag_tests =
+    create "flag_tests"
+      (since_version "0.3")
+      (fun () ->
+         s_ "Running tests require '-tests' flag at configure.")
+  
+  
+  let pack =
+    create "pack"
+      (since_version "0.3")
+      (fun () ->
+         s_ "Allow to create packed library.")
+  
+  
+  let section_object =
+    create "section_object" beta
+      (fun () ->
+         s_ "Implement an object section.")
+  
+  
+  let dynrun_for_release =
+    create "dynrun_for_release" alpha
+      (fun () ->
+         s_ "Make '-setup-update dynamic' suitable for releasing project.")
 end
 
 module OASISUnixPath = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISUnixPath.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISUnixPath.ml"
+  
+  
   type unix_filename = string
   type unix_dirname = string
-
+  
+  
   type host_filename = string
   type host_dirname = string
-
+  
+  
   let current_dir_name = "."
-
+  
+  
   let parent_dir_name = ".."
-
+  
+  
   let is_current_dir fn =
     fn = current_dir_name || fn = ""
-
+  
+  
   let concat f1 f2 =
     if is_current_dir f1 then
       f2
@@ -1207,7 +1671,8 @@ module OASISUnixPath = struct
         try OASISString.strip_ends_with ~what:"/" f1 with Not_found -> f1
       in
         f1'^"/"^f2
-
+  
+  
   let make =
     function
       | hd :: tl ->
@@ -1217,13 +1682,15 @@ module OASISUnixPath = struct
             tl
       | [] ->
           invalid_arg "OASISUnixPath.make"
-
+  
+  
   let dirname f =
     try
       String.sub f 0 (String.rindex f '/')
     with Not_found ->
       current_dir_name
-
+  
+  
   let basename f =
     try
       let pos_start =
@@ -1232,7 +1699,8 @@ module OASISUnixPath = struct
         String.sub f pos_start ((String.length f) - pos_start)
     with Not_found ->
       f
-
+  
+  
   let chop_extension f =
     try
       let last_dot =
@@ -1251,37 +1719,43 @@ module OASISUnixPath = struct
               f
         with Not_found ->
           sub
-
+  
     with Not_found ->
       f
-
+  
+  
   let capitalize_file f =
     let dir = dirname f in
     let base = basename f in
     concat dir (String.capitalize base)
-
+  
+  
   let uncapitalize_file f =
     let dir = dirname f in
     let base = basename f in
     concat dir (String.uncapitalize base)
-
+  
+  
 end
 
 module OASISHostPath = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISHostPath.ml"
-
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISHostPath.ml"
+  
+  
   open Filename
-
+  
+  
   module Unix = OASISUnixPath
-
+  
+  
   let make =
     function
       | [] ->
           invalid_arg "OASISHostPath.make"
       | hd :: tl ->
           List.fold_left Filename.concat hd tl
-
+  
+  
   let of_unix ufn =
     if Sys.os_type = "Unix" then
       ufn
@@ -1296,18 +1770,20 @@ module OASISHostPath = struct
               else
                 p)
            (OASISString.nsplit ufn '/'))
-
-
+  
+  
 end
 
 module OASISSection = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISSection.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISSection.ml"
+  
+  
   open OASISTypes
-
-  let section_kind_common = 
+  
+  
+  let section_kind_common =
     function
-      | Library (cs, _, _) -> 
+      | Library (cs, _, _) ->
           `Library, cs
       | Object (cs, _, _) ->
           `Object, cs
@@ -1321,10 +1797,12 @@ module OASISSection = struct
           `Test, cs
       | Doc (cs, _) ->
           `Doc, cs
-
+  
+  
   let section_common sct =
     snd (section_kind_common sct)
-
+  
+  
   let section_common_set cs =
     function
       | Library (_, bs, lib)     -> Library (cs, bs, lib)
@@ -1334,21 +1812,23 @@ module OASISSection = struct
       | SrcRepo (_, src_repo)    -> SrcRepo (cs, src_repo)
       | Test (_, tst)            -> Test (cs, tst)
       | Doc (_, doc)             -> Doc (cs, doc)
-
+  
+  
   (** Key used to identify section
     *)
-  let section_id sct = 
-    let k, cs = 
+  let section_id sct =
+    let k, cs =
       section_kind_common sct
     in
       k, cs.cs_name
-
+  
+  
   let string_of_section sct =
     let k, nm =
       section_id sct
     in
       (match k with
-         | `Library    -> "library" 
+         | `Library    -> "library"
          | `Object     -> "object"
          | `Executable -> "executable"
          | `Flag       -> "flag"
@@ -1356,77 +1836,87 @@ module OASISSection = struct
          | `Test       -> "test"
          | `Doc        -> "doc")
       ^" "^nm
-
+  
+  
   let section_find id scts =
     List.find
       (fun sct -> id = section_id sct)
       scts
-
+  
+  
   module CSection =
   struct
     type t = section
-
+  
     let id = section_id
-
-    let compare t1 t2 = 
+  
+    let compare t1 t2 =
       compare (id t1) (id t2)
-      
+  
     let equal t1 t2 =
       (id t1) = (id t2)
-
+  
     let hash t =
       Hashtbl.hash (id t)
   end
-
+  
+  
   module MapSection = Map.Make(CSection)
   module SetSection = Set.Make(CSection)
-
+  
+  
 end
 
 module OASISBuildSection = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISBuildSection.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISBuildSection.ml"
+  
+  
 end
 
 module OASISExecutable = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISExecutable.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISExecutable.ml"
+  
+  
   open OASISTypes
-
-  let unix_exec_is (cs, bs, exec) is_native ext_dll suffix_program = 
-    let dir = 
+  
+  
+  let unix_exec_is (cs, bs, exec) is_native ext_dll suffix_program =
+    let dir =
       OASISUnixPath.concat
         bs.bs_path
         (OASISUnixPath.dirname exec.exec_main_is)
     in
-    let is_native_exec = 
+    let is_native_exec =
       match bs.bs_compiled_object with
         | Native -> true
         | Best -> is_native ()
         | Byte -> false
     in
-
+  
       OASISUnixPath.concat
         dir
         (cs.cs_name^(suffix_program ())),
-
-      if not is_native_exec && 
-         not exec.exec_custom && 
+  
+      if not is_native_exec &&
+         not exec.exec_custom &&
          bs.bs_c_sources <> [] then
         Some (dir^"/dll"^cs.cs_name^"_stubs"^(ext_dll ()))
       else
         None
-
+  
+  
 end
 
 module OASISLibrary = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISLibrary.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISLibrary.ml"
+  
+  
   open OASISTypes
   open OASISUtils
   open OASISGettext
   open OASISSection
-
+  
+  
   (* Look for a module file, considering capitalization or not. *)
   let find_module source_file_exists bs modul =
     let possible_base_fn =
@@ -1465,7 +1955,8 @@ module OASISLibrary = struct
                  acc)
         (`No_sources possible_base_fn)
         possible_base_fn
-
+  
+  
   let source_unix_files ~ctxt (cs, bs, lib) source_file_exists =
     List.fold_left
       (fun acc modul ->
@@ -1481,7 +1972,8 @@ module OASISLibrary = struct
                acc)
       []
       (lib.lib_modules @ lib.lib_internal_modules)
-
+  
+  
   let generated_unix_files
         ~ctxt
         ~is_native
@@ -1490,28 +1982,33 @@ module OASISLibrary = struct
         ~ext_dll
         ~source_file_exists
         (cs, bs, lib) =
-
-    let find_modules lst ext = 
+  
+    let find_modules lst ext =
       let find_module modul =
         match find_module source_file_exists bs modul with
+          | `Sources (base_fn, [fn]) when ext <> "cmi"
+                                       && Filename.check_suffix fn ".mli" ->
+              None (* No implementation files for pure interface. *)
           | `Sources (base_fn, _) ->
-              [base_fn]
+              Some [base_fn]
           | `No_sources lst ->
               OASISMessage.warning
                 ~ctxt
                 (f_ "Cannot find source file matching \
                      module '%s' in library %s")
                 modul cs.cs_name;
-              lst
+              Some lst
       in
-      List.map 
-        (fun nm -> 
-           List.map 
-             (fun base_fn -> base_fn ^"."^ext)
-             (find_module nm))
+      List.fold_left
+        (fun acc nm ->
+          match find_module nm with
+            | None -> acc
+            | Some base_fns ->
+                List.map (fun base_fn -> base_fn ^"."^ext) base_fns :: acc)
+        []
         lst
     in
-
+  
     (* The headers that should be compiled along *)
     let headers =
       if lib.lib_pack then
@@ -1521,28 +2018,32 @@ module OASISLibrary = struct
           lib.lib_modules
           "cmi"
     in
-
+  
     (* The .cmx that be compiled along *)
     let cmxs =
       let should_be_built =
-        (not lib.lib_pack) && (* Do not install .cmx packed submodules *)
         match bs.bs_compiled_object with
           | Native -> true
           | Best -> is_native
           | Byte -> false
       in
         if should_be_built then
-          find_modules
-            (lib.lib_modules @ lib.lib_internal_modules)
-            "cmx"
+          if lib.lib_pack then
+            find_modules
+              [cs.cs_name]
+              "cmx"
+          else
+            find_modules
+              (lib.lib_modules @ lib.lib_internal_modules)
+              "cmx"
         else
           []
     in
-
+  
     let acc_nopath =
       []
     in
-
+  
     (* Compute what libraries should be built *)
     let acc_nopath =
       (* Add the packed header file if required *)
@@ -1556,7 +2057,7 @@ module OASISLibrary = struct
         add_pack_header ([cs.cs_name^".cma"] :: acc)
       in
       let native acc =
-        let acc = 
+        let acc =
           add_pack_header
             (if has_native_dynlink then
                [cs.cs_name^".cmxs"] :: acc
@@ -1572,7 +2073,7 @@ module OASISLibrary = struct
           | Byte | Best ->
               byte acc_nopath
     in
-
+  
     (* Add C library to be built *)
     let acc_nopath =
       if bs.bs_c_sources <> [] then
@@ -1586,7 +2087,7 @@ module OASISLibrary = struct
       else
         acc_nopath
     in
-
+  
       (* All the files generated *)
       List.rev_append
         (List.rev_map
@@ -1594,15 +2095,18 @@ module OASISLibrary = struct
               (OASISUnixPath.concat bs.bs_path))
            acc_nopath)
         (headers @ cmxs)
-
+  
+  
 end
 
 module OASISObject = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISObject.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISObject.ml"
+  
+  
   open OASISTypes
   open OASISGettext
-
+  
+  
   let source_unix_files ~ctxt (cs, bs, obj) source_file_exists =
     List.fold_left
       (fun acc modul ->
@@ -1618,14 +2122,14 @@ module OASISObject = struct
                acc)
       []
       obj.obj_modules
-
-
+  
+  
   let generated_unix_files
         ~ctxt
         ~is_native
         ~source_file_exists
         (cs, bs, obj) =
-
+  
     let find_module ext modul =
       match OASISLibrary.find_module source_file_exists bs modul with
         | `Sources (base_fn, _) -> [base_fn ^ ext]
@@ -1633,11 +2137,11 @@ module OASISObject = struct
           OASISMessage.warning
             ~ctxt
             (f_ "Cannot find source file matching \
-                     module '%s' in object %s")
+                 module '%s' in object %s")
             modul cs.cs_name ;
           lst
     in
-
+  
     let header, byte, native, c_object, f =
       match obj.obj_modules with
         | [ m ] -> (find_module ".cmi" m,
@@ -1659,25 +2163,29 @@ module OASISObject = struct
               native :: c_object :: byte :: header :: []
           | Byte | Best ->
               byte :: header :: [])
-
+  
+  
 end
 
 module OASISFindlib = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISFindlib.ml"
-
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISFindlib.ml"
+  
+  
   open OASISTypes
   open OASISUtils
   open OASISGettext
   open OASISSection
-
+  
+  
   type library_name = name
   type findlib_part_name = name
   type 'a map_of_findlib_part_name = 'a OASISUtils.MapString.t
-
+  
+  
   exception InternalLibraryNotFound of library_name
   exception FindlibPackageNotFound of findlib_name
-
+  
+  
   type group_t =
     | Container of findlib_name * group_t list
     | Package of (findlib_name *
@@ -1685,14 +2193,16 @@ module OASISFindlib = struct
                   build_section *
                   [`Library of library | `Object of object_] *
                   group_t list)
-
+  
+  
   type data = common_section *
               build_section *
               [`Library of library | `Object of object_]
   type tree =
     | Node of (data option) * (tree MapString.t)
     | Leaf of data
-
+  
+  
   let findlib_mapping pkg =
     (* Map from library name to either full findlib name or parts + parent. *)
     let fndlb_parts_of_lib_name =
@@ -1730,7 +2240,7 @@ module OASISFindlib = struct
                                (`Solved fndlb_parts)
                                mp
                    end
-
+  
                | Object (cs, _, obj) ->
                    begin
                      let obj_name = cs.cs_name in
@@ -1747,13 +2257,13 @@ module OASISFindlib = struct
                        (`Solved findlib_full_name)
                        mp
                    end
-
+  
                | Executable _ | Test _ | Flag _ | SrcRepo _ | Doc _ ->
                    mp)
           MapString.empty
           pkg.sections
     in
-
+  
     (* Solve the above graph to be only library name to full findlib name. *)
     let fndlb_name_of_lib_name =
       let rec solve visited mp lib_name lib_name_child =
@@ -1798,7 +2308,7 @@ module OASISFindlib = struct
              | `Unsolved _ -> assert false)
           mp
     in
-
+  
     (* Convert an internal library name to a findlib name. *)
     let findlib_name_of_library_name lib_nm =
       try
@@ -1806,7 +2316,7 @@ module OASISFindlib = struct
       with Not_found ->
         raise (InternalLibraryNotFound lib_nm)
     in
-
+  
     (* Add a library to the tree.
      *)
     let add sct mp =
@@ -1815,7 +2325,7 @@ module OASISFindlib = struct
         let lib_name = cs.cs_name in
           findlib_name_of_library_name lib_name
       in
-      let rec add_children nm_lst (children : tree MapString.t) =
+      let rec add_children nm_lst (children: tree MapString.t) =
         match nm_lst with
           | (hd :: tl) ->
               begin
@@ -1863,7 +2373,7 @@ module OASISFindlib = struct
       in
         add_children (OASISString.nsplit fndlb_fullname '.') mp
     in
-
+  
     let rec group_of_tree mp =
       MapString.fold
         (fun nm node acc ->
@@ -1879,7 +2389,7 @@ module OASISFindlib = struct
              cur :: acc)
         mp []
     in
-
+  
     let group_mp =
       List.fold_left
         (fun mp ->
@@ -1893,11 +2403,11 @@ module OASISFindlib = struct
         MapString.empty
         pkg.sections
     in
-
+  
     let groups =
       group_of_tree group_mp
     in
-
+  
     let library_name_of_findlib_name =
       Lazy.lazy_from_fun
         (fun () ->
@@ -1913,16 +2423,18 @@ module OASISFindlib = struct
       with Not_found ->
         raise (FindlibPackageNotFound fndlb_nm)
     in
-
+  
       groups,
       findlib_name_of_library_name,
       library_name_of_findlib_name
-
+  
+  
   let findlib_of_group =
     function
       | Container (fndlb_nm, _)
       | Package (fndlb_nm, _, _, _, _) -> fndlb_nm
-
+  
+  
   let root_of_group grp =
     let rec root_lib_aux =
       (* We do a DFS in the group. *)
@@ -1946,41 +2458,49 @@ module OASISFindlib = struct
             failwithf
               (f_ "Unable to determine root library of findlib library '%s'")
               (findlib_of_group grp)
-
+  
+  
 end
 
 module OASISFlag = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISFlag.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISFlag.ml"
+  
+  
 end
 
 module OASISPackage = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISPackage.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISPackage.ml"
+  
+  
 end
 
 module OASISSourceRepository = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISSourceRepository.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISSourceRepository.ml"
+  
+  
 end
 
 module OASISTest = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISTest.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISTest.ml"
+  
+  
 end
 
 module OASISDocument = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISDocument.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISDocument.ml"
+  
+  
 end
 
 module OASISExec = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISExec.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISExec.ml"
+  
+  
   open OASISGettext
   open OASISUtils
   open OASISMessage
-
+  
+  
   (* TODO: I don't like this quote, it is there because $(rm) foo expands to
    * 'rm -f' foo...
    *)
@@ -2010,7 +2530,8 @@ module OASISExec = struct
               cmdline i
         | Some f, i ->
             f i
-
+  
+  
   let run_read_output ~ctxt ?f_exit_code cmd args =
     let fn =
       Filename.temp_file "oasis-" ".txt"
@@ -2041,7 +2562,8 @@ module OASISExec = struct
       with e ->
         (try Sys.remove fn with _ -> ());
         raise e
-
+  
+  
   let run_read_one_line ~ctxt ?f_exit_code cmd args =
     match run_read_output ~ctxt ?f_exit_code cmd args with
       | [fst] ->
@@ -2053,10 +2575,12 @@ module OASISExec = struct
 end
 
 module OASISFileUtil = struct
-# 21 "/home/gildor/programmation/oasis/src/oasis/OASISFileUtil.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/oasis/OASISFileUtil.ml"
+  
+  
   open OASISGettext
-
+  
+  
   let file_exists_case fn =
     let dirname = Filename.dirname fn in
     let basename = Filename.basename fn in
@@ -2069,26 +2593,27 @@ module OASISFileUtil = struct
             (Array.to_list (Sys.readdir dirname))
       else
         false
-
+  
+  
   let find_file ?(case_sensitive=true) paths exts =
-
+  
     (* Cardinal product of two list *)
     let ( * ) lst1 lst2 =
       List.flatten
         (List.map
            (fun a ->
               List.map
-                (fun b -> a,b)
+                (fun b -> a, b)
                 lst2)
            lst1)
     in
-
+  
     let rec combined_paths lst =
       match lst with
         | p1 :: p2 :: tl ->
             let acc =
               (List.map
-                 (fun (a,b) -> Filename.concat a b)
+                 (fun (a, b) -> Filename.concat a b)
                  (p1 * p2))
             in
               combined_paths (acc :: tl)
@@ -2097,23 +2622,25 @@ module OASISFileUtil = struct
         | [] ->
             []
     in
-
+  
     let alternatives =
       List.map
-        (fun (p,e) ->
+        (fun (p, e) ->
            if String.length e > 0 && e.[0] <> '.' then
              p ^ "." ^ e
            else
              p ^ e)
         ((combined_paths paths) * exts)
     in
-      List.find
+      List.find (fun file ->
         (if case_sensitive then
-           file_exists_case
+           file_exists_case file
          else
-           Sys.file_exists)
-        alternatives
-
+           Sys.file_exists file)
+        && not (Sys.is_directory file)
+      ) alternatives
+  
+  
   let which ~ctxt prg =
     let path_sep =
       match Sys.os_type with
@@ -2131,7 +2658,8 @@ module OASISFileUtil = struct
             [""]
     in
       find_file ~case_sensitive:false [path_lst; [prg]] exec_ext
-
+  
+  
   (**/**)
   let rec fix_dir dn =
     (* Windows hack because Sys.file_exists "src\\" = false when
@@ -2144,10 +2672,12 @@ module OASISFileUtil = struct
         fix_dir (String.sub dn 0 (ln - 1))
       else
         dn
-
+  
+  
   let q = Filename.quote
   (**/**)
-
+  
+  
   let cp ~ctxt ?(recurse=false) src tgt =
     if recurse then
       match Sys.os_type with
@@ -2163,14 +2693,16 @@ module OASISFileUtil = struct
          | "Win32" -> "copy"
          | _ -> "cp")
         [q src; q tgt]
-
+  
+  
   let mkdir ~ctxt tgt =
     OASISExec.run ~ctxt
       (match Sys.os_type with
          | "Win32" -> "md"
          | _ -> "mkdir")
       [q tgt]
-
+  
+  
   let rec mkdir_parent ~ctxt f tgt =
     let tgt =
       fix_dir tgt
@@ -2192,7 +2724,8 @@ module OASISFileUtil = struct
               mkdir ~ctxt tgt
             end
         end
-
+  
+  
   let rmdir ~ctxt tgt =
     if Sys.readdir tgt = [||] then
       begin
@@ -2202,7 +2735,8 @@ module OASISFileUtil = struct
           | _ ->
               OASISExec.run ~ctxt "rm" ["-r"; q tgt]
       end
-
+  
+  
   let glob ~ctxt fn =
    let basename =
      Filename.basename fn
@@ -2248,19 +2782,23 @@ module OASISFileUtil = struct
 end
 
 
-# 2251 "setup.ml"
+# 2785 "setup.ml"
 module BaseEnvLight = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseEnvLight.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseEnvLight.ml"
+  
+  
   module MapString = Map.Make(String)
-
+  
+  
   type t = string MapString.t
-
+  
+  
   let default_filename =
     Filename.concat
       (Sys.getcwd ())
       "setup.data"
-
+  
+  
   let load ?(allow_empty=false) ?(filename=default_filename) () =
     if Sys.file_exists filename then
       begin
@@ -2317,28 +2855,31 @@ module BaseEnvLight = struct
              "Unable to load environment, the file '%s' doesn't exist."
              filename)
       end
-
-  let var_get name env =
-    let rec var_expand str =
-      let buff =
-        Buffer.create ((String.length str) * 2)
-      in
-        Buffer.add_substitute
-          buff
-          (fun var ->
-             try
-               var_expand (MapString.find var env)
-             with Not_found ->
-               failwith
-                 (Printf.sprintf
-                    "No variable %s defined when trying to expand %S."
-                    var
-                    str))
-          str;
-        Buffer.contents buff
+  
+  
+  let rec var_expand str env =
+    let buff =
+      Buffer.create ((String.length str) * 2)
     in
-      var_expand (MapString.find name env)
-
+      Buffer.add_substitute
+        buff
+        (fun var ->
+           try
+             var_expand (MapString.find var env) env
+           with Not_found ->
+             failwith
+               (Printf.sprintf
+                  "No variable %s defined when trying to expand %S."
+                  var
+                  str))
+        str;
+      Buffer.contents buff
+  
+  
+  let var_get name env =
+    var_expand (MapString.find name env) env
+  
+  
   let var_choose lst env =
     OASISExpr.choose
       (fun nm -> var_get nm env)
@@ -2346,59 +2887,71 @@ module BaseEnvLight = struct
 end
 
 
-# 2349 "setup.ml"
+# 2890 "setup.ml"
 module BaseContext = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseContext.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseContext.ml"
+  
+  (* TODO: get rid of this module. *)
   open OASISContext
-
-  let args = args
-
+  
+  
+  let args () = fst (fspecs ())
+  
+  
   let default = default
-
+  
 end
 
 module BaseMessage = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseMessage.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseMessage.ml"
+  
+  
   (** Message to user, overrid for Base
       @author Sylvain Le Gall
     *)
   open OASISMessage
   open BaseContext
-
+  
+  
   let debug fmt   = debug ~ctxt:!default fmt
-
+  
+  
   let info fmt    = info ~ctxt:!default fmt
-
+  
+  
   let warning fmt = warning ~ctxt:!default fmt
-
+  
+  
   let error fmt = error ~ctxt:!default fmt
-
+  
 end
 
 module BaseEnv = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseEnv.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseEnv.ml"
+  
   open OASISGettext
   open OASISUtils
   open PropList
-
+  
+  
   module MapString = BaseEnvLight.MapString
-
+  
+  
   type origin_t =
     | ODefault
     | OGetEnv
     | OFileLoad
     | OCommandLine
-
+  
+  
   type cli_handle_t =
     | CLINone
     | CLIAuto
     | CLIWith
     | CLIEnable
     | CLIUser of (Arg.key * Arg.spec * Arg.doc) list
-
+  
+  
   type definition_t =
       {
         hide:       bool;
@@ -2407,22 +2960,27 @@ module BaseEnv = struct
         arg_help:   string option;
         group:      string option;
       }
-
+  
+  
   let schema =
     Schema.create "environment"
-
+  
+  
   (* Environment data *)
   let env =
     Data.create ()
-
+  
+  
   (* Environment data from file *)
   let env_from_file =
     ref MapString.empty
-
+  
+  
   (* Lexer for var *)
   let var_lxr =
     Genlex.make_lexer []
-
+  
+  
   let rec var_expand str =
     let buff =
       Buffer.create ((String.length str) * 2)
@@ -2472,7 +3030,8 @@ module BaseEnv = struct
                    e)
         str;
       Buffer.contents buff
-
+  
+  
   and var_get name =
     let vl =
       try
@@ -2486,14 +3045,16 @@ module BaseEnv = struct
         end
     in
       var_expand vl
-
+  
+  
   let var_choose ?printer ?name lst =
     OASISExpr.choose
       ?printer
       ?name
       var_get
       lst
-
+  
+  
   let var_protect vl =
     let buff =
       Buffer.create (String.length vl)
@@ -2504,7 +3065,8 @@ module BaseEnv = struct
            | c   -> Buffer.add_char   buff c)
         vl;
       Buffer.contents buff
-
+  
+  
   let var_define
         ?(hide=false)
         ?(dump=true)
@@ -2515,7 +3077,7 @@ module BaseEnv = struct
         name (* TODO: type constraint on the fact that name must be a valid OCaml
                   id *)
         dflt =
-
+  
     let default =
       [
         OFileLoad, (fun () -> MapString.find name !env_from_file);
@@ -2523,7 +3085,7 @@ module BaseEnv = struct
         OGetEnv,   (fun () -> Sys.getenv name);
       ]
     in
-
+  
     let extra =
       {
         hide     = hide;
@@ -2533,7 +3095,7 @@ module BaseEnv = struct
         group    = group;
       }
     in
-
+  
     (* Try to find a value that can be defined
      *)
     let var_get_low lst =
@@ -2568,13 +3130,13 @@ module BaseEnv = struct
           | None, lst ->
               raise (Not_set (name, Some (String.concat (s_ ", ") lst)))
     in
-
+  
     let help =
       match short_desc with
         | Some fs -> Some fs
         | None -> None
     in
-
+  
     let var_get_lst =
       FieldRO.create
         ~schema
@@ -2586,10 +3148,11 @@ module BaseEnv = struct
         ?help
         extra
     in
-
+  
       fun () ->
         var_expand (var_get_low (var_get_lst env))
-
+  
+  
   let var_redefine
         ?hide
         ?dump
@@ -2617,10 +3180,11 @@ module BaseEnv = struct
           name
           dflt
       end
-
-  let var_ignore (e : unit -> string) =
-    ()
-
+  
+  
+  let var_ignore (e: unit -> string) = ()
+  
+  
   let print_hidden =
     var_define
       ~hide:true
@@ -2629,7 +3193,8 @@ module BaseEnv = struct
       ~arg_help:"Print even non-printable variable. (debug)"
       "print_hidden"
       (fun () -> "false")
-
+  
+  
   let var_all () =
     List.rev
       (Schema.fold
@@ -2640,25 +3205,29 @@ module BaseEnv = struct
               acc)
          []
          schema)
-
+  
+  
   let default_filename =
     BaseEnvLight.default_filename
-
+  
+  
   let load ?allow_empty ?filename () =
     env_from_file := BaseEnvLight.load ?allow_empty ?filename ()
-
+  
+  
   let unload () =
     env_from_file := MapString.empty;
     Data.clear env
-
+  
+  
   let dump ?(filename=default_filename) () =
     let chn =
       open_out_bin filename
     in
-    let output nm value = 
+    let output nm value =
       Printf.fprintf chn "%s=%S\n" nm value
     in
-    let mp_todo = 
+    let mp_todo =
       (* Dump data from schema *)
       Schema.fold
         (fun mp_todo nm def _ ->
@@ -2681,10 +3250,11 @@ module BaseEnv = struct
     in
       (* Dump data defined outside of schema *)
       MapString.iter output mp_todo;
-
+  
       (* End of the dump *)
       close_out chn
-
+  
+  
   let print () =
     let printable_vars =
       Schema.fold
@@ -2720,14 +3290,15 @@ module BaseEnv = struct
     let dot_pad str =
       String.make ((max_length - (String.length str)) + 3) '.'
     in
-
+  
     Printf.printf "\nConfiguration: \n";
     List.iter
-      (fun (name,value) ->
+      (fun (name, value) ->
         Printf.printf "%s: %s %s\n" name (dot_pad name) value)
       (List.rev printable_vars);
     Printf.printf "\n%!"
-
+  
+  
   let args () =
     let arg_concat =
       OASISUtils.varname_concat ~hyphen:'-'
@@ -2754,7 +3325,7 @@ module BaseEnv = struct
                ]
            ),
         "var+val  Override any configuration variable.";
-
+  
       ]
       @
       List.flatten
@@ -2768,23 +3339,23 @@ module BaseEnv = struct
                  name
                  s
              in
-
+  
              let arg_name =
                OASISUtils.varname_of_string ~hyphen:'-' name
              in
-
+  
              let hlp =
                match short_descr_opt with
                  | Some txt -> txt ()
                  | None -> ""
              in
-
+  
              let arg_hlp =
                match def.arg_help with
                  | Some s -> s
                  | None   -> "str"
              in
-
+  
              let default_value =
                try
                  Printf.sprintf
@@ -2796,7 +3367,7 @@ module BaseEnv = struct
                with Not_set _ ->
                  ""
              in
-
+  
              let args =
                match def.cli with
                  | CLINone ->
@@ -2824,7 +3395,7 @@ module BaseEnv = struct
                          arg_concat "--enable-" arg_name,
                          Arg.Unit (fun () -> var_set "true"),
                          Printf.sprintf (f_ " %s%s") hlp dflt;
-
+  
                          arg_concat "--disable-" arg_name,
                          Arg.Unit (fun () -> var_set "false"),
                          Printf.sprintf (f_ " %s%s") hlp dflt
@@ -2838,17 +3409,19 @@ module BaseEnv = struct
 end
 
 module BaseArgExt = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseArgExt.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseArgExt.ml"
+  
+  
   open OASISUtils
   open OASISGettext
-
+  
+  
   let parse argv args =
       (* Simulate command line for Arg *)
       let current =
         ref 0
       in
-
+  
         try
           Arg.parse_argv
             ~current:current
@@ -2866,13 +3439,15 @@ module BaseArgExt = struct
 end
 
 module BaseCheck = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseCheck.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseCheck.ml"
+  
+  
   open BaseEnv
   open BaseMessage
   open OASISUtils
   open OASISGettext
-
+  
+  
   let prog_best prg prg_lst =
     var_redefine
       prg
@@ -2894,16 +3469,20 @@ module BaseCheck = struct
            match alternate with
              | Some prg -> prg
              | None -> raise Not_found)
-
+  
+  
   let prog prg =
     prog_best prg [prg]
-
+  
+  
   let prog_opt prg =
     prog_best prg [prg^".opt"; prg]
-
+  
+  
   let ocamlfind =
     prog "ocamlfind"
-
+  
+  
   let version
         var_prefix
         cmp
@@ -2944,12 +3523,14 @@ module BaseCheck = struct
                  (OASISVersion.string_of_comparator cmp)
                  version_str)
         ()
-
+  
+  
   let package_version pkg =
     OASISExec.run_read_one_line ~ctxt:!BaseContext.default
       (ocamlfind ())
       ["query"; "-format"; "%v"; pkg]
-
+  
+  
   let package ?version_comparator pkg () =
     let var =
       OASISUtils.varname_concat
@@ -2992,18 +3573,21 @@ module BaseCheck = struct
 end
 
 module BaseOCamlcConfig = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseOCamlcConfig.ml"
-
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseOCamlcConfig.ml"
+  
+  
   open BaseEnv
   open OASISUtils
   open OASISGettext
-
+  
+  
   module SMap = Map.Make(String)
-
+  
+  
   let ocamlc =
     BaseCheck.prog_opt "ocamlc"
-
+  
+  
   let ocamlc_config_map =
     (* Map name to value for ocamlc -config output
        (name ^": "^value)
@@ -3048,8 +3632,8 @@ module BaseOCamlcConfig = struct
         | [] ->
             mp
     in
-
-    let cache = 
+  
+    let cache =
       lazy
         (var_protect
            (Marshal.to_string
@@ -3067,7 +3651,8 @@ module BaseOCamlcConfig = struct
         (fun () ->
            (* TODO: update if ocamlc change !!! *)
            Lazy.force cache)
-
+  
+  
   let var_define nm =
     (* Extract data from ocamlc -config *)
     let avlbl_config_get () =
@@ -3076,15 +3661,15 @@ module BaseOCamlcConfig = struct
         0
     in
     let chop_version_suffix s =
-      try 
+      try
         String.sub s 0 (String.index s '+')
-      with _ -> 
+      with _ ->
         s
      in
-
+  
     let nm_config, value_config =
       match nm with
-        | "ocaml_version" -> 
+        | "ocaml_version" ->
             "version", chop_version_suffix
         | _ -> nm, (fun x -> x)
     in
@@ -3104,36 +3689,40 @@ module BaseOCamlcConfig = struct
                (f_ "Cannot find field '%s' in '%s -config' output")
                nm
                (ocamlc ()))
-
+  
 end
 
 module BaseStandardVar = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseStandardVar.ml"
-
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseStandardVar.ml"
+  
+  
   open OASISGettext
   open OASISTypes
   open OASISExpr
   open BaseCheck
   open BaseEnv
-
+  
+  
   let ocamlfind  = BaseCheck.ocamlfind
   let ocamlc     = BaseOCamlcConfig.ocamlc
   let ocamlopt   = prog_opt "ocamlopt"
   let ocamlbuild = prog "ocamlbuild"
-
-
+  
+  
   (**/**)
   let rpkg =
     ref None
-
+  
+  
   let pkg_get () =
     match !rpkg with
       | Some pkg -> pkg
       | None -> failwith (s_ "OASIS Package is not set")
-
+  
+  
   let var_cond = ref []
-
+  
+  
   let var_define_cond ~since_version f dflt =
     let holder = ref (fun () -> dflt) in
     let since_version =
@@ -3144,32 +3733,39 @@ module BaseStandardVar = struct
          if OASISVersion.comparator_apply ver since_version then
            holder := f ()) :: !var_cond;
       fun () -> !holder ()
-
+  
+  
   (**/**)
-
+  
+  
   let pkg_name =
     var_define
       ~short_desc:(fun () -> s_ "Package name")
       "pkg_name"
       (fun () -> (pkg_get ()).name)
-
+  
+  
   let pkg_version =
     var_define
       ~short_desc:(fun () -> s_ "Package version")
       "pkg_version"
       (fun () ->
          (OASISVersion.string_of_version (pkg_get ()).version))
-
+  
+  
   let c = BaseOCamlcConfig.var_define
-
+  
+  
   let os_type        = c "os_type"
   let system         = c "system"
   let architecture   = c "architecture"
   let ccomp_type     = c "ccomp_type"
   let ocaml_version  = c "ocaml_version"
-
+  
+  
   (* TODO: Check standard variable presence at runtime *)
-
+  
+  
   let standard_library_default = c "standard_library_default"
   let standard_library         = c "standard_library"
   let standard_runtime         = c "standard_runtime"
@@ -3182,25 +3778,28 @@ module BaseStandardVar = struct
   let ext_dll                  = c "ext_dll"
   let default_executable_name  = c "default_executable_name"
   let systhread_supported      = c "systhread_supported"
-
-  let flexlink = 
+  
+  
+  let flexlink =
     BaseCheck.prog "flexlink"
-
+  
+  
   let flexdll_version =
     var_define
       ~short_desc:(fun () -> "FlexDLL version (Win32)")
       "flexdll_version"
       (fun () ->
-         let lst = 
+         let lst =
            OASISExec.run_read_output ~ctxt:!BaseContext.default
              (flexlink ()) ["-help"]
          in
-           match lst with 
+           match lst with
              | line :: _ ->
                  Scanf.sscanf line "FlexDLL version %s" (fun ver -> ver)
              | [] ->
                  raise Not_found)
-
+  
+  
   (**/**)
   let p name hlp dflt =
     var_define
@@ -3209,7 +3808,8 @@ module BaseStandardVar = struct
       ~arg_help:"dir"
       name
       dflt
-
+  
+  
   let (/) a b =
     if os_type () = Sys.os_type then
       Filename.concat a b
@@ -3219,7 +3819,8 @@ module BaseStandardVar = struct
       OASISUtils.failwithf (f_ "Cannot handle os_type %s filename concat")
         (os_type ())
   (**/**)
-
+  
+  
   let prefix =
     p "prefix"
       (fun () -> s_ "Install architecture-independent files dir")
@@ -3232,97 +3833,116 @@ module BaseStandardVar = struct
                  program_files/(pkg_name ())
            | _ ->
                "/usr/local")
-
+  
+  
   let exec_prefix =
     p "exec_prefix"
       (fun () -> s_ "Install architecture-dependent files in dir")
       (fun () -> "$prefix")
-
+  
+  
   let bindir =
     p "bindir"
       (fun () -> s_ "User executables")
       (fun () -> "$exec_prefix"/"bin")
-
+  
+  
   let sbindir =
     p "sbindir"
       (fun () -> s_ "System admin executables")
       (fun () -> "$exec_prefix"/"sbin")
-
+  
+  
   let libexecdir =
     p "libexecdir"
       (fun () -> s_ "Program executables")
       (fun () -> "$exec_prefix"/"libexec")
-
+  
+  
   let sysconfdir =
     p "sysconfdir"
       (fun () -> s_ "Read-only single-machine data")
       (fun () -> "$prefix"/"etc")
-
+  
+  
   let sharedstatedir =
     p "sharedstatedir"
       (fun () -> s_ "Modifiable architecture-independent data")
       (fun () -> "$prefix"/"com")
-
+  
+  
   let localstatedir =
     p "localstatedir"
       (fun () -> s_ "Modifiable single-machine data")
       (fun () -> "$prefix"/"var")
-
+  
+  
   let libdir =
     p "libdir"
       (fun () -> s_ "Object code libraries")
       (fun () -> "$exec_prefix"/"lib")
-
+  
+  
   let datarootdir =
     p "datarootdir"
       (fun () -> s_ "Read-only arch-independent data root")
       (fun () -> "$prefix"/"share")
-
+  
+  
   let datadir =
     p "datadir"
       (fun () -> s_ "Read-only architecture-independent data")
       (fun () -> "$datarootdir")
-
+  
+  
   let infodir =
     p "infodir"
       (fun () -> s_ "Info documentation")
       (fun () -> "$datarootdir"/"info")
-
+  
+  
   let localedir =
     p "localedir"
       (fun () -> s_ "Locale-dependent data")
       (fun () -> "$datarootdir"/"locale")
-
+  
+  
   let mandir =
     p "mandir"
       (fun () -> s_ "Man documentation")
       (fun () -> "$datarootdir"/"man")
-
+  
+  
   let docdir =
     p "docdir"
       (fun () -> s_ "Documentation root")
       (fun () -> "$datarootdir"/"doc"/"$pkg_name")
-
+  
+  
   let htmldir =
     p "htmldir"
       (fun () -> s_ "HTML documentation")
       (fun () -> "$docdir")
-
+  
+  
   let dvidir =
     p "dvidir"
       (fun () -> s_ "DVI documentation")
       (fun () -> "$docdir")
-
+  
+  
   let pdfdir =
     p "pdfdir"
       (fun () -> s_ "PDF documentation")
       (fun () -> "$docdir")
-
+  
+  
   let psdir =
     p "psdir"
       (fun () -> s_ "PS documentation")
       (fun () -> "$docdir")
-
+  
+  
   let destdir =
     p "destdir"
       (fun () -> s_ "Prepend a path when installing package")
@@ -3331,36 +3951,40 @@ module BaseStandardVar = struct
            (PropList.Not_set
               ("destdir",
                Some (s_ "undefined by construct"))))
-
+  
+  
   let findlib_version =
     var_define
       "findlib_version"
       (fun () ->
          BaseCheck.package_version "findlib")
-
+  
+  
   let is_native =
     var_define
       "is_native"
       (fun () ->
          try
-           let _s : string =
+           let _s: string =
              ocamlopt ()
            in
              "true"
          with PropList.Not_set _ ->
-           let _s : string =
+           let _s: string =
              ocamlc ()
            in
              "false")
-
+  
+  
   let ext_program =
     var_define
       "suffix_program"
       (fun () ->
          match os_type () with
-           | "Win32" -> ".exe"
+           | "Win32" | "Cygwin" -> ".exe"
            | _ -> "")
-
+  
+  
   let rm =
     var_define
       ~short_desc:(fun () -> s_ "Remove a file.")
@@ -3369,7 +3993,8 @@ module BaseStandardVar = struct
          match os_type () with
            | "Win32" -> "del"
            | _ -> "rm -f")
-
+  
+  
   let rmdir =
     var_define
       ~short_desc:(fun () -> s_ "Remove a directory.")
@@ -3378,21 +4003,24 @@ module BaseStandardVar = struct
          match os_type () with
            | "Win32" -> "rd"
            | _ -> "rm -rf")
-
+  
+  
   let debug =
     var_define
       ~short_desc:(fun () -> s_ "Turn ocaml debug flag on")
       ~cli:CLIEnable
       "debug"
       (fun () -> "true")
-
+  
+  
   let profile =
     var_define
       ~short_desc:(fun () -> s_ "Turn ocaml profile flag on")
       ~cli:CLIEnable
       "profile"
       (fun () -> "false")
-
+  
+  
   let tests =
     var_define_cond ~since_version:"0.3"
       (fun () ->
@@ -3403,7 +4031,8 @@ module BaseStandardVar = struct
            "tests"
            (fun () -> "false"))
       "true"
-
+  
+  
   let docs =
     var_define_cond ~since_version:"0.3"
       (fun () ->
@@ -3413,7 +4042,8 @@ module BaseStandardVar = struct
            "docs"
            (fun () -> "true"))
       "true"
-
+  
+  
   let native_dynlink =
     var_define
       ~short_desc:(fun () -> s_ "Compiler support generation of .cmxs.")
@@ -3421,7 +4051,7 @@ module BaseStandardVar = struct
       "native_dynlink"
       (fun () ->
          let res =
-           let ocaml_lt_312 () = 
+           let ocaml_lt_312 () =
              OASISVersion.comparator_apply
                (OASISVersion.version_of_string (ocaml_version ()))
                (OASISVersion.VLesser
@@ -3433,7 +4063,7 @@ module BaseStandardVar = struct
                (OASISVersion.VLesser
                   (OASISVersion.version_of_string "0.30"))
            in
-           let has_native_dynlink = 
+           let has_native_dynlink =
              let ocamlfind = ocamlfind () in
                try
                  let fn =
@@ -3451,10 +4081,10 @@ module BaseStandardVar = struct
                false
              else if ocaml_lt_312 () then
                false
-             else if (os_type () = "Win32" || os_type () = "Cygwin") 
+             else if (os_type () = "Win32" || os_type () = "Cygwin")
                      && flexdll_lt_030 () then
                begin
-                 BaseMessage.warning 
+                 BaseMessage.warning
                    (f_ ".cmxs generation disabled because FlexDLL needs to be \
                         at least 0.30. Please upgrade FlexDLL from %s to 0.30.")
                    (flexdll_version ());
@@ -3464,20 +4094,23 @@ module BaseStandardVar = struct
                true
          in
            string_of_bool res)
-
+  
+  
   let init pkg =
     rpkg := Some pkg;
     List.iter (fun f -> f pkg.oasis_version) !var_cond
-
+  
 end
 
 module BaseFileAB = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseFileAB.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseFileAB.ml"
+  
+  
   open BaseEnv
   open OASISGettext
   open BaseMessage
-
+  
+  
   let to_filename fn =
     let fn =
       OASISHostPath.of_unix fn
@@ -3487,7 +4120,8 @@ module BaseFileAB = struct
           (f_ "File '%s' doesn't have '.ab' extension")
           fn;
       Filename.chop_extension fn
-
+  
+  
   let replace fn_lst =
     let buff =
       Buffer.create 13
@@ -3520,15 +4154,18 @@ module BaseFileAB = struct
 end
 
 module BaseLog = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseLog.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseLog.ml"
+  
+  
   open OASISUtils
-
+  
+  
   let default_filename =
     Filename.concat
       (Filename.dirname BaseEnv.default_filename)
       "setup.log"
-
+  
+  
   module SetTupleString =
     Set.Make
       (struct
@@ -3538,7 +4175,8 @@ module BaseLog = struct
              | 0 -> String.compare s12 s22
              | n -> n
        end)
-
+  
+  
   let load () =
     if Sys.file_exists default_filename then
       begin
@@ -3587,14 +4225,16 @@ module BaseLog = struct
       begin
         []
       end
-
+  
+  
   let register event data =
     let chn_out =
       open_out_gen [Open_append; Open_creat; Open_text] 0o644 default_filename
     in
       Printf.fprintf chn_out "%S %S\n" event data;
       close_out chn_out
-
+  
+  
   let unregister event data =
     if Sys.file_exists default_filename then
       begin
@@ -3619,7 +4259,8 @@ module BaseLog = struct
           if not !write_something then
             Sys.remove default_filename
       end
-
+  
+  
   let filter events =
     let st_events =
       List.fold_left
@@ -3631,7 +4272,8 @@ module BaseLog = struct
       List.filter
         (fun (e, _) -> SetString.mem e st_events)
         (load ())
-
+  
+  
   let exists event data =
     List.exists
       (fun v -> (event, data) = v)
@@ -3639,20 +4281,23 @@ module BaseLog = struct
 end
 
 module BaseBuilt = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseBuilt.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseBuilt.ml"
+  
+  
   open OASISTypes
   open OASISGettext
   open BaseStandardVar
   open BaseMessage
-
+  
+  
   type t =
     | BExec    (* Executable *)
     | BExecLib (* Library coming with executable *)
     | BLib     (* Library *)
     | BObj     (* Library *)
     | BDoc     (* Document *)
-
+  
+  
   let to_log_event_file t nm =
     "built_"^
     (match t with
@@ -3662,10 +4307,12 @@ module BaseBuilt = struct
        | BObj -> "obj"
        | BDoc -> "doc")^
     "_"^nm
-
+  
+  
   let to_log_event_done t nm =
     "is_"^(to_log_event_file t nm)
-
+  
+  
   let register t nm lst =
     BaseLog.register
       (to_log_event_done t nm)
@@ -3695,7 +4342,8 @@ module BaseBuilt = struct
                (f_ "Cannot find an existing alternative files among: %s")
                (String.concat (s_ ", ") alt))
       lst
-
+  
+  
   let unregister t nm =
     List.iter
       (fun (e, d) ->
@@ -3703,7 +4351,8 @@ module BaseBuilt = struct
       (BaseLog.filter
          [to_log_event_file t nm;
           to_log_event_done t nm])
-
+  
+  
   let fold t nm f acc =
     List.fold_left
       (fun acc (_, fn) ->
@@ -3733,7 +4382,8 @@ module BaseBuilt = struct
       acc
       (BaseLog.filter
          [to_log_event_file t nm])
-
+  
+  
   let is_built t nm =
     List.fold_left
       (fun is_built (_, d) ->
@@ -3744,7 +4394,8 @@ module BaseBuilt = struct
       false
       (BaseLog.filter
          [to_log_event_done t nm])
-
+  
+  
   let of_executable ffn (cs, bs, exec) =
     let unix_exec_is, unix_dll_opt =
       OASISExecutable.unix_exec_is
@@ -3767,7 +4418,8 @@ module BaseBuilt = struct
       evs,
       unix_exec_is,
       unix_dll_opt
-
+  
+  
   let of_library ffn (cs, bs, lib) =
     let unix_lst =
       OASISLibrary.generated_unix_files
@@ -3786,8 +4438,8 @@ module BaseBuilt = struct
        List.map (List.map ffn) unix_lst]
     in
       evs, unix_lst
-
-
+  
+  
   let of_object ffn (cs, bs, obj) =
     let unix_lst =
       OASISObject.generated_unix_files
@@ -3803,24 +4455,27 @@ module BaseBuilt = struct
        List.map (List.map ffn) unix_lst]
     in
       evs, unix_lst
-
+  
 end
 
 module BaseCustom = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseCustom.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseCustom.ml"
+  
+  
   open BaseEnv
   open BaseMessage
   open OASISTypes
   open OASISGettext
-
+  
+  
   let run cmd args extra_args =
     OASISExec.run ~ctxt:!BaseContext.default ~quote:false
       (var_expand cmd)
       (List.map
          var_expand
          (args @ (Array.to_list extra_args)))
-
+  
+  
   let hook ?(failsafe=false) cstm f e =
     let optional_command lst =
       let printer =
@@ -3857,14 +4512,15 @@ module BaseCustom = struct
 end
 
 module BaseDynVar = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseDynVar.ml"
-
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseDynVar.ml"
+  
+  
   open OASISTypes
   open OASISGettext
   open BaseEnv
   open BaseBuilt
-
+  
+  
   let init pkg =
     (* TODO: disambiguate exec vs other variable by adding exec_VARNAME. *)
     (* TODO: provide compile option for library libary_byte_args_VARNAME... *)
@@ -3897,23 +4553,25 @@ module BaseDynVar = struct
                                      Some (Printf.sprintf
                                              (f_ "Executable '%s' not yet built.")
                                              cs.cs_name)))))
-
+  
          | Library _ | Object _ | Flag _ | Test _ | SrcRepo _ | Doc _ ->
              ())
       pkg.sections
 end
 
 module BaseTest = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseTest.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseTest.ml"
+  
+  
   open BaseEnv
   open BaseMessage
   open OASISTypes
   open OASISExpr
   open OASISGettext
-
+  
+  
   let test lst pkg extra_args =
-
+  
     let one_test (failure, n) (test_plugin, cs, test) =
       if var_choose
            ~name:(Printf.sprintf
@@ -3937,7 +4595,7 @@ module BaseTest = struct
                   in
                     chdir dir;
                     fun () -> chdir cwd
-
+  
               | None ->
                   fun () -> ()
           in
@@ -3962,7 +4620,7 @@ module BaseTest = struct
           (failure, n)
         end
     in
-    let (failed, n) =
+    let failed, n =
       List.fold_left
         one_test
         (0.0, 0)
@@ -3983,9 +4641,9 @@ module BaseTest = struct
         failwith msg
       else
         info "%s" msg;
-
+  
       (* Possible explanation why the tests where not run. *)
-      if OASISVersion.version_0_3_or_after pkg.oasis_version &&
+      if OASISFeatures.package_test OASISFeatures.flag_tests pkg &&
          not (bool_of_string (BaseStandardVar.tests ())) &&
          lst <> [] then
         BaseMessage.warning
@@ -3994,15 +4652,17 @@ module BaseTest = struct
 end
 
 module BaseDoc = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseDoc.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseDoc.ml"
+  
+  
   open BaseEnv
   open BaseMessage
   open OASISTypes
   open OASISGettext
-
+  
+  
   let doc lst pkg extra_args =
-
+  
     let one_doc (doc_plugin, cs, doc) =
       if var_choose
            ~name:(Printf.sprintf
@@ -4019,8 +4679,8 @@ module BaseDoc = struct
         end
     in
       List.iter one_doc lst;
-
-      if OASISVersion.version_0_3_or_after pkg.oasis_version &&
+  
+      if OASISFeatures.package_test OASISFeatures.flag_docs pkg &&
          not (bool_of_string (BaseStandardVar.docs ())) &&
          lst <> [] then
         BaseMessage.warning
@@ -4029,21 +4689,24 @@ module BaseDoc = struct
 end
 
 module BaseSetup = struct
-# 21 "/home/gildor/programmation/oasis/src/base/BaseSetup.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/base/BaseSetup.ml"
+  
   open BaseEnv
   open BaseMessage
   open OASISTypes
   open OASISSection
   open OASISGettext
   open OASISUtils
-
+  
+  
   type std_args_fun =
       package -> string array -> unit
-
+  
+  
   type ('a, 'b) section_args_fun =
       name * (package -> (common_section * 'a) -> string array -> 'b)
-
+  
+  
   type t =
       {
         configure:        std_args_fun;
@@ -4066,7 +4729,8 @@ module BaseSetup = struct
         oasis_setup_args: string list;
         setup_update:     bool;
       }
-
+  
+  
   (* Associate a plugin function with data from package *)
   let join_plugin_sections filter_map lst =
     List.rev
@@ -4079,7 +4743,8 @@ module BaseSetup = struct
                   acc)
          []
          lst)
-
+  
+  
   (* Search for plugin data associated with a section name *)
   let lookup_plugin_section plugin action nm lst =
     try
@@ -4090,12 +4755,13 @@ module BaseSetup = struct
         plugin
         nm
         action
-
+  
+  
   let configure t args =
     (* Run configure *)
     BaseCustom.hook
       t.package.conf_custom
-      (fun () -> 
+      (fun () ->
          (* Reload if preconf has changed it *)
          begin
            try
@@ -4104,30 +4770,32 @@ module BaseSetup = struct
            with _ ->
              ()
          end;
-
+  
          (* Run plugin's configure *)
          t.configure t.package args;
-
+  
          (* Dump to allow postconf to change it *)
          dump ())
       ();
-
+  
     (* Reload environment *)
     unload ();
     load ();
-
+  
     (* Save environment *)
     print ();
-
+  
     (* Replace data in file *)
     BaseFileAB.replace t.package.files_ab
-
+  
+  
   let build t args =
     BaseCustom.hook
       t.package.build_custom
       (t.build t.package)
       args
-
+  
+  
   let doc t args =
     BaseDoc.doc
       (join_plugin_sections
@@ -4146,7 +4814,8 @@ module BaseSetup = struct
          t.package.sections)
       t.package
       args
-
+  
+  
   let test t args =
     BaseTest.test
       (join_plugin_sections
@@ -4165,7 +4834,8 @@ module BaseSetup = struct
          t.package.sections)
       t.package
       args
-
+  
+  
   let all t args =
     let rno_doc =
       ref false
@@ -4173,6 +4843,9 @@ module BaseSetup = struct
     let rno_test =
       ref false
     in
+    let arg_rest =
+      ref []
+    in
       Arg.parse_argv
         ~current:(ref 0)
         (Array.of_list
@@ -4182,23 +4855,27 @@ module BaseSetup = struct
           "-no-doc",
           Arg.Set rno_doc,
           s_ "Don't run doc target";
-
+  
           "-no-test",
           Arg.Set rno_test,
           s_ "Don't run test target";
+  
+          "--",
+          Arg.Rest (fun arg -> arg_rest := arg :: !arg_rest),
+          s_ "All arguments for configure.";
         ]
         (failwithf (f_ "Don't know what to do with '%s'"))
         "";
-
+  
       info "Running configure step";
-      configure t [||];
-
+      configure t (Array.of_list (List.rev !arg_rest));
+  
       info "Running build step";
       build     t [||];
-
+  
       (* Load setup.log dynamic variables *)
       BaseDynVar.init t.package;
-
+  
       if not !rno_doc then
         begin
           info "Running doc step";
@@ -4208,7 +4885,7 @@ module BaseSetup = struct
         begin
           info "Skipping doc step"
         end;
-
+  
       if not !rno_test then
         begin
           info "Running test step";
@@ -4218,23 +4895,27 @@ module BaseSetup = struct
         begin
           info "Skipping test step"
         end
-
+  
+  
   let install t args =
     BaseCustom.hook
       t.package.install_custom
       (t.install t.package)
       args
-
+  
+  
   let uninstall t args =
     BaseCustom.hook
       t.package.uninstall_custom
       (t.uninstall t.package)
       args
-
+  
+  
   let reinstall t args =
     uninstall t args;
     install t args
-
+  
+  
   let clean, distclean =
     let failsafe f a =
       try
@@ -4246,7 +4927,7 @@ module BaseSetup = struct
              | Failure msg -> msg
              | e -> Printexc.to_string e)
     in
-
+  
     let generic_clean t cstm mains docs tests args =
       BaseCustom.hook
         ~failsafe:true
@@ -4291,7 +4972,7 @@ module BaseSetup = struct
              mains)
         ()
     in
-
+  
     let clean t args =
       generic_clean
         t
@@ -4301,11 +4982,11 @@ module BaseSetup = struct
         t.clean_test
         args
     in
-
+  
     let distclean t args =
       (* Call clean *)
       clean t args;
-
+  
       (* Call distclean code *)
       generic_clean
         t
@@ -4314,7 +4995,7 @@ module BaseSetup = struct
         t.distclean_doc
         t.distclean_test
         args;
-
+  
       (* Remove generated file *)
       List.iter
         (fun fn ->
@@ -4329,24 +5010,30 @@ module BaseSetup = struct
          ::
          (List.rev_map BaseFileAB.to_filename t.package.files_ab))
     in
-
+  
       clean, distclean
-
+  
+  
   let version t _ =
     print_endline t.oasis_version
-
+  
+  
   let update_setup_ml, no_update_setup_ml_cli =
     let b = ref true in
       b,
       ("-no-update-setup-ml",
        Arg.Clear b,
        s_ " Don't try to update setup.ml, even if _oasis has changed.")
-
+  
+  
+  let default_oasis_fn = "_oasis"
+  
+  
   let update_setup_ml t =
     let oasis_fn =
       match t.oasis_fn with
         | Some fn -> fn
-        | None -> "_oasis"
+        | None -> default_oasis_fn
     in
     let oasis_exec =
       match t.oasis_exec with
@@ -4438,13 +5125,14 @@ module BaseSetup = struct
                  least oasis v%s.")
             oasis_exec oasis_exec_version setup_ml t.oasis_version
     in
-
+  
     if !update_setup_ml then
       begin
         try
           match t.oasis_digest with
             | Some dgst ->
-              if Sys.file_exists oasis_fn && dgst <> Digest.file "_oasis" then
+              if Sys.file_exists oasis_fn &&
+                 dgst <> Digest.file default_oasis_fn then
                 begin
                   do_update ();
                   true
@@ -4463,7 +5151,8 @@ module BaseSetup = struct
       end
     else
       false
-
+  
+  
   let setup t =
     let catch_exn =
       ref true
@@ -4475,7 +5164,7 @@ module BaseSetup = struct
                    (f_ "No action defined, run '%s %s -help'")
                    Sys.executable_name
                    Sys.argv.(0))
-
+  
         in
         let extra_args_ref =
           ref []
@@ -4487,64 +5176,64 @@ module BaseSetup = struct
           Arg.Tuple
             [
               Arg.Rest (fun str -> extra_args_ref := str :: !extra_args_ref);
-
+  
               Arg.Unit
                 (fun () ->
                    allow_empty_env_ref := allow_empty_env;
                    act_ref := act);
             ]
         in
-
+  
           Arg.parse
             (Arg.align
                ([
                  "-configure",
                  arg_handle ~allow_empty_env:true configure,
                  s_ "[options*] Configure the whole build process.";
-
+  
                  "-build",
                  arg_handle build,
                  s_ "[options*] Build executables and libraries.";
-
+  
                  "-doc",
                  arg_handle doc,
                  s_ "[options*] Build documents.";
-
+  
                  "-test",
                  arg_handle test,
                  s_ "[options*] Run tests.";
-
+  
                  "-all",
                  arg_handle ~allow_empty_env:true all,
                  s_ "[options*] Run configure, build, doc and test targets.";
-
+  
                  "-install",
                  arg_handle install,
                  s_ "[options*] Install libraries, data, executables \
                                 and documents.";
-
+  
                  "-uninstall",
                  arg_handle uninstall,
                  s_ "[options*] Uninstall libraries, data, executables \
                                 and documents.";
-
+  
                  "-reinstall",
                  arg_handle reinstall,
                  s_ "[options*] Uninstall and install libraries, data, \
                                 executables and documents.";
-
+  
                  "-clean",
                  arg_handle ~allow_empty_env:true clean,
                  s_ "[options*] Clean files generated by a build.";
-
+  
                  "-distclean",
                  arg_handle ~allow_empty_env:true distclean,
                  s_ "[options*] Clean files generated by a build and configure.";
-
+  
                  "-version",
                  arg_handle ~allow_empty_env:true version,
                  s_ " Display version of OASIS used to generate this setup.ml.";
-
+  
                  "-no-catch-exn",
                  Arg.Clear catch_exn,
                  s_ " Don't catch exception, useful for debugging.";
@@ -4557,10 +5246,10 @@ module BaseSetup = struct
                @ (BaseContext.args ())))
             (failwithf (f_ "Don't know what to do with '%s'"))
             (s_ "Setup and run build process current package\n");
-
+  
           (* Build initial environment *)
           load ~allow_empty:!allow_empty_env_ref ();
-
+  
           (** Initialize flags *)
           List.iter
             (function
@@ -4591,56 +5280,49 @@ module BaseSetup = struct
                | _ ->
                    ())
             t.package.sections;
-
+  
           BaseStandardVar.init t.package;
-
+  
           BaseDynVar.init t.package;
-
+  
           if t.setup_update && update_setup_ml t then
             ()
           else
             !act_ref t (Array.of_list (List.rev !extra_args_ref))
-
+  
       with e when !catch_exn ->
         error "%s" (Printexc.to_string e);
         exit 1
-
+  
+  
 end
 
 
-# 4611 "setup.ml"
+# 5301 "setup.ml"
 module InternalConfigurePlugin = struct
-# 21 "/home/gildor/programmation/oasis/src/plugins/internal/InternalConfigurePlugin.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/plugins/internal/InternalConfigurePlugin.ml"
+  
+  
   (** Configure using internal scheme
       @author Sylvain Le Gall
     *)
-
+  
+  
   open BaseEnv
   open OASISTypes
   open OASISUtils
   open OASISGettext
   open BaseMessage
-
+  
+  
   (** Configure build using provided series of check to be done
     * and then output corresponding file.
     *)
   let configure pkg argv =
-    let var_ignore_eval var =
-      let _s : string =
-        var ()
-      in
-        ()
-    in
-
-    let errors =
-      ref SetString.empty
-    in
-
-    let buff =
-      Buffer.create 13
-    in
-
+    let var_ignore_eval var = let _s: string = var () in () in
+    let errors = ref SetString.empty in
+    let buff = Buffer.create 13 in
+  
     let add_errors fmt =
       Printf.kbprintf
         (fun b ->
@@ -4649,11 +5331,11 @@ module InternalConfigurePlugin = struct
         buff
         fmt
     in
-
+  
     let warn_exception e =
       warning "%s" (Printexc.to_string e)
     in
-
+  
     (* Check tools *)
     let check_tools lst =
       List.iter
@@ -4683,7 +5365,7 @@ module InternalConfigurePlugin = struct
                  pkg.sections)
         lst
     in
-
+  
     let build_checks sct bs =
       if var_choose bs.bs_build then
         begin
@@ -4697,10 +5379,10 @@ module InternalConfigurePlugin = struct
                   (f_ "Section %s requires native compilation")
                   (OASISSection.string_of_section sct)
             end;
-
+  
           (* Check tools *)
           check_tools bs.bs_build_tools;
-
+  
           (* Check depends *)
           List.iter
             (function
@@ -4740,10 +5422,10 @@ module InternalConfigurePlugin = struct
             bs.bs_build_depends
         end
     in
-
+  
     (* Parse command line *)
     BaseArgExt.parse argv (BaseEnv.args ());
-
+  
     (* OCaml version *)
     begin
       match pkg.ocaml_version with
@@ -4765,7 +5447,7 @@ module InternalConfigurePlugin = struct
         | None ->
             ()
     end;
-
+  
     (* Findlib version *)
     begin
       match pkg.findlib_version with
@@ -4801,7 +5483,7 @@ module InternalConfigurePlugin = struct
         if findlib_lt132 then
           add_errors "OCaml >= 4.0.0 requires Findlib version >= 1.3.2"
     end;
-
+  
     (* FlexDLL *)
     if BaseStandardVar.os_type () = "Win32" ||
        BaseStandardVar.os_type () = "Cygwin" then
@@ -4812,7 +5494,7 @@ module InternalConfigurePlugin = struct
           warn_exception e;
           add_errors (f_ "Cannot find 'flexlink'")
       end;
-
+  
     (* Check build depends *)
     List.iter
       (function
@@ -4828,7 +5510,7 @@ module InternalConfigurePlugin = struct
          | _ ->
              ())
       pkg.sections;
-
+  
     (* Check if we need native dynlink (presence of libraries that compile to
      * native)
      *)
@@ -4848,7 +5530,7 @@ module InternalConfigurePlugin = struct
         if has_cmxa then
           var_ignore_eval BaseStandardVar.native_dynlink
     end;
-
+  
     (* Check errors *)
     if SetString.empty != !errors then
       begin
@@ -4862,16 +5544,19 @@ module InternalConfigurePlugin = struct
              (SetString.cardinal !errors))
           (SetString.cardinal !errors)
       end
-
+  
+  
 end
 
 module InternalInstallPlugin = struct
-# 21 "/home/gildor/programmation/oasis/src/plugins/internal/InternalInstallPlugin.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/plugins/internal/InternalInstallPlugin.ml"
+  
+  
   (** Install using internal scheme
       @author Sylvain Le Gall
     *)
-
+  
+  
   open BaseEnv
   open BaseStandardVar
   open BaseMessage
@@ -4879,30 +5564,39 @@ module InternalInstallPlugin = struct
   open OASISFindlib
   open OASISGettext
   open OASISUtils
-
+  
+  
   let exec_hook =
     ref (fun (cs, bs, exec) -> cs, bs, exec)
-
+  
+  
   let lib_hook =
     ref (fun (cs, bs, lib) -> cs, bs, lib, [])
-
+  
+  
   let obj_hook =
     ref (fun (cs, bs, obj) -> cs, bs, obj, [])
-
+  
+  
   let doc_hook =
     ref (fun (cs, doc) -> cs, doc)
-
+  
+  
   let install_file_ev =
     "install-file"
-
+  
+  
   let install_dir_ev =
     "install-dir"
-
+  
+  
   let install_findlib_ev =
     "install-findlib"
-
+  
+  
   let win32_max_command_line_length = 8000
-
+  
+  
   let split_install_command ocamlfind findlib_name meta files =
     if Sys.os_type = "Win32" then
       (* Arguments for the first command: *)
@@ -4942,20 +5636,21 @@ module InternalInstallPlugin = struct
                 | (firsts, others) ->
                     let cmd = args @ firsts in
                     (* Use -add for remaining commands: *)
-                    let () = 
+                    let () =
                       let findlib_ge_132 =
                         OASISVersion.comparator_apply
-                          (OASISVersion.version_of_string 
+                          (OASISVersion.version_of_string
                              (BaseStandardVar.findlib_version ()))
-                          (OASISVersion.VGreaterEqual 
+                          (OASISVersion.VGreaterEqual
                              (OASISVersion.version_of_string "1.3.2"))
                       in
                         if not findlib_ge_132 then
                           failwithf
-                            (f_ "Installing the library %s require to use the flag \
-                                 '-add' of ocamlfind because the command line is too \
-                                  long. This flag is only available for findlib 1.3.2. \
-                                  Please upgrade findlib from %s to 1.3.2")
+                            (f_ "Installing the library %s require to use the \
+                                 flag '-add' of ocamlfind because the command \
+                                 line is too long. This flag is only available \
+                                 for findlib 1.3.2. Please upgrade findlib from \
+                                 %s to 1.3.2")
                             findlib_name (BaseStandardVar.findlib_version ())
                     in
                     let cmds = split other_args others in
@@ -4965,9 +5660,10 @@ module InternalInstallPlugin = struct
       split first_args files
     else
       ["install" :: findlib_name :: meta :: files]
-
+  
+  
   let install pkg argv =
-
+  
     let in_destdir =
       try
         let destdir =
@@ -4980,7 +5676,7 @@ module InternalInstallPlugin = struct
       with PropList.Not_set _ ->
         fun fn -> fn
     in
-
+  
     let install_file ?tgt_fn src_file envdir =
       let tgt_dir =
         in_destdir (envdir ())
@@ -5001,13 +5697,13 @@ module InternalInstallPlugin = struct
              info (f_ "Creating directory '%s'") dn;
              BaseLog.register install_dir_ev dn)
           tgt_dir;
-
+  
         (* Really install files *)
         info (f_ "Copying file '%s' to '%s'") src_file tgt_file;
         OASISFileUtil.cp ~ctxt:!BaseContext.default src_file tgt_file;
         BaseLog.register install_file_ev tgt_file
     in
-
+  
     (* Install data into defined directory *)
     let install_data srcdir lst tgtdir =
       let tgtdir =
@@ -5037,10 +5733,10 @@ module InternalInstallPlugin = struct
                  real_srcs)
           lst
     in
-
+  
     (** Install all libraries *)
     let install_libs pkg =
-
+  
       let files_of_library (f_data, acc) data_lib =
         let cs, bs, lib, lib_extra =
           !lib_hook data_lib
@@ -5082,7 +5778,7 @@ module InternalInstallPlugin = struct
                     acc
                     lib.lib_modules
               in
-
+  
               let acc =
                (* Get generated files *)
                BaseBuilt.fold
@@ -5091,7 +5787,7 @@ module InternalInstallPlugin = struct
                  (fun acc fn -> fn :: acc)
                  acc
               in
-
+  
               let f_data () =
                 (* Install data associated with the library *)
                 install_data
@@ -5102,7 +5798,7 @@ module InternalInstallPlugin = struct
                      pkg.name);
                 f_data ()
               in
-
+  
                 (f_data, acc)
             end
            else
@@ -5150,7 +5846,7 @@ module InternalInstallPlugin = struct
                     acc
                     obj.obj_modules
               in
-
+  
               let acc =
                (* Get generated files *)
                BaseBuilt.fold
@@ -5159,7 +5855,7 @@ module InternalInstallPlugin = struct
                  (fun acc fn -> fn :: acc)
                  acc
               in
-
+  
               let f_data () =
                 (* Install data associated with the object *)
                 install_data
@@ -5170,16 +5866,16 @@ module InternalInstallPlugin = struct
                      pkg.name);
                 f_data ()
               in
-
+  
                 (f_data, acc)
             end
            else
             begin
               (f_data, acc)
             end
-
+  
       in
-
+  
       (* Install one group of library *)
       let install_group_lib grp =
         (* Iterate through all group nodes *)
@@ -5198,22 +5894,22 @@ module InternalInstallPlugin = struct
               data_and_files
               children
         in
-
+  
         (* Findlib name of the root library *)
         let findlib_name =
           findlib_of_group grp
         in
-
+  
         (* Determine root library *)
         let root_lib =
           root_of_group grp
         in
-
+  
         (* All files to install for this library *)
         let f_data, files =
           install_group_lib_aux (ignore, []) grp
         in
-
+  
           (* Really install, if there is something to install *)
           if files = [] then
             begin
@@ -5225,7 +5921,7 @@ module InternalInstallPlugin = struct
             begin
               let meta =
                 (* Search META file *)
-                let (_, bs, _) =
+                let _, bs, _ =
                   root_lib
                 in
                 let res =
@@ -5238,7 +5934,7 @@ module InternalInstallPlugin = struct
                       findlib_name;
                   res
               in
-              let files = 
+              let files =
                 (* Make filename shorter to avoid hitting command max line length
                  * too early, esp. on Windows.
                  *)
@@ -5247,24 +5943,24 @@ module InternalInstallPlugin = struct
                   let nlen = String.length n in
                     if plen <= nlen && String.sub n 0 plen = p then
                       begin
-                        let fn_sep = 
+                        let fn_sep =
                           if Sys.os_type = "Win32" then
                             '\\'
                           else
                             '/'
                         in
                         let cutpoint = plen +
-                          (if plen < nlen && n.[plen] = fn_sep then 
+                          (if plen < nlen && n.[plen] = fn_sep then
                              1
-                           else 
+                           else
                              0)
                         in
                           String.sub n cutpoint (nlen - cutpoint)
                       end
-                    else 
+                    else
                       n
                 in
-                  List.map (remove_prefix (Sys.getcwd ())) files 
+                  List.map (remove_prefix (Sys.getcwd ())) files
               in
                 info
                   (f_ "Installing findlib library '%s'")
@@ -5282,23 +5978,23 @@ module InternalInstallPlugin = struct
                   commands;
                 BaseLog.register install_findlib_ev findlib_name
             end;
-
+  
           (* Install data files *)
           f_data ();
-
+  
       in
-
+  
       let group_libs, _, _ =
         findlib_mapping pkg
       in
-
+  
         (* We install libraries in groups *)
         List.iter install_group_lib group_libs
     in
-
+  
     let install_execs pkg =
       let install_exec data_exec =
-        let (cs, bs, exec) =
+        let cs, bs, exec =
           !exec_hook data_exec
         in
           if var_choose bs.bs_install &&
@@ -5342,10 +6038,10 @@ module InternalInstallPlugin = struct
                  ())
           pkg.sections
     in
-
+  
     let install_docs pkg =
       let install_doc data =
-        let (cs, doc) =
+        let cs, doc =
           !doc_hook data
         in
           if var_choose doc.doc_install &&
@@ -5376,11 +6072,12 @@ module InternalInstallPlugin = struct
                  ())
           pkg.sections
     in
-
+  
       install_libs  pkg;
       install_execs pkg;
       install_docs  pkg
-
+  
+  
   (* Uninstall already installed data *)
   let uninstall _ argv =
     List.iter
@@ -5444,31 +6141,42 @@ module InternalInstallPlugin = struct
          (BaseLog.filter
             [install_file_ev;
              install_dir_ev;
-             install_findlib_ev;]))
-
+             install_findlib_ev]))
+  
+  
 end
 
 
-# 5452 "setup.ml"
+# 6150 "setup.ml"
 module OCamlbuildCommon = struct
-# 21 "/home/gildor/programmation/oasis/src/plugins/ocamlbuild/OCamlbuildCommon.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/plugins/ocamlbuild/OCamlbuildCommon.ml"
+  
+  
   (** Functions common to OCamlbuild build and doc plugin
     *)
-
+  
+  
   open OASISGettext
   open BaseEnv
   open BaseStandardVar
-
-  let ocamlbuild_clean_ev =
-    "ocamlbuild-clean"
-
+  open OASISTypes
+  
+  
+  
+  
+  type extra_args = string list 
+  
+  
+  let ocamlbuild_clean_ev = "ocamlbuild-clean"
+  
+  
   let ocamlbuildflags =
     var_define
       ~short_desc:(fun () -> "OCamlbuild additional flags")
       "ocamlbuildflags"
       (fun () -> "")
-
+  
+  
   (** Fix special arguments depending on environment *)
   let fix_args args extra_argv =
     List.flatten
@@ -5483,7 +6191,7 @@ module OCamlbuildCommon = struct
           ]
         else
           [];
-
+  
         if not (bool_of_string (is_native ())) || (os_type ()) = "Win32" then
           [
             "-byte-plugin"
@@ -5491,22 +6199,23 @@ module OCamlbuildCommon = struct
         else
           [];
         args;
-
+  
         if bool_of_string (debug ()) then
           ["-tag"; "debug"]
         else
           [];
-
+  
         if bool_of_string (profile ()) then
           ["-tag"; "profile"]
         else
           [];
-
+  
         OASISString.nsplit (ocamlbuildflags ()) ' ';
-
+  
         Array.to_list extra_argv;
       ]
-
+  
+  
   (** Run 'ocamlbuild -clean' if not already done *)
   let run_clean extra_argv =
     let extra_cli =
@@ -5525,7 +6234,8 @@ module OCamlbuildCommon = struct
                with _ ->
                  ())
         end
-
+  
+  
   (** Run ocamlbuild, unregister all clean events *)
   let run_ocamlbuild args extra_argv =
     (* TODO: enforce that target in args must be UNIX encoded i.e. toto/index.html
@@ -5536,7 +6246,8 @@ module OCamlbuildCommon = struct
     List.iter
       (fun (e, d) -> BaseLog.unregister e d)
       (BaseLog.filter [ocamlbuild_clean_ev])
-
+  
+  
   (** Determine real build directory *)
   let build_dir extra_argv =
     let rec search_args dir =
@@ -5549,54 +6260,49 @@ module OCamlbuildCommon = struct
             dir
     in
       search_args "_build" (fix_args [] extra_argv)
-
+  
+  
 end
 
 module OCamlbuildPlugin = struct
-# 21 "/home/gildor/programmation/oasis/src/plugins/ocamlbuild/OCamlbuildPlugin.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/plugins/ocamlbuild/OCamlbuildPlugin.ml"
+  
+  
   (** Build using ocamlbuild
       @author Sylvain Le Gall
     *)
-
+  
+  
   open OASISTypes
   open OASISGettext
   open OASISUtils
+  open OASISString
   open BaseEnv
   open OCamlbuildCommon
   open BaseStandardVar
   open BaseMessage
-
+  
+  
+  
+  
+  
   let cond_targets_hook =
     ref (fun lst -> lst)
-
-  let build pkg argv =
-
+  
+  
+  let build extra_args pkg argv =
     (* Return the filename in build directory *)
     let in_build_dir fn =
       Filename.concat
         (build_dir argv)
         fn
     in
-
+  
     (* Return the unix filename in host build directory *)
     let in_build_dir_of_unix fn =
       in_build_dir (OASISHostPath.of_unix fn)
     in
-
-    (* Checks if the string [fn] ends with [nd] *)
-    let ends_with nd fn =
-      let nd_len =
-        String.length nd
-      in
-        (String.length fn >= nd_len)
-        &&
-        (String.sub
-           fn
-           (String.length fn - nd_len)
-           nd_len) = nd
-    in
-
+  
     let cond_targets =
       List.fold_left
         (fun acc ->
@@ -5608,7 +6314,7 @@ module OCamlbuildPlugin = struct
                        in_build_dir_of_unix
                        (cs, bs, lib)
                    in
-
+  
                    let tgts =
                      List.flatten
                        (List.filter
@@ -5616,14 +6322,14 @@ module OCamlbuildPlugin = struct
                           (List.map
                              (List.filter
                                 (fun fn ->
-                                 ends_with ".cma" fn
-                                 || ends_with ".cmxs" fn
-                                 || ends_with ".cmxa" fn
-                                 || ends_with (ext_lib ()) fn
-                                 || ends_with (ext_dll ()) fn))
+                                 ends_with ~what:".cma" fn
+                                 || ends_with ~what:".cmxs" fn
+                                 || ends_with ~what:".cmxa" fn
+                                 || ends_with ~what:(ext_lib ()) fn
+                                 || ends_with ~what:(ext_dll ()) fn))
                              unix_files))
                    in
-
+  
                      match tgts with
                        | _ :: _ ->
                            (evs, tgts) :: acc
@@ -5632,7 +6338,7 @@ module OCamlbuildPlugin = struct
                              (f_ "No possible ocamlbuild targets for library %s")
                              cs.cs_name
                  end
-
+  
              | Object (cs, bs, obj) when var_choose bs.bs_build ->
                  begin
                    let evs, unix_files =
@@ -5640,7 +6346,7 @@ module OCamlbuildPlugin = struct
                        in_build_dir_of_unix
                        (cs, bs, obj)
                    in
-
+  
                    let tgts =
                      List.flatten
                        (List.filter
@@ -5652,7 +6358,7 @@ module OCamlbuildPlugin = struct
                                  || ends_with ".cmx" fn))
                              unix_files))
                    in
-
+  
                      match tgts with
                        | _ :: _ ->
                            (evs, tgts) :: acc
@@ -5661,7 +6367,7 @@ module OCamlbuildPlugin = struct
                              (f_ "No possible ocamlbuild targets for object %s")
                              cs.cs_name
                  end
-
+  
              | Executable (cs, bs, exec) when var_choose bs.bs_build ->
                  begin
                    let evs, unix_exec_is, unix_dll_opt =
@@ -5669,7 +6375,7 @@ module OCamlbuildPlugin = struct
                        in_build_dir_of_unix
                        (cs, bs, exec)
                    in
-
+  
                    let target ext =
                      let unix_tgt =
                        (OASISUnixPath.concat
@@ -5677,19 +6383,20 @@ module OCamlbuildPlugin = struct
                           (OASISUnixPath.chop_extension
                              exec.exec_main_is))^ext
                      in
-                     let evs = 
+                     let evs =
                        (* Fix evs, we want to use the unix_tgt, without copying *)
                        List.map
                          (function
                             | BaseBuilt.BExec, nm, lst when nm = cs.cs_name ->
-                                BaseBuilt.BExec, nm, [[in_build_dir_of_unix unix_tgt]]
+                                BaseBuilt.BExec, nm,
+                                [[in_build_dir_of_unix unix_tgt]]
                             | ev ->
                                 ev)
                          evs
                      in
                        evs, [unix_tgt]
                    in
-
+  
                    (* Add executable *)
                    let acc =
                      match bs.bs_compiled_object with
@@ -5703,7 +6410,7 @@ module OCamlbuildPlugin = struct
                    in
                      acc
                  end
-
+  
              | Library _ | Object _ | Executable _ | Test _
              | SrcRepo _ | Flag _ | Doc _ ->
                  acc)
@@ -5711,35 +6418,31 @@ module OCamlbuildPlugin = struct
         (* Keep the pkg.sections ordered *)
         (List.rev pkg.sections);
     in
-
+  
     (* Check and register built files *)
     let check_and_register (bt, bnm, lst) =
       List.iter
         (fun fns ->
            if not (List.exists OASISFileUtil.file_exists_case fns) then
              failwithf
-               (f_ "No one of expected built files %s exists")
-               (String.concat (s_ ", ") (List.map (Printf.sprintf "'%s'") fns)))
+               (fn_
+                  "Expected built file %s doesn't exist."
+                  "None of expected built files %s exists."
+                  (List.length fns))
+               (String.concat (s_ " or ") (List.map (Printf.sprintf "'%s'") fns)))
         lst;
         (BaseBuilt.register bt bnm lst)
     in
-
-    let cond_targets =
-      (* Run the hook *)
-      !cond_targets_hook cond_targets
-    in
-
-      (* Run a list of target... *)
-      run_ocamlbuild 
-        (List.flatten 
-           (List.map snd cond_targets))
-        argv;
-      (* ... and register events *)
-      List.iter
-        check_and_register
-        (List.flatten (List.map fst cond_targets))
-
-
+  
+    (* Run the hook *)
+    let cond_targets = !cond_targets_hook cond_targets in
+  
+    (* Run a list of target... *)
+    run_ocamlbuild (List.flatten (List.map snd cond_targets) @ extra_args) argv;
+    (* ... and register events *)
+    List.iter check_and_register (List.flatten (List.map fst cond_targets))
+  
+  
   let clean pkg extra_args  =
     run_clean extra_args;
     List.iter
@@ -5752,29 +6455,40 @@ module OCamlbuildPlugin = struct
          | _ ->
              ())
       pkg.sections
-
+  
+  
 end
 
 module OCamlbuildDocPlugin = struct
-# 21 "/home/gildor/programmation/oasis/src/plugins/ocamlbuild/OCamlbuildDocPlugin.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/plugins/ocamlbuild/OCamlbuildDocPlugin.ml"
+  
+  
   (* Create documentation using ocamlbuild .odocl files
      @author Sylvain Le Gall
    *)
-
+  
+  
   open OASISTypes
   open OASISGettext
   open OASISMessage
   open OCamlbuildCommon
   open BaseStandardVar
-
-
-
-  let doc_build path pkg (cs, doc) argv =
+  
+  
+  
+  
+  type run_t =
+    {
+      extra_args: string list;
+      run_path: unix_filename;
+    } 
+  
+  
+  let doc_build run pkg (cs, doc) argv =
     let index_html =
       OASISUnixPath.make
         [
-          path;
+          run.run_path;
           cs.cs_name^".docdir";
           "index.html";
         ]
@@ -5783,11 +6497,11 @@ module OCamlbuildDocPlugin = struct
       OASISHostPath.make
         [
           build_dir argv;
-          OASISHostPath.of_unix path;
+          OASISHostPath.of_unix run.run_path;
           cs.cs_name^".docdir";
         ]
     in
-      run_ocamlbuild [index_html] argv;
+      run_ocamlbuild (index_html :: run.extra_args) argv;
       List.iter
         (fun glb ->
            BaseBuilt.register
@@ -5796,73 +6510,84 @@ module OCamlbuildDocPlugin = struct
              [OASISFileUtil.glob ~ctxt:!BaseContext.default
                 (Filename.concat tgt_dir glb)])
         ["*.html"; "*.css"]
-
-  let doc_clean t pkg (cs, doc) argv =
+  
+  
+  let doc_clean run pkg (cs, doc) argv =
     run_clean argv;
     BaseBuilt.unregister BaseBuilt.BDoc cs.cs_name
-
+  
+  
 end
 
 
-# 5807 "setup.ml"
+# 6523 "setup.ml"
 module CustomPlugin = struct
-# 21 "/home/gildor/programmation/oasis/src/plugins/custom/CustomPlugin.ml"
-
+# 22 "/tmp/SBo/oasis-0.4.2/src/plugins/custom/CustomPlugin.ml"
+  
+  
   (** Generate custom configure/build/doc/test/install system
       @author
     *)
-
+  
+  
   open BaseEnv
   open OASISGettext
   open OASISTypes
-
-
-
+  
+  
+  
+  
+  
   type t =
       {
         cmd_main:      command_line conditional;
         cmd_clean:     (command_line option) conditional;
         cmd_distclean: (command_line option) conditional;
       } 
-
-  let run  = BaseCustom.run 
-
+  
+  
+  let run  = BaseCustom.run
+  
+  
   let main t _ extra_args =
     let cmd, args =
-      var_choose 
-        ~name:(s_ "main command") 
+      var_choose
+        ~name:(s_ "main command")
         t.cmd_main
     in
-      run cmd args extra_args 
-
+      run cmd args extra_args
+  
+  
   let clean t pkg extra_args =
     match var_choose t.cmd_clean with
       | Some (cmd, args) ->
           run cmd args extra_args
       | _ ->
           ()
-
+  
+  
   let distclean t pkg extra_args =
     match var_choose t.cmd_distclean with
       | Some (cmd, args) ->
           run cmd args extra_args
       | _ ->
           ()
-
+  
+  
   module Build =
-  struct 
+  struct
     let main t pkg extra_args =
       main t pkg extra_args;
       List.iter
         (fun sct ->
            let evs =
-             match sct with 
+             match sct with
                | Library (cs, bs, lib) when var_choose bs.bs_build ->
                    begin
-                     let evs, _ = 
-                       BaseBuilt.of_library 
+                     let evs, _ =
+                       BaseBuilt.of_library
                          OASISHostPath.of_unix
-                         (cs, bs, lib) 
+                         (cs, bs, lib)
                      in
                        evs
                    end
@@ -5882,7 +6607,7 @@ module CustomPlugin = struct
                (fun (bt, bnm, lst) -> BaseBuilt.register bt bnm lst)
                evs)
         pkg.sections
-
+  
     let clean t pkg extra_args =
       clean t pkg extra_args;
       (* TODO: this seems to be pretty generic (at least wrt to ocamlbuild
@@ -5898,11 +6623,12 @@ module CustomPlugin = struct
            | _ ->
                ())
         pkg.sections
-
+  
     let distclean t pkg extra_args =
       distclean t pkg extra_args
   end
-
+  
+  
   module Test =
   struct
     let main t pkg (cs, test) extra_args =
@@ -5910,43 +6636,45 @@ module CustomPlugin = struct
         main t pkg extra_args;
         0.0
       with Failure s ->
-        BaseMessage.warning 
+        BaseMessage.warning
           (f_ "Test '%s' fails: %s")
           cs.cs_name
           s;
         1.0
-
+  
     let clean t pkg (cs, test) extra_args =
       clean t pkg extra_args
-
+  
     let distclean t pkg (cs, test) extra_args =
-      distclean t pkg extra_args 
+      distclean t pkg extra_args
   end
-
+  
+  
   module Doc =
   struct
     let main t pkg (cs, _) extra_args =
       main t pkg extra_args;
       BaseBuilt.register BaseBuilt.BDoc cs.cs_name []
-
+  
     let clean t pkg (cs, _) extra_args =
       clean t pkg extra_args;
       BaseBuilt.unregister BaseBuilt.BDoc cs.cs_name
-
+  
     let distclean t pkg (cs, _) extra_args =
       distclean t pkg extra_args
   end
-
+  
+  
 end
 
 
-# 5943 "setup.ml"
+# 6671 "setup.ml"
 open OASISTypes;;
 
 let setup_t =
   {
      BaseSetup.configure = InternalConfigurePlugin.configure;
-     build = OCamlbuildPlugin.build;
+     build = OCamlbuildPlugin.build [];
      test =
        [
           ("main",
@@ -5955,10 +6683,15 @@ let setup_t =
                  CustomPlugin.cmd_main =
                    [(OASISExpr.EBool true, ("$test", []))];
                  cmd_clean = [(OASISExpr.EBool true, None)];
-                 cmd_distclean = [(OASISExpr.EBool true, None)];
-                 })
+                 cmd_distclean = [(OASISExpr.EBool true, None)]
+              })
+       ];
+     doc =
+       [
+          ("api-archive",
+            OCamlbuildDocPlugin.doc_build
+              {OCamlbuildDocPlugin.extra_args = []; run_path = "src"})
        ];
-     doc = [("api-archive", OCamlbuildDocPlugin.doc_build "src")];
      install = InternalInstallPlugin.install;
      uninstall = InternalInstallPlugin.uninstall;
      clean = [OCamlbuildPlugin.clean];
@@ -5970,10 +6703,15 @@ let setup_t =
                  CustomPlugin.cmd_main =
                    [(OASISExpr.EBool true, ("$test", []))];
                  cmd_clean = [(OASISExpr.EBool true, None)];
-                 cmd_distclean = [(OASISExpr.EBool true, None)];
-                 })
+                 cmd_distclean = [(OASISExpr.EBool true, None)]
+              })
+       ];
+     clean_doc =
+       [
+          ("api-archive",
+            OCamlbuildDocPlugin.doc_clean
+              {OCamlbuildDocPlugin.extra_args = []; run_path = "src"})
        ];
-     clean_doc = [("api-archive", OCamlbuildDocPlugin.doc_clean "src")];
      distclean = [];
      distclean_test =
        [
@@ -5983,8 +6721,8 @@ let setup_t =
                  CustomPlugin.cmd_main =
                    [(OASISExpr.EBool true, ("$test", []))];
                  cmd_clean = [(OASISExpr.EBool true, None)];
-                 cmd_distclean = [(OASISExpr.EBool true, None)];
-                 })
+                 cmd_distclean = [(OASISExpr.EBool true, None)]
+              })
        ];
      distclean_doc = [];
      package =
@@ -5992,6 +6730,8 @@ let setup_t =
           oasis_version = "0.3";
           ocaml_version = Some (OASISVersion.VGreaterEqual "3.12.0");
           findlib_version = None;
+          alpha_features = [];
+          beta_features = [];
           name = "ocaml-archive";
           version = "2.8.4+2";
           license =
@@ -6000,8 +6740,8 @@ let setup_t =
                  {
                     OASISLicense.license = "LGPL";
                     excption = Some "OCaml linking";
-                    version = OASISLicense.Version "2.1";
-                    });
+                    version = OASISLicense.Version "2.1"
+                 });
           license_file = None;
           copyrights = [];
           maintainers = [];
@@ -6012,48 +6752,59 @@ let setup_t =
             Some
               "libarchive is a C library for reading and writing tar, cpio, zip, ISO, and\nother archive formats. This library is its OCaml bindings.\n\n * Reads a variety of formats, including tar, pax, cpio, zip, xar, lha, ar,\n   cab, mtree, and ISO images.\n * Writes tar, pax, cpio, zip, xar, ar, ISO, mtree, and shar archives.\n * Full automatic format detection when reading archives, including\n   compressed archives.\n\n[libarchive website](http://code.google.com/p/libarchive/)";
           categories = [];
-          conf_type = (`Configure, "internal", Some "0.3");
+          conf_type = (`Configure, "internal", Some "0.4");
           conf_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
-          build_type = (`Build, "ocamlbuild", Some "0.3");
+               post_command = [(OASISExpr.EBool true, None)]
+            };
+          build_type = (`Build, "ocamlbuild", Some "0.4");
           build_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
-          install_type = (`Install, "internal", Some "0.3");
+               post_command = [(OASISExpr.EBool true, None)]
+            };
+          install_type = (`Install, "internal", Some "0.4");
           install_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           uninstall_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           clean_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           distclean_custom =
             {
                pre_command = [(OASISExpr.EBool true, None)];
-               post_command = [(OASISExpr.EBool true, None)];
-               };
+               post_command = [(OASISExpr.EBool true, None)]
+            };
           files_ab = [];
           sections =
             [
+               Flag
+                 ({
+                     cs_name = "archivelwt";
+                     cs_data = PropList.Data.create ();
+                     cs_plugin_data = []
+                  },
+                   {
+                      flag_description =
+                        Some "Also provide operations as lwt threads";
+                      flag_default = [(OASISExpr.EBool true, true)]
+                   });
                Library
                  ({
                      cs_name = "archive-ocaml";
                      cs_data = PropList.Data.create ();
-                     cs_plugin_data = [];
-                     },
+                     cs_plugin_data = []
+                  },
                    {
                       bs_build = [(OASISExpr.EBool true, true)];
                       bs_install = [(OASISExpr.EBool true, true)];
@@ -6062,7 +6813,8 @@ let setup_t =
                       bs_build_depends =
                         [
                            FindlibPackage ("unix", None);
-                           FindlibPackage ("fileutils", None)
+                           FindlibPackage ("fileutils", None);
+                           FindlibPackage ("bigarray", None)
                         ];
                       bs_build_tools = [ExternalTool "ocamlbuild"];
                       bs_c_sources = ["Archive_stub.c"];
@@ -6072,24 +6824,28 @@ let setup_t =
                       bs_dlllib = [(OASISExpr.EBool true, [])];
                       bs_dllpath = [(OASISExpr.EBool true, [])];
                       bs_byteopt = [(OASISExpr.EBool true, [])];
-                      bs_nativeopt = [(OASISExpr.EBool true, [])];
-                      },
+                      bs_nativeopt = [(OASISExpr.EBool true, [])]
+                   },
                    {
                       lib_modules = ["Archive"; "ArchiveLow"];
                       lib_pack = false;
                       lib_internal_modules = [];
                       lib_findlib_parent = None;
                       lib_findlib_name = Some "archive";
-                      lib_findlib_containers = [];
-                      });
+                      lib_findlib_containers = []
+                   });
                Library
                  ({
                      cs_name = "archive-lwt";
                      cs_data = PropList.Data.create ();
-                     cs_plugin_data = [];
-                     },
+                     cs_plugin_data = []
+                  },
                    {
-                      bs_build = [(OASISExpr.EBool true, true)];
+                      bs_build =
+                        [
+                           (OASISExpr.EBool true, false);
+                           (OASISExpr.EFlag "archivelwt", true)
+                        ];
                       bs_install = [(OASISExpr.EBool true, true)];
                       bs_path = "src";
                       bs_compiled_object = Best;
@@ -6110,24 +6866,24 @@ let setup_t =
                       bs_dlllib = [(OASISExpr.EBool true, [])];
                       bs_dllpath = [(OASISExpr.EBool true, [])];
                       bs_byteopt = [(OASISExpr.EBool true, [])];
-                      bs_nativeopt = [(OASISExpr.EBool true, [])];
-                      },
+                      bs_nativeopt = [(OASISExpr.EBool true, [])]
+                   },
                    {
                       lib_modules = ["ArchiveLwt"];
                       lib_pack = false;
                       lib_internal_modules = [];
                       lib_findlib_parent = Some "archive-ocaml";
                       lib_findlib_name = Some "lwt";
-                      lib_findlib_containers = [];
-                      });
+                      lib_findlib_containers = []
+                   });
                Executable
                  ({
                      cs_name = "test";
                      cs_data = PropList.Data.create ();
-                     cs_plugin_data = [];
-                     },
+                     cs_plugin_data = []
+                  },
                    {
-                      bs_build = [(OASISExpr.EBool true, true)];
+                      bs_build = [(OASISExpr.EBool true, false)];
                       bs_install = [(OASISExpr.EBool true, false)];
                       bs_path = "test";
                       bs_compiled_object = Byte;
@@ -6148,44 +6904,44 @@ let setup_t =
                       bs_dlllib = [(OASISExpr.EBool true, [])];
                       bs_dllpath = [(OASISExpr.EBool true, [])];
                       bs_byteopt = [(OASISExpr.EBool true, [])];
-                      bs_nativeopt = [(OASISExpr.EBool true, [])];
-                      },
-                   {exec_custom = true; exec_main_is = "test.ml"; });
+                      bs_nativeopt = [(OASISExpr.EBool true, [])]
+                   },
+                   {exec_custom = true; exec_main_is = "test.ml"});
                Test
                  ({
                      cs_name = "main";
                      cs_data = PropList.Data.create ();
-                     cs_plugin_data = [];
-                     },
+                     cs_plugin_data = []
+                  },
                    {
-                      test_type = (`Test, "custom", Some "0.3");
+                      test_type = (`Test, "custom", Some "0.4");
                       test_command = [(OASISExpr.EBool true, ("$test", []))];
                       test_custom =
                         {
                            pre_command = [(OASISExpr.EBool true, None)];
-                           post_command = [(OASISExpr.EBool true, None)];
-                           };
+                           post_command = [(OASISExpr.EBool true, None)]
+                        };
                       test_working_directory = None;
                       test_run =
                         [
                            (OASISExpr.ENot (OASISExpr.EFlag "tests"), false);
                            (OASISExpr.EFlag "tests", true)
                         ];
-                      test_tools = [ExternalTool "ocamlbuild"];
-                      });
+                      test_tools = [ExternalTool "ocamlbuild"]
+                   });
                Doc
                  ({
                      cs_name = "api-archive";
                      cs_data = PropList.Data.create ();
-                     cs_plugin_data = [];
-                     },
+                     cs_plugin_data = []
+                  },
                    {
                       doc_type = (`Doc, "ocamlbuild", Some "0.2");
                       doc_custom =
                         {
                            pre_command = [(OASISExpr.EBool true, None)];
-                           post_command = [(OASISExpr.EBool true, None)];
-                           };
+                           post_command = [(OASISExpr.EBool true, None)]
+                        };
                       doc_build =
                         [
                            (OASISExpr.ENot (OASISExpr.EFlag "docs"), false);
@@ -6199,8 +6955,8 @@ let setup_t =
                       doc_format = OtherDoc;
                       doc_data_files = [];
                       doc_build_tools =
-                        [ExternalTool "ocamlbuild"; ExternalTool "ocamldoc"];
-                      })
+                        [ExternalTool "ocamlbuild"; ExternalTool "ocamldoc"]
+                   })
             ];
           plugins =
             [
@@ -6209,19 +6965,18 @@ let setup_t =
                (`Extra, "StdFiles", Some "0.2")
             ];
           schema_data = PropList.Data.create ();
-          plugin_data = [];
-          };
+          plugin_data = []
+       };
      oasis_fn = Some "_oasis";
-     oasis_version = "0.3.1";
-     oasis_digest =
-       Some "\151\159\164\182\026\017\180M\254]:\228\233\188\024\160";
+     oasis_version = "0.4.2";
+     oasis_digest = Some "F\132\154\168j\tQ\205N~\205ENW\135<";
      oasis_exec = None;
      oasis_setup_args = [];
-     setup_update = false;
-     };;
+     setup_update = false
+  };;
 
 let setup () = BaseSetup.setup setup_t;;
 
-# 6226 "setup.ml"
+# 6981 "setup.ml"
 (* OASIS_STOP *)
 let () = setup ();;
diff --git a/src/META b/src/META
index 5af400c..5f98766 100644
--- a/src/META
+++ b/src/META
@@ -1,8 +1,8 @@
 # OASIS_START
-# DO NOT EDIT (digest: e90fde25a027946499a73c2d3472e144)
+# DO NOT EDIT (digest: 7b16afed0ffee51be613f207776abfae)
 version = "2.8.4+2"
 description = "Binding to libarchive"
-requires = "unix fileutils"
+requires = "unix fileutils bigarray"
 archive(byte) = "archive-ocaml.cma"
 archive(byte, plugin) = "archive-ocaml.cma"
 archive(native) = "archive-ocaml.cmxa"
-- 
1.8.4

